{
    "nodes": [
        {
            "ix": "8-42_v1_0",
            "content": "Expanding the Orthologous Matrix (OMA) programmatic interfaces: REST API and the OmaDB packages for R and Python",
            "ntype": "article-title",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_1",
            "content": "Abstract",
            "ntype": "abstract",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_2",
            "content": "The Orthologous Matrix (OMA) is a well-established resource to identify orthologs among many genomes. Here, we present two recent additions to its programmatic interface, namely a REST API, and user-friendly R and Python packages called OmaDB . These should further facilitate the incorporation of OMA data into computational scripts and pipelines. The REST API can be freely accessed at https://omabrowser.org/api . The R OmaDB package is available as part of Bioconductor at http://bioconductor.org/packages/OmaDB/ , and the omadb Python package is available from the Python Package Index (PyPI) at https://pypi.org/project/omadb/ .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_3",
            "content": "Introduction",
            "ntype": "title",
            "meta": {
                "section": "1",
                "sec-type": "intro",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_4",
            "content": "Orthologs are pairs of protein coding genes that have common ancestry and have diverged due to speciation events <REF-1> . The detection of orthologs is of fundamental importance in many fields in biology, such as comparative genomics, as it allows us to propagate existing biological knowledge to ever growing newly sequenced data <REF-2> , <REF-3> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_5",
            "content": "The Orthologous Matrix (OMA) is a method and resource for the inference of orthologs among complete genomes <REF-4> . The OMA database ( https://omabrowser.org ) features broad scope and size with currently over 2,100 species from all three domains of life.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_6",
            "content": "The OMA browser has supported multiple ways of exporting the underlying data from its beginning. Users can download data either via bulk archives or interactively through the browser\u2014using where possible standard file formats, such as FASTA, OrthoXML <REF-5> , or PhyloXML <REF-6> . For programmatic access, early OMA database releases offered an Application Programming Interface (API) in the form of the Simple Object Access Protocol (SOAP). However, the complexity and limited adoption of SOAP has prompted us to recently switch to the simpler, faster, and more widely used Representational State Transfer (REST) protocol for the OMA API <REF-4> . Here, we provide a description of this new OMA REST API.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_7",
            "content": "Furthermore, the R environment is widely used in bioinformatics due to its flexibility as a high-level scripting language, statistical capabilities, and numerous bioinformatics libraries. In particular, the Bioconductor open source framework contains over 2,000 packages to facilitate either access to or manipulation of biological data <REF-7> . This motivated us to develop the OmaDB Bioconductor package which provides a more idiomatic and user-friendly access to OMA data in R implemented on top of the REST API.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_8",
            "content": "Finally, to also enable Python users to easily interact with the database, we have developed a similar package in that language, compliant with the conventions and with support of typical complementary Python packages as outlined below.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_9",
            "content": "Methods",
            "ntype": "title",
            "meta": {
                "section": "2",
                "sec-type": "methods",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_10",
            "content": "We start by describing the OMA REST API, before moving on to detail the OmaDB Bioconductor package, and finally outline the omadb Python package.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_11",
            "content": "OMA REST API",
            "ntype": "title",
            "meta": {
                "section": "2.1",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_12",
            "content": "The REST framework is an API architectural style that is based on URLs and HTTP protocol methods. It was designed to be stateless and thus is context independent. That is, it does not save data internally between the HTTP requests which minimises server-side application state, thus easing parallelism. The combination of the HTTP and JSON data formats makes it particularly suitable for web applications and easily supported by most programming languages.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_13",
            "content": "Since the backend of the OMA browser is almost fully based on Python and its frontend is supported by the Django web framework <REF-8> , we have opted to use the Django Rest Framework (DRF) to implement a REST API in our latest release <REF-4> . Most API calls require querying the OMA database, stored in HDF5 <REF-9> , using a custom Python library (\u201cpyoma\u201d). The query results are serialised in the format requested by the user \u2014 typically JSON.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_14",
            "content": "Most data available through the OMA browser is now also accessible via the API. This includes individual genes and their attributes such as protein or cDNA sequences, cross-references, pairwise orthologs, hierarchical orthologous groups <REF-10> , as well as species trees and the corresponding taxonomy. The API documentation as well as the interactive interface can be found at https://omabrowser.org/api/docs ( Figure 1 ).",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_15",
            "content": "Figure 1.",
            "ntype": "label",
            "meta": {
                "id": "f1",
                "caption": "Showcase of the OMA REST API documentation page, with an example of the interactive query and response.",
                "uri": "https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure1.gif",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_16",
            "content": "<fig xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fig-type=\"figure\" id=\"f1\" position=\"float\"> <caption> <title>Showcase of the OMA REST API documentation page, with an example of the interactive query and response.</title> </caption> <graphic xlink:href=\"https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure1.gif\"/> </fig>",
            "ntype": "fig",
            "meta": {
                "id": "f1",
                "caption": "Showcase of the OMA REST API documentation page, with an example of the interactive query and response.",
                "uri": "https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure1.gif",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_17",
            "content": "OmaDB Bioconductor package",
            "ntype": "title",
            "meta": {
                "section": "2.2",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_18",
            "content": "To facilitate simplified access to the API and downstream analyses in the R environment, we have also developed an API wrapper package in R, now available in Bioconductor <REF-7> ( http://bioconductor.org/packages/OmaDB/ ). This allowed for abstraction of the server interface, eliminating the need to know structure of the database or the URL endpoints to access the required data.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_19",
            "content": "The package consists of a collection of functions that import OMA data into R friendly objects, namely S3 objects and data frames\u2014depending on the query supplied. Due to the volume of the data available, some selected object attributes are at first given as URL endpoints. However, these are automatically loaded upon accession. OmaDB also facilitates further downstream analyses with other Bioconductor packages, such as GO enrichment analysis with topGO <REF-11> , sequence analysis with BioStrings <REF-12> , phylogenetic analyses using ggtree <REF-13> or gene locus analyses with the help of GenomicRanges <REF-14> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_20",
            "content": "The open source code is hosted at https://github.com/DessimozLab/OmaDB/ . The package requires R version >= 3.6 and Bioconductor version >= 3.9, as well as a stable internet connection.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_21",
            "content": "Package Installation",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_22",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">if (!requireNamespace(</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">\"BiocManager\"</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">))</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">install.packages(</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">\"BiocManager\"</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">BiocManager::install(</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">\"OmaDB\"</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\">#load the package</styled-content> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold\">library</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">(OmaDB)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_23",
            "content": "omadb Python package",
            "ntype": "title",
            "meta": {
                "section": "2.3",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_24",
            "content": "For Python users, we provide an analogous package also named omadb . Results are supplied to users as a hybrid attribute-dictionary object. As such, both attribute and key-based access is possible. Where the URL of a further API call is listed in a response, this has been designed to be automatically requested for the user.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_25",
            "content": "For data that can be represented as a table, the pandas package <REF-15> is supported. HOGs can be analysed or displayed using the pyham library <REF-16> . Trees are retrievable as DendroPy <REF-17> or ETE3 <REF-18> Tree objects. Gene Ontology enrichment analyses are possible through the use of the goatools package <REF-19> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_26",
            "content": "The open source code is hosted at https://github.com/DessimozLab/pyomadb/ . The package requires Python >=3.6, as well as a stable internet connection. It is also available to download from PyPI, installable using pip.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_27",
            "content": "Package Installation",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_28",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># Install in shell, using pip</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">$ pip install omadb</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># In Python, load the package</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">&gt;&gt;&gt;</styled-content> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold;\">from</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">omadb import Client</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># Initialise the client</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">&gt;&gt;&gt; c = Client()</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_29",
            "content": "Results",
            "ntype": "title",
            "meta": {
                "section": "3",
                "sec-type": "results",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_30",
            "content": "We provide six illustrative examples in R. The first shows a direct call to the REST API, while the other five showcase the OmaDB R library. These examples are also available as a Jupyter notebook <REF-20> as part of the OmaDB R code repository. We have also provided analogous examples in Python, also in the form of a Jupyter notebook, included in its code repository\u2014with the exception of Example 6, which uses a package only available in R.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_31",
            "content": "Example 1 - Simply accessing the API, in R, via URLs",
            "ntype": "title",
            "meta": {
                "section": "3.1",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_32",
            "content": "One way to access the API is to directly send a request using httr <REF-21> in R. This approach requires the user to know the URL of the API endpoint, as well as the URL of the API function of interest. Some additional processing steps of the resultant response is usually needed. A simple example to retrieve information on the P53_RAT protein is provided below.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_33",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold;\">library</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">(httr)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">url &lt;-</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">\"https://omabrowser.org/api/protein/P53_RAT/\"</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">response &lt;- GET(url)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">response_content_list &lt;- httr::content(response, as =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">\"parsed\"</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_34",
            "content": "Example 2 - Using a sequence to find its gene family (Hierarchical Orthologous Group) and function via gene ontologies",
            "ntype": "title",
            "meta": {
                "section": "3.2",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_35",
            "content": "Below is a simple workflow using the OmaDB package to annotate a given protein sequence, using the mapSequence() function.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_36",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold;\">library</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">(OmaDB)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">sequence &lt;-</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'MKLVFLVLLFLGALGLCLAGRRRSVQWCAVSQPEATKCFQWQRNMRKVRGPPVSCIKRD SPIQCIQAIAENRADAVTLDGGFIYEAGLAPYKLRPVAAEVYGTERQPRTHYYAVAVVKKGGSFQLNELQGL KSCHTGLRRTAGWNVPIGTLRPFLNWTGPPEPIEAAVARFFSASCVPGADKGQFPNLCRLCAGTGENKCAFS SQEPYFSYSGAFKCLRDGAGDVAFIRESTVFEDLSDEAERDEYELLCPDNTRKPVDKFKDCHLARVPSHAVV ARSVNGKEDAIWNLLRQAQEKFGKDKSPKFQLFGSPSGQKDLLFKDSAIGFSRVPPRIDSGLYLGSGYFTAI QNLRKSEEEVAARRARVVWCAVGEQELRKCNQWSGLSEGSVTCSSASTTEDCIALVLKGEADAMSLDGGYVY TAGKCGLVPVLAENYKSQQSSDPDPNCVDRPVEGYLAVAVVRRSDTSLTWNSVKGKKSCHTAVDRTAGWNIP MGLLFNQTGSCKFDEYFSQSCAPGSDPRSNLCALCIGDEQGENKCVPNSNERYYGYTGAFRCLAENAGDVAF VKDVTVLQNTDGNNNEAWAKDLKLADFALLCLDGKRKPVTEARSCHLAMAPNHAVVSRMDKVERLKQVLLHQ QAKFGRNGSDCPDKFCLFQSETKNLLFNDNTECLARLHGKTTYEKYLGPQYVAGITNLKKCSTSPLLEACEF LRK'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">seq_annotation &lt;- mapSequence(sequence)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_37",
            "content": "In this example, the sequence mapping identified one target sequence. From the seq_annotation object further information can be obtained as follows:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_38",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">seq_annotation$targets[[1]]$canonicalid</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># 'TRFL_HUMAN'</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_39",
            "content": "Thus, our sequence is human lactotransferrin (also known as lactoferrin). Lactotransferrin is one of four subfamilies of transferrins in mammals <REF-22> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_40",
            "content": "To investigate the evolutionary history of genes more precisely, we turn to Hierarchical Orthologous Groups (HOGs)\u2014sets of genes which have descended from a single common ancestral gene within a taxonomic range of interest <REF-10> . For an introduction to HOGs, we refer the interested reader to the following short video: https://youtu.be/5p5x5gxzhZA .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_41",
            "content": "By knowing the ID of the HOG to which our sequence belongs, we can obtain a list of all the HOG members (i.e. all genes in the HOG), as follows:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_42",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">hog_id &lt;- seq_annotation$targets[[</styled-content> <styled-content style=\"font-size:15px;color:#008080;\">1</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">]]$oma_hog_id</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># &#8217;HOG:0413862.1a.1b'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">hog &lt;- getHOG(id = hog_id, members = </styled-content> <styled-content style=\"font-size:15px;color:#000000;\">TRUE, level =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Mammalia'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">hog$members</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_43",
            "content": "Note that it is also possible to access information on a HOG using the ID of one of its members. Therefore the below will produce the same output.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_44",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">hog &lt;- getHOG(id =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'TRFL_HUMAN'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">, members = </styled-content> <styled-content style=\"font-size:15px;color:#000000;\">TRUE, level =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Mammalia'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_45",
            "content": "We can easily retrieve the Gene Ontology (GO) terms <REF-23> that are associated to each of the members using OmaDB.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_46",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">go_annotations &lt;- getProtein(hog$members$omaid,</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">attribute =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'gene_ontology'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_47",
            "content": "The resultant list of GO terms per gene is in the \u201cgeneID2GO\u201d format by default, which is used by the topGO <REF-11> package.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_48",
            "content": "To compare the function of lactotransferrins with their paralogous counterparts, we can retrieve a background set consisting of all members of the transferring HOG defined at the root of the eukaryotes",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_49",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">bgHOG &lt;- getHOG(id =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'TRFL_HUMAN'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">, members = TRUE, level =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Eukaryota'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">bgAnnnot &lt;- getProtein(bgHOG$members$omaid, attribute =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'gene_ontology'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_50",
            "content": "We can now construct a topGO object using the getTopGO function as seen below. Note that the background set of terms is set by getTopGO to all terms appearing in the list of annotations. This may not be appropriate in all cases\u2014the choice of background set requires careful consideration <REF-24> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_51",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">bgAnnnotFormatted = formatTopGO(bgAnnnot, format =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'geneID2GO'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold;\">library</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">(topGO)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">myGO &lt;- getTopGO(annotations = bgAnnnotFormatted, format =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'geneID2GO'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">,</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">foregroundGenes = hog$members$entry_nr, ontology =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'BP'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">myRes &lt;- runTest(myGO, algorithm =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'classic'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">, statistic =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'fisher'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">print(GenTable(myGO, myRes))</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_52",
            "content": "As the output in Table 1 indicates, several enriched terms in the mammalian lactotransferrin are related to bone formation, consistent with previous reports in the literature (e.g. <REF-25> ). So is the role of lactotransferrin in antimicrobial activity (e.g. <REF-26> ).",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_53",
            "content": "Table 1.",
            "ntype": "label",
            "meta": {
                "id": "T1",
                "caption": "Gene Ontology enrichment of Biological Process terms associated with mammalian lactotransferrins compared to all eukaryotic transferrins, as obtained from example 2.",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_54",
            "content": "<table-wrap xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"T1\" position=\"anchor\"> <caption> <title>Gene Ontology enrichment of Biological Process terms associated with mammalian lactotransferrins compared to all eukaryotic transferrins, as obtained from example 2.</title> </caption> <table content-type=\"article-table\" frame=\"hsides\"> <thead> <tr> <th align=\"left\">GO.ID</th> <th align=\"left\">Term</th> <th align=\"left\">P-value</th> </tr> </thead> <tbody> <tr> <td align=\"left\">GO:0001501</td> <td align=\"left\">skeletal system development</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0001503</td> <td align=\"left\">ossification</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0001649</td> <td align=\"left\">osteoblast differentiation</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0001816</td> <td align=\"left\">cytokine production</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0001817</td> <td align=\"left\">regulation of cytokine production</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0001818</td> <td align=\"left\">negative regulation of cytokine production</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0002237</td> <td align=\"left\">response to molecule of bacterial origin</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0002682</td> <td align=\"left\">regulation of immune system process</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0002683</td> <td align=\"left\">negative regulation of immune system process</td> <td align=\"left\">&lt;1e-30</td> </tr> <tr> <td align=\"left\">GO:0002761</td> <td align=\"left\">regulation of myeloid leukocyte differentiation</td> <td align=\"left\">&lt;1e-30</td> </tr> </tbody> </table> </table-wrap>",
            "ntype": "table-wrap",
            "meta": {
                "id": "T1",
                "caption": "Gene Ontology enrichment of Biological Process terms associated with mammalian lactotransferrins compared to all eukaryotic transferrins, as obtained from example 2.",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_55",
            "content": "Example 3 - Taxonomic tree visualisation",
            "ntype": "title",
            "meta": {
                "section": "3.3",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_56",
            "content": "The taxonomic data obtained using the OmaDB package can easily be plugged into ggtree <REF-13> for phylogenetic tree visualisation. First, the tree is obtained using the getTaxonomy() function. In this example, the tree is rooted at the Hominoidea taxonomic level. The default format of the object returned is newick.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_57",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">tax &lt;- getTaxonomy(root =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Hominoidea'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_58",
            "content": "The resultant object can directly be used to build a phylogenetic tree using the ggtree package as below:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_59",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold\">library</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">(ggtree) tree &lt;- getTree(tax$newick) mytree &lt;- ggtree(tree)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_60",
            "content": "The tree can be further annotated using species silhouettes from PhyloPic ( http://phylopic.org/ ). This functionality is already enabled within the ggtree package and just requires obtaining the relevant image codes. The workflow to produce Figure 2 is below.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_61",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold\">library</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">(rphylopic) labels &lt;- tree$tip.label labelsFormatted &lt;- sapply(labels, FUN = function(x) gsub(</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">\"_\"</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">,</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">\" \"</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">, x, fixed = TRUE)) ids &lt;- sapply(labelsFormatted, FUN = function(x) name_search(x)$canonicalName[1,1]) images &lt;- sapply( as.character(ids), FUN = function(x) tryCatch(name_images(x)$same[[1]]$uid, error = function(w) name_images(x)$supertaxa[[1]]$uid) ) d &lt;- data.frame(label = labels, images = as.character(images))</styled-content> <styled-content style=\"font-size:15px;color:#333333; font-weight:bold\">library</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">(dplyr) library(ggimage)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_62",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">mytree %&lt;+% d + geom_tiplab(aes(image = images), geom =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'phylopic'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">, offset = 2.3, color =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'steelblue'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">) + geom_tiplab(offset = 0.3) + ggplot2::xlim(0, 7)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_63",
            "content": "Figure 2.",
            "ntype": "label",
            "meta": {
                "id": "f2",
                "caption": "Species taxonomy tree obtained using example 3.",
                "uri": "https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure2.gif",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_64",
            "content": "<fig xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fig-type=\"figure\" id=\"f2\" position=\"float\"> <caption> <title>Species taxonomy tree obtained using example 3.</title> </caption> <graphic xlink:href=\"https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure2.gif\"/> </fig>",
            "ntype": "fig",
            "meta": {
                "id": "f2",
                "caption": "Species taxonomy tree obtained using example 3.",
                "uri": "https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure2.gif",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_65",
            "content": "Example 4 - Visualising the distribution of PAM distances in the taxonomic space",
            "ntype": "title",
            "meta": {
                "section": "3.4",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_66",
            "content": "To obtain all orthologous pairs between two genomes, we can use the getGenomePairs() function. To limit server load, the resultant response is paginated and by default only returns the first page, capped at 100 entries. This is easily adjustable by setting the \u2018per_page\u2019 parameter to either the number of orthologs required or simply to \u2018all\u2019.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_67",
            "content": "In this example, we compare the distribution of PAM distances (Point accepted mutations; <REF-27> ) between orthologs of two species-pairs, namely human-dog and human-mouse. First, we request the required data:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_68",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">mouse_id = getGenome(id=</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Mus musculus'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)$taxon_id human_id = getGenome(id=</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Homo sapiens'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)$taxon_id dog_id = getGenome(id=</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Canis lupus familiaris'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)$taxon_id human_mouse &lt;- getGenomePairs(genome_id1 = human_id, genome_id2 = mouse_id, rel_type =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'1:1'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">) human_dog &lt;- getGenomePairs(genome_id1 = human_id, genome_id2 = dog_id, rel_type =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'1:1'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_69",
            "content": "We can then bind the two resultant data frames and plot the results ( Figure 3 ), as so:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_70",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">human_mouse$Species &lt;-</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Mus musculus' </styled-content> <styled-content style=\"font-size:15px;color:#333333;\">human_dog$Species &lt;-</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Canis lupus familiaris' </styled-content> <styled-content style=\"font-size:15px;color:#333333;\"> all_pairs &lt;- rbind(human_mouse, human_dog) all_pairs$Species &lt;- as.factor(all_pairs$Species)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">library(ggplot2) g &lt;- ggplot(all_pairs, aes(x =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">distance</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">, fill = Species)) + geom_density(alpha = 0.5) + xlab(</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'evolutionary distance [PAM]'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">) + theme(legend.position =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'bottom'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour =</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'black'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)) print(g)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_71",
            "content": "Figure 3.",
            "ntype": "label",
            "meta": {
                "id": "f3",
                "caption": "Distribution of evolutionary distances (in PAM units; 27) human-dog (red) and human-mouse (blue) pairs, obtained using example 4.",
                "uri": "https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure3.gif",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_72",
            "content": "<fig xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fig-type=\"figure\" id=\"f3\" position=\"float\"> <caption> <title>Distribution of evolutionary distances (in PAM units; 27) human-dog (red) and human-mouse (blue) pairs, obtained using example 4.</title> </caption> <graphic xlink:href=\"https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure3.gif\"/> </fig>",
            "ntype": "fig",
            "meta": {
                "id": "f3",
                "caption": "Distribution of evolutionary distances (in PAM units; 27) human-dog (red) and human-mouse (blue) pairs, obtained using example 4.",
                "uri": "https://f1000researchdata.s3.amazonaws.com/manuscripts/19190/05bb5566-b359-4c5d-b77c-9e13672a2f52_figure3.gif",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_73",
            "content": "The two-sample Kolmogorov-Smirnov test can be performed on the two distributions, using the command:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_74",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">ks.test(human_dog$distance, human_mouse$distance)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_75",
            "content": "This returns p-value < 2.2e-16. The median distance between dog and human is shorter than that of mouse and human (8.8 vs. 11.8). This is consistent with previous observations that the rodent has a longer branch than humans and carnivores, in part due to their shorter generation time <REF-28> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_76",
            "content": "Example 5 - Annotating protein sequences not present in OMA",
            "ntype": "title",
            "meta": {
                "section": "3.5",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_77",
            "content": "Although the OMA database currently analyses over 2,100 genomes, many more have been sequenced, and the gap keeps on widening. It is nevertheless possible to use OMA to infer the function of custom protein sequences through a fast approximate search against all sequences in OMA <REF-4> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_78",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># Our mystery sequence is cystic fibrosis transmembrane conductance # regulator in the Emperor penguin (UniProt ID: A0A087RGQ1_APTFO)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\"> mysterySeq &lt;-</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'FFFLLRWTKPILRKGYRRRLELSDIYQIPSADSADNLSEKLEREWDRELATSKKKPKLINALRRCFFWKFM FYGIILYLGEVTKSVQPLLLGRIIASYDPDNSDERSIAYYLAIGLCLLFLVRTLLIHPAIFGLHHIGMQMRI AMFSLIYKKILKLSSRVLDKISTGQLVSLLSNNLNKFDEGLALAHFVWIAPLQVALLMGLLWDMLEASAFSG LAFLIVLAFFQAWLGQRMMKYRNKRAGKINERLVITSEIIENIQSVKAYCWEDAMEKMIESIRETELKLTRK AAYVRYFNSSAFFFSGFFVVFLAVLPYAVIKGIILRKIFTTISFCIVLRMTVTRQFPGSVQTWYDSIGAINK IQDFLLKKEYKSLEYNLTTTGVELDKVTAFWDEGIGELFVKANQENNNSKAPSTDNNLFFSNFPLHASPVLQ DINFKIEKGQLLAVSGSTGAGKTSLLMLIMGELEPSQGRLKHSGRISFSPQVSWIMPGTIKENIIFGVSYDE YRYKSVIKACQLEEDISKFPDKDYTVLGDGGIILSGGQRARISLARAVYKDADLYLLDSPFGHLDIFTEKEI FESCVCKLMANKTRILVTSKLEHLKIADKILILHEGSCYFYGTFSELQGQRPDFSSELMGFDSFDQFSAERR NSILTETLRRFSIEGEGTGSRNEIKKQSFKQTSDFNDKRKNSIIINPLNASRKFSVVQRNGMQVNGIEDGHN DPPERRFSLVPDLEQGDVGLLRSSMLNTDHILQGRRRQSVLNLMTGTSVNYGPNFSKKGSTTFRKMSMVPQT NLSSEIDIYTRRLSRDSVLDITDEINEEDLKECFTDDAESMGTVTTWNTYFRYVTIHKNLIFVLILCVTVFL VEVAASLAGLWFLKQTALKANTTQSENSTSDKPPVIVTVTSSYYIIYIYVGVADTLLAMGIFRGLPLVHTLI TVSKTLHQKMVHAVLHAPMSTFNSWKAGGMLNRFSKDTAVLDDLLPLTVFDFIQLILIVIGAITVVSILQPY IFLASVPVIAAFILLRAYFLHTSQQLKQLESEARSPIFTHLVTSLKGLWTLRAFGRQPYFETLFHKALNLHT ANWFLYLSTLRWFQMRIEMIFVVFFVAVAFISIVTTGDGSGKVGIILTLAMNIMGTLQWAVNSSIDVDSLMR SVGRIFKFIDMPTEEMKNIKPHKNNQFSDALVIENRHAKEEKNWPSGGQMTVKDLTAKYSEGGAAVLENISF SISSGQRVGLLGRTGSGKSTLLFAFLRLLNTEGDIQIDGVSWSTVSVQQWRKAFGVIPQKVFIFSGTFRMNL DPYGQWNDEEIWKVAEEVGLKSVIEQFPGQLDFVLVDGGCVLSHGHKQLMCLARSVLSKAKILLLDEPSAHL DPVTSQVIRKTLKHAFANCTVILSEHRLEAMLECQRFLVIEDNKLRQYESIQKLLNEKSSFRQAISHADRLK LLPVHHRNSSKRKPRPKITALQEETEEEVQETRL'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">myAnnotations &lt;- getAnnotation(mysterySeq)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_79",
            "content": "This results in 54 GO annotations. By comparison, this sequence has merely 15 GO annotations in UniProt-GOA <REF-29> \u2014 all of which are also predicted by this method in OMA.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_80",
            "content": "Example 6 - Combining OmaDB with BgeeDB for gene expression",
            "ntype": "title",
            "meta": {
                "section": "3.6",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_81",
            "content": "We go back to the lactotransferrin gene family from Example 2. We can use OmaDB in conjunction with the BgeeDB Bioconductor package <REF-30> to retrieve expression data from the Bgee database <REF-31> as follows.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_82",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">BiocManager::install(\"BgeeDB\") library(BgeeDB)</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># Bgee uses Ensembl gene IDs, obtainable using OmaDB&#8217;s cross-references.</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">trfl_xrefs &lt;- getProtein(id='TRFL_HUMAN')$xref</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">trfl_ens_id &lt;- subset(trfl_xrefs, source ==</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Ensembl Gene'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)$xref</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># The Ensembl gene IDs need to be without version suffix</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">trfl_ens_id &lt;- strsplit(trfl_ens_id,'.',fixed=TRUE)[[1]][1]</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">my_stage &lt;-</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'UBERON:0034920'</styled-content> <styled-content style=\"font-size:15px;color:#999988; font-style:italic\"># Infant stage</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">bgee.expr &lt;- Bgee$new(species=</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'Homo_sapiens'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">expr.data &lt;- loadTopAnatData(bgee.expr, stage = my_stage)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">gene.expr.tissue.ids &lt;- unlist(expr.data$gene2anatomy[trfl_ens_id], use.names = F)</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">tissues &lt;- expr.data$organ.names print(tissues[tissues$ID %in% gene.expr.tissue.ids, ])</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_83",
            "content": "Among the tissues in which lactotransferrin is expressed according to Bgee ( Table 2 ), we note the bone marrow and the palpebral conjunctiva (the eyelid inner surface). This is consistent with the aforementioned involvement of lactotransferrin in bone formation and anti-microbial activity.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_84",
            "content": "Table 2.",
            "ntype": "label",
            "meta": {
                "id": "T2",
                "caption": "Human tissues in which lactotransferrin is expressed in infant stage, according to the Bgee database version 14 (output of Example 6).",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_85",
            "content": "<table-wrap xmlns:mml=\"http://www.w3.org/1998/Math/MathML\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"T2\" position=\"anchor\"> <caption> <title>Human tissues in which lactotransferrin is expressed in infant stage, according to the Bgee database version 14 (output of Example 6).</title> </caption> <table content-type=\"article-table\" frame=\"hsides\"> <thead> <tr> <th align=\"left\">ID</th> <th align=\"left\">Name</th> </tr> </thead> <tbody> <tr> <td align=\"left\">UBERON:0001812</td> <td align=\"left\">palpebral conjunctiva</td> </tr> <tr> <td align=\"left\">UBERON:0000178</td> <td align=\"left\">blood</td> </tr> <tr> <td align=\"left\">UBERON:0002371</td> <td align=\"left\">bone marrow</td> </tr> <tr> <td align=\"left\">UBERON:0001154</td> <td align=\"left\">vermiform appendix</td> </tr> <tr> <td align=\"left\">UBERON:0002084</td> <td align=\"left\">heart left ventricle</td> </tr> </tbody> </table> </table-wrap>",
            "ntype": "table-wrap",
            "meta": {
                "id": "T2",
                "caption": "Human tissues in which lactotransferrin is expressed in infant stage, according to the Bgee database version 14 (output of Example 6).",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_86",
            "content": "Further tutorials on the OmaDB package can be found in the accompanying vignettes:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_87",
            "content": "<preformat preformat-type=\"computer code\"> <styled-content style=\"font-size:15px;color:#333333;\">browseVignettes(</styled-content> <styled-content style=\"font-size:15px;color:#DD1144;\">'OmaDB'</styled-content> <styled-content style=\"font-size:15px;color:#333333;\">)</styled-content> </preformat>",
            "ntype": "preformat",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_88",
            "content": "Discussion and outlook",
            "ntype": "title",
            "meta": {
                "section": "4",
                "sec-type": "discussion",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_89",
            "content": "Orthology is used for various purposes, such as species tree inference, gene evolution dynamic, or protein function prediction. The retrieval of orthologs is thus typically just the starting point of a larger analysis. Therefore, this overhaul and expansion of the OMA programmatic interface will facilitate the incorporation of OMA data in such larger analyses.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_90",
            "content": "Our R package will continue to be maintained in line with the biannual Bioconductor releases. Further work to improve the package includes improvement in performance. For example, the responses are currently fully loaded into an R object of choice which, depending on the response size, may create some time lag in the response. We will also continue to update the package and API to incorporate new functionalities of OMA, such as support for local synteny which is currently under development.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_91",
            "content": "Likewise, we will also maintain and further develop the Python package. In particular, we will explore the possibility of further integration with the BioPython library <REF-32> .",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_92",
            "content": "More generally, in OMA we will keep supporting the various ways of accessing the underlying data, including the interactive web browser and flat files in a variety of formats. The REST API is also complemented by a new SPARQL interface that enables highly specific queries, as well as federated queries over multiple resources <REF-4> . However, the query language is more complex.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_93",
            "content": "We very much welcome feedback and questions from the community. We also highly appreciate contributions to the code in the form of pull requests. Our preferred channel for support is the BioStar website <REF-33> , where we monitor all posts with keyword \u201coma\u201d.",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_94",
            "content": "Software availability",
            "ntype": "title",
            "meta": {
                "section": "5",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_95",
            "content": "Please note that this manuscript uses version 2.0 of the OmaDB R package, which is in the development version of Bioconductor (v.3.9). Until the release of Bioconductor v.3.9 in Spring 2019, there are two possible ways of installing it:",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_96",
            "content": "- 1) Install the development version of R (v.3.6) \u2014 required for Bioconductor v.3.9 \u2014 and install OmaDB using the command: BiocManager::install( 'OmaDB' , version = 'devel' ) \u2013or\u2013\n- 2) Install OmaDB 2.0 directly from the github repo using the devtools R package: install.packages( 'devtools' ) library (devtools) install_github( 'dessimozlab/omadb' )",
            "ntype": "list",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_97",
            "content": "REST API available from: https://omabrowser.org/api",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_98",
            "content": "Documentation available from: https://omabrowser.org/api/docs",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_99",
            "content": "R OmaDB package available from: http://bioconductor.org/packages/OmaDB/",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_100",
            "content": "Source code available from: https://github.com/DessimozLab/OmaDB/",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_101",
            "content": "Archived source code as at time of publication: http://doi.org/10.5281/zenodo.2530253 <REF-34>",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_102",
            "content": "License: GPL-2",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_103",
            "content": "omadb Python package available from: https://pypi.org/project/omadb/",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_104",
            "content": "Source code available from: https://github.com/DessimozLab/pyomadb/",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_105",
            "content": "Archived source code as at time of publication: http://doi.org/10.5281/zenodo.2530250 <REF-35>",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_106",
            "content": "License: LGPL-3",
            "ntype": "p",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_107",
            "content": "<REF-1> Fitch WM : Distinguishing homologous from analogous proteins. Syst Zool. 1970 ; 19 ( 2 ): 99 \u2013 113 . 5449325 10.2307/2412448",
            "ntype": "ref",
            "meta": {
                "id": "ref-1",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_108",
            "content": "<REF-2> Sonnhammer EL Gabald\u00f3n T Sousa da Silva AW : Big data and other challenges in the quest for orthologs. Bioinformatics. 2014 ; 30 ( 21 ): 2993 \u2013 8 . 25064571 10.1093/bioinformatics/btu492 4201156",
            "ntype": "ref",
            "meta": {
                "id": "ref-2",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_109",
            "content": "<REF-3> Forslund K Pereira C Capella-Gutierrez S : Gearing up to handle the mosaic nature of life in the quest for orthologs. Bioinformatics. 2017 . 28968857 10.1093/bioinformatics/btx542 5860199",
            "ntype": "ref",
            "meta": {
                "id": "ref-3",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_110",
            "content": "<REF-4> Altenhoff AM Glover NM Train CM : The OMA orthology database in 2018: retrieving evolutionary relationships among all domains of life through richer web and programmatic interfaces. Nucleic Acids Res. 2018 ; 46 ( D1 ): D477 \u2013 85 . 29106550 10.1093/nar/gkx1019 5753216",
            "ntype": "ref",
            "meta": {
                "id": "ref-4",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_111",
            "content": "<REF-5> Schmitt T Messina DN Schreiber F : Letter to the editor: SeqXML and OrthoXML: standards for sequence and orthology information. Brief Bioinform. 2011 ; 12 ( 5 ): 485 \u2013 8 . 21666252 10.1093/bib/bbr025",
            "ntype": "ref",
            "meta": {
                "id": "ref-5",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_112",
            "content": "<REF-6> Han MV Zmasek CM : phyloXML: XML for evolutionary biology and comparative genomics. BMC Bioinformatics. 2009 ; 10 : 356 . 19860910 10.1186/1471-2105-10-356 2774328",
            "ntype": "ref",
            "meta": {
                "id": "ref-6",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_113",
            "content": "<REF-7> Huber W Carey VJ Gentleman R : Orchestrating high-throughput genomic analysis with Bioconductor. Nat Methods. 2015 ; 12 ( 2 ): 115 \u2013 21 . 25633503 10.1038/nmeth.3252 4509590",
            "ntype": "ref",
            "meta": {
                "id": "ref-7",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_114",
            "content": "<REF-8> Django Software Foundation . Django. [cited 2018]. Reference Source",
            "ntype": "ref",
            "meta": {
                "id": "ref-8",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_115",
            "content": "<REF-9> Folk M Heber G Koziol Q : An overview of the HDF5 technology suite and its applications. Proceedings of the EDBT. 2011 . 10.1145/1966895.1966900",
            "ntype": "ref",
            "meta": {
                "id": "ref-9",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_116",
            "content": "<REF-10> Altenhoff AM Gil M Gonnet GH : Inferring hierarchical orthologous groups from orthologous gene pairs. PLoS One. 2013 ; 8 ( 1 ): e53786 . 23342000 10.1371/journal.pone.0053786 3544860",
            "ntype": "ref",
            "meta": {
                "id": "ref-10",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_117",
            "content": "<REF-11> Alexa A Rahnenfuhrer J : topGO: Enrichment analysis for Gene Ontology. R package version 2.28.0. Bioconductor . 2016 .",
            "ntype": "ref",
            "meta": {
                "id": "ref-11",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_118",
            "content": "<REF-12> Pag\u00e8s H Aboyoun P Gentleman R : Biostrings: Efficient manipulation of biological strings . R Package Version. 2017 ; 2 ( 0 ). Reference Source",
            "ntype": "ref",
            "meta": {
                "id": "ref-12",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_119",
            "content": "<REF-13> Yu G Smith DK Zhu H : ggtree: an r package for visualization and annotation of phylogenetic trees with their covariates and other associated data. McInerny G editor. Methods Ecol Evol. 2017 ; 8 ( 1 ): 28 \u2013 36 . 10.1111/2041-210X.12628",
            "ntype": "ref",
            "meta": {
                "id": "ref-13",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_120",
            "content": "<REF-14> Lawrence M Huber W Pag\u00e8s H : Software for computing and annotating genomic ranges. PLoS Comput Biol. 2013 ; 9 ( 8 ): e1003118 . 23950696 10.1371/journal.pcbi.1003118 3738458",
            "ntype": "ref",
            "meta": {
                "id": "ref-14",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_121",
            "content": "<REF-15> McKinney W : pandas: a foundational Python library for data analysis and statistics. Python for High Performance and Scientific Computing. 2011 ; 1 \u2013 9 . Reference Source",
            "ntype": "ref",
            "meta": {
                "id": "ref-15",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_122",
            "content": "<REF-16> Train C-M, Pignatelli M Altenhoff A : iHam & pyHam: visualizing and processing hierarchical orthologous groups. Bioinformatics. 2018 . 30508066 10.1093/bioinformatics/bty994",
            "ntype": "ref",
            "meta": {
                "id": "ref-16",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_123",
            "content": "<REF-17> Sukumaran J Holder MT : DendroPy: a Python library for phylogenetic computing. Bioinformatics. 2010 ; 26 ( 12 ): 1569 \u2013 71 . 20421198 10.1093/bioinformatics/btq228",
            "ntype": "ref",
            "meta": {
                "id": "ref-17",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_124",
            "content": "<REF-18> Huerta-Cepas J Serra F Bork P : ETE 3: Reconstruction, Analysis, and Visualization of Phylogenomic Data. Mol Biol Evol. 2016 ; 33 ( 6 ): 1635 \u2013 8 . 26921390 10.1093/molbev/msw046 4868116",
            "ntype": "ref",
            "meta": {
                "id": "ref-18",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_125",
            "content": "<REF-19> Klopfenstein DV Zhang L Pedersen BS : GOATOOLS: A Python library for Gene Ontology analyses. Sci Rep. 2018 ; 8 ( 1 ): 10872 . 30022098 10.1038/s41598-018-28948-z 6052049",
            "ntype": "ref",
            "meta": {
                "id": "ref-19",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_126",
            "content": "<REF-20> Kluyver T Ragan-Kelley B P\u00e9rez F : Jupyter Notebooks-a publishing format for reproducible computational workflows. In: ELPUB . 2016 ; 87 \u2013 90 . 10.3233/978-1-61499-649-1-87",
            "ntype": "ref",
            "meta": {
                "id": "ref-20",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_127",
            "content": "<REF-21> Wickham H : httr: Tools for Working with URLs and HTTP . 2018 . Reference Source",
            "ntype": "ref",
            "meta": {
                "id": "ref-21",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_128",
            "content": "<REF-22> Lambert LA Perri H Meehan TJ : Evolution of duplications in the transferrin family of proteins. Comp Biochem Physiol B Biochem Mol Biol. 2005 ; 140 ( 1 ): 11 \u2013 25 . 15621505 10.1016/j.cbpc.2004.09.012",
            "ntype": "ref",
            "meta": {
                "id": "ref-22",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_129",
            "content": "<REF-23> Ashburner M Ball CA Blake JA : Gene ontology: tool for the unification of biology. The Gene Ontology Consortium. Nat Genet. 2000 ; 25 ( 1 ): 25 \u2013 9 . 10802651 10.1038/75556 3037419",
            "ntype": "ref",
            "meta": {
                "id": "ref-23",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_130",
            "content": "<REF-24> Gaudet P Dessimoz C : Gene Ontology: Pitfalls, Biases, and Remedies. Methods Mol Biol. In: Dessimoz C, \u0160kunca N, editors. The Gene Ontology Handbook . New York, NY: Springer New York; 2017 ; 189 \u2013 205 . 27812944 10.1007/978-1-4939-3743-1_14",
            "ntype": "ref",
            "meta": {
                "id": "ref-24",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_131",
            "content": "<REF-25> Naot D Grey A Reid IR : Lactoferrin--a novel bone growth factor. Clin Med Res. 2005 ; 3 ( 2 ): 93 \u2013 101 . 16012127 10.3121/cmr.3.2.93 1183439",
            "ntype": "ref",
            "meta": {
                "id": "ref-25",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_132",
            "content": "<REF-26> Orsi N : The antimicrobial activity of lactoferrin: current status and perspectives. Biometals. 2004 ; 17 ( 3 ): 189 \u2013 96 . 15222464 10.1023/B:BIOM.0000027691.86757.e2",
            "ntype": "ref",
            "meta": {
                "id": "ref-26",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_133",
            "content": "<REF-27> Dayhoff MO Schwartz RM Orcutt BC : A model of evolutionary change in proteins. In: Atlas of Protein Sequence and Structure . 1978 ; 345 \u2013 52 . Reference Source",
            "ntype": "ref",
            "meta": {
                "id": "ref-27",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_134",
            "content": "<REF-28> Easteal S : Generation time and the rate of molecular evolution. Mol Biol Evol. 1985 ; 2 ( 5 ): 450 \u2013 3 . 3870871 10.1093/oxfordjournals.molbev.a040361",
            "ntype": "ref",
            "meta": {
                "id": "ref-28",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_135",
            "content": "<REF-29> Huntley RP Sawford T Mutowo-Meullenet P : The GOA database: gene Ontology annotation updates for 2015. Nucleic Acids Res. 2015 ; 43 ( Database issue ): D1057 \u2013 63 . 25378336 10.1093/nar/gku1113 4383930",
            "ntype": "ref",
            "meta": {
                "id": "ref-29",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_136",
            "content": "<REF-30> Komljenovic A Roux J Wollbrett J : BgeeDB, an R package for retrieval of curated expression datasets and for gene list expression localization enrichment tests [version 2; referees: 2 approved, 1 approved with reservations]. F1000Res. 2016 ; 5 : 2748 . 30467516 10.12688/f1000research.9973.2 6113886",
            "ntype": "ref",
            "meta": {
                "id": "ref-30",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_137",
            "content": "<REF-31> Bastian F Parmentier G Roux J : Bgee: Integrating and Comparing Heterogeneous Transcriptome Data Among Species. In: Data Integration in the Life Sciences . (Lecture Notes in Computer Science). Springer Berlin Heidelberg. 2008 ; 124 \u2013 31 . 10.1007/978-3-540-69828-9_12",
            "ntype": "ref",
            "meta": {
                "id": "ref-31",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_138",
            "content": "<REF-32> Cock PJ Antao T Chang JT : Biopython: freely available Python tools for computational molecular biology and bioinformatics. Bioinformatics. 2009 ; 25 ( 11 ): 1422 \u2013 3 . 19304878 10.1093/bioinformatics/btp163 2682512",
            "ntype": "ref",
            "meta": {
                "id": "ref-32",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_139",
            "content": "<REF-33> Parnell LD Lindenbaum P Shameer K : BioStar: an online question & answer resource for the bioinformatics community. PLoS Comput Biol. 2011 ; 7 ( 10 ): e1002216 . 22046109 10.1371/journal.pcbi.1002216 3203049",
            "ntype": "ref",
            "meta": {
                "id": "ref-33",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_140",
            "content": "<REF-34> klarakaleb Altenhoff A bioc-gitadmin : DessimozLab/OmaDB: v1.99.1 (Version 1.99.1). Zenodo. 2019 . http://www.doi.org/10.5281/zenodo.2530253",
            "ntype": "ref",
            "meta": {
                "id": "ref-34",
                "created_by": "F1000XMLParser"
            }
        },
        {
            "ix": "8-42_v1_141",
            "content": "<REF-35> Alex WV Altenhoff A : DessimozLab/pyomadb: v2.0.0 (Version 2.0.0). Zenodo. 2019 . http://www.doi.org/10.5281/zenodo.2530250",
            "ntype": "ref",
            "meta": {
                "id": "ref-35",
                "created_by": "F1000XMLParser"
            }
        }
    ],
    "span_nodes": [
        {
            "ix": "8-42_v1_0@0",
            "content": "Expanding the Orthologous Matrix (OMA) programmatic interfaces: REST API and the OmaDB packages for R and Python",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_0",
            "start": 0,
            "end": 111,
            "label": {}
        },
        {
            "ix": "8-42_v1_1@0",
            "content": "Abstract",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_1",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "8-42_v1_2@0",
            "content": "The Orthologous Matrix (OMA) is a well-established resource to identify orthologs among many genomes.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_2",
            "start": 0,
            "end": 100,
            "label": {}
        },
        {
            "ix": "8-42_v1_2@1",
            "content": "Here, we present two recent additions to its programmatic interface, namely a REST API, and user-friendly R and Python packages called OmaDB .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_2",
            "start": 102,
            "end": 243,
            "label": {}
        },
        {
            "ix": "8-42_v1_2@2",
            "content": "These should further facilitate the incorporation of OMA data into computational scripts and pipelines.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_2",
            "start": 245,
            "end": 347,
            "label": {}
        },
        {
            "ix": "8-42_v1_2@3",
            "content": "The REST API can be freely accessed at https://omabrowser.org/api .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_2",
            "start": 349,
            "end": 415,
            "label": {}
        },
        {
            "ix": "8-42_v1_2@4",
            "content": "The R OmaDB package is available as part of Bioconductor at http://bioconductor.org/packages/OmaDB/ , and the omadb Python package is available from the Python Package Index (PyPI) at https://pypi.org/project/omadb/ .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_2",
            "start": 417,
            "end": 633,
            "label": {}
        },
        {
            "ix": "8-42_v1_3@0",
            "content": "Introduction",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_3",
            "start": 0,
            "end": 11,
            "label": {}
        },
        {
            "ix": "8-42_v1_4@0",
            "content": "Orthologs are pairs of protein coding genes that have common ancestry and have diverged due to speciation events <REF-1> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_4",
            "start": 0,
            "end": 121,
            "label": {}
        },
        {
            "ix": "8-42_v1_4@1",
            "content": "The detection of orthologs is of fundamental importance in many fields in biology, such as comparative genomics, as it allows us to propagate existing biological knowledge to ever growing newly sequenced data <REF-2> , <REF-3> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_4",
            "start": 123,
            "end": 350,
            "label": {}
        },
        {
            "ix": "8-42_v1_5@0",
            "content": "The Orthologous Matrix (OMA) is a method and resource for the inference of orthologs among complete genomes <REF-4> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_5",
            "start": 0,
            "end": 116,
            "label": {}
        },
        {
            "ix": "8-42_v1_5@1",
            "content": "The OMA database ( https://omabrowser.org ) features broad scope and size with currently over 2,100 species from all three domains of life.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_5",
            "start": 118,
            "end": 256,
            "label": {}
        },
        {
            "ix": "8-42_v1_6@0",
            "content": "The OMA browser has supported multiple ways of exporting the underlying data from its beginning.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_6",
            "start": 0,
            "end": 95,
            "label": {}
        },
        {
            "ix": "8-42_v1_6@1",
            "content": "Users can download data either via bulk archives or interactively through the browser\u2014using where possible standard file formats, such as FASTA, OrthoXML <REF-5> , or PhyloXML <REF-6> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_6",
            "start": 97,
            "end": 281,
            "label": {}
        },
        {
            "ix": "8-42_v1_6@2",
            "content": "For programmatic access, early OMA database releases offered an Application Programming Interface (API) in the form of the Simple Object Access Protocol (SOAP).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_6",
            "start": 283,
            "end": 442,
            "label": {}
        },
        {
            "ix": "8-42_v1_6@3",
            "content": "However, the complexity and limited adoption of SOAP has prompted us to recently switch to the simpler, faster, and more widely used Representational State Transfer (REST) protocol for the OMA API <REF-4> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_6",
            "start": 444,
            "end": 649,
            "label": {}
        },
        {
            "ix": "8-42_v1_6@4",
            "content": "Here, we provide a description of this new OMA REST API.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_6",
            "start": 651,
            "end": 706,
            "label": {}
        },
        {
            "ix": "8-42_v1_7@0",
            "content": "Furthermore, the R environment is widely used in bioinformatics due to its flexibility as a high-level scripting language, statistical capabilities, and numerous bioinformatics libraries.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_7",
            "start": 0,
            "end": 186,
            "label": {}
        },
        {
            "ix": "8-42_v1_7@1",
            "content": "In particular, the Bioconductor open source framework contains over 2,000 packages to facilitate either access to or manipulation of biological data <REF-7> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_7",
            "start": 188,
            "end": 345,
            "label": {}
        },
        {
            "ix": "8-42_v1_7@2",
            "content": "This motivated us to develop the OmaDB Bioconductor package which provides a more idiomatic and user-friendly access to OMA data in R implemented on top of the REST API.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_7",
            "start": 347,
            "end": 515,
            "label": {}
        },
        {
            "ix": "8-42_v1_8@0",
            "content": "Finally, to also enable Python users to easily interact with the database, we have developed a similar package in that language, compliant with the conventions and with support of typical complementary Python packages as outlined below.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_8",
            "start": 0,
            "end": 235,
            "label": {}
        },
        {
            "ix": "8-42_v1_9@0",
            "content": "Methods",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_9",
            "start": 0,
            "end": 6,
            "label": {}
        },
        {
            "ix": "8-42_v1_10@0",
            "content": "We start by describing the OMA REST API, before moving on to detail the OmaDB Bioconductor package, and finally outline the omadb Python package.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_10",
            "start": 0,
            "end": 144,
            "label": {}
        },
        {
            "ix": "8-42_v1_11@0",
            "content": "OMA REST API",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_11",
            "start": 0,
            "end": 11,
            "label": {}
        },
        {
            "ix": "8-42_v1_12@0",
            "content": "The REST framework is an API architectural style that is based on URLs and HTTP protocol methods.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_12",
            "start": 0,
            "end": 96,
            "label": {}
        },
        {
            "ix": "8-42_v1_12@1",
            "content": "It was designed to be stateless and thus is context independent.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_12",
            "start": 98,
            "end": 161,
            "label": {}
        },
        {
            "ix": "8-42_v1_12@2",
            "content": "That is, it does not save data internally between the HTTP requests which minimises server-side application state, thus easing parallelism.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_12",
            "start": 163,
            "end": 301,
            "label": {}
        },
        {
            "ix": "8-42_v1_12@3",
            "content": "The combination of the HTTP and JSON data formats makes it particularly suitable for web applications and easily supported by most programming languages.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_12",
            "start": 303,
            "end": 455,
            "label": {}
        },
        {
            "ix": "8-42_v1_13@0",
            "content": "Since the backend of the OMA browser is almost fully based on Python and its frontend is supported by the Django web framework <REF-8> , we have opted to use the Django Rest Framework (DRF) to implement a REST API in our latest release <REF-4> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_13",
            "start": 0,
            "end": 244,
            "label": {}
        },
        {
            "ix": "8-42_v1_13@1",
            "content": "Most API calls require querying the OMA database, stored in HDF5 <REF-9> , using a custom Python library (\u201cpyoma\u201d).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_13",
            "start": 246,
            "end": 360,
            "label": {}
        },
        {
            "ix": "8-42_v1_13@2",
            "content": "The query results are serialised in the format requested by the user \u2014 typically JSON.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_13",
            "start": 362,
            "end": 447,
            "label": {}
        },
        {
            "ix": "8-42_v1_14@0",
            "content": "Most data available through the OMA browser is now also accessible via the API.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_14",
            "start": 0,
            "end": 78,
            "label": {}
        },
        {
            "ix": "8-42_v1_14@1",
            "content": "This includes individual genes and their attributes such as protein or cDNA sequences, cross-references, pairwise orthologs, hierarchical orthologous groups <REF-10> , as well as species trees and the corresponding taxonomy.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_14",
            "start": 80,
            "end": 303,
            "label": {}
        },
        {
            "ix": "8-42_v1_14@2",
            "content": "The API documentation as well as the interactive interface can be found at https://omabrowser.org/api/docs ( Figure 1 ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_14",
            "start": 305,
            "end": 424,
            "label": {}
        },
        {
            "ix": "8-42_v1_15@0",
            "content": "Figure 1.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_15",
            "start": 0,
            "end": 8,
            "label": {}
        },
        {
            "ix": "8-42_v1_17@0",
            "content": "OmaDB Bioconductor package",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_17",
            "start": 0,
            "end": 25,
            "label": {}
        },
        {
            "ix": "8-42_v1_18@0",
            "content": "To facilitate simplified access to the API and downstream analyses in the R environment, we have also developed an API wrapper package in R, now available in Bioconductor <REF-7> ( http://bioconductor.org/packages/OmaDB/ ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_18",
            "start": 0,
            "end": 222,
            "label": {}
        },
        {
            "ix": "8-42_v1_18@1",
            "content": "This allowed for abstraction of the server interface, eliminating the need to know structure of the database or the URL endpoints to access the required data.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_18",
            "start": 224,
            "end": 381,
            "label": {}
        },
        {
            "ix": "8-42_v1_19@0",
            "content": "The package consists of a collection of functions that import OMA data into R friendly objects, namely S3 objects and data frames\u2014depending on the query supplied. Due to the volume of the data available, some selected object attributes are at first given as URL endpoints.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_19",
            "start": 0,
            "end": 271,
            "label": {}
        },
        {
            "ix": "8-42_v1_19@1",
            "content": "However, these are automatically loaded upon accession.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_19",
            "start": 273,
            "end": 327,
            "label": {}
        },
        {
            "ix": "8-42_v1_19@2",
            "content": "OmaDB also facilitates further downstream analyses with other Bioconductor packages, such as GO enrichment analysis with topGO <REF-11> , sequence analysis with BioStrings <REF-12> , phylogenetic analyses using ggtree <REF-13> or gene locus analyses with the help of GenomicRanges <REF-14> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_19",
            "start": 329,
            "end": 619,
            "label": {}
        },
        {
            "ix": "8-42_v1_20@0",
            "content": "The open source code is hosted at https://github.com/DessimozLab/OmaDB/ .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_20",
            "start": 0,
            "end": 72,
            "label": {}
        },
        {
            "ix": "8-42_v1_20@1",
            "content": "The package requires R version >= 3.6 and Bioconductor version >= 3.9, as well as a stable internet connection.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_20",
            "start": 74,
            "end": 184,
            "label": {}
        },
        {
            "ix": "8-42_v1_21@0",
            "content": "Package Installation",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_21",
            "start": 0,
            "end": 19,
            "label": {}
        },
        {
            "ix": "8-42_v1_23@0",
            "content": "omadb Python package",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_23",
            "start": 0,
            "end": 19,
            "label": {}
        },
        {
            "ix": "8-42_v1_24@0",
            "content": "For Python users, we provide an analogous package also named omadb .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_24",
            "start": 0,
            "end": 67,
            "label": {}
        },
        {
            "ix": "8-42_v1_24@1",
            "content": "Results are supplied to users as a hybrid attribute-dictionary object.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_24",
            "start": 69,
            "end": 138,
            "label": {}
        },
        {
            "ix": "8-42_v1_24@2",
            "content": "As such, both attribute and key-based access is possible.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_24",
            "start": 140,
            "end": 196,
            "label": {}
        },
        {
            "ix": "8-42_v1_24@3",
            "content": "Where the URL of a further API call is listed in a response, this has been designed to be automatically requested for the user.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_24",
            "start": 198,
            "end": 324,
            "label": {}
        },
        {
            "ix": "8-42_v1_25@0",
            "content": "For data that can be represented as a table, the pandas package <REF-15> is supported.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_25",
            "start": 0,
            "end": 85,
            "label": {}
        },
        {
            "ix": "8-42_v1_25@1",
            "content": "HOGs can be analysed or displayed using the pyham library <REF-16> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_25",
            "start": 87,
            "end": 154,
            "label": {}
        },
        {
            "ix": "8-42_v1_25@2",
            "content": "Trees are retrievable as DendroPy <REF-17> or ETE3 <REF-18> Tree objects.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_25",
            "start": 156,
            "end": 228,
            "label": {}
        },
        {
            "ix": "8-42_v1_25@3",
            "content": "Gene Ontology enrichment analyses are possible through the use of the goatools package <REF-19> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_25",
            "start": 230,
            "end": 326,
            "label": {}
        },
        {
            "ix": "8-42_v1_26@0",
            "content": "The open source code is hosted at https://github.com/DessimozLab/pyomadb/ .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_26",
            "start": 0,
            "end": 74,
            "label": {}
        },
        {
            "ix": "8-42_v1_26@1",
            "content": "The package requires Python >=3.6, as well as a stable internet connection.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_26",
            "start": 76,
            "end": 150,
            "label": {}
        },
        {
            "ix": "8-42_v1_26@2",
            "content": "It is also available to download from PyPI, installable using pip.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_26",
            "start": 152,
            "end": 217,
            "label": {}
        },
        {
            "ix": "8-42_v1_27@0",
            "content": "Package Installation",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_27",
            "start": 0,
            "end": 19,
            "label": {}
        },
        {
            "ix": "8-42_v1_29@0",
            "content": "Results",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_29",
            "start": 0,
            "end": 6,
            "label": {}
        },
        {
            "ix": "8-42_v1_30@0",
            "content": "We provide six illustrative examples in R. The first shows a direct call to the REST API, while the other five showcase the OmaDB R library.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_30",
            "start": 0,
            "end": 139,
            "label": {}
        },
        {
            "ix": "8-42_v1_30@1",
            "content": "These examples are also available as a Jupyter notebook <REF-20> as part of the OmaDB R code repository.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_30",
            "start": 141,
            "end": 244,
            "label": {}
        },
        {
            "ix": "8-42_v1_30@2",
            "content": "We have also provided analogous examples in Python, also in the form of a Jupyter notebook, included in its code repository\u2014with the exception of Example 6, which uses a package only available in R.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_30",
            "start": 246,
            "end": 443,
            "label": {}
        },
        {
            "ix": "8-42_v1_31@0",
            "content": "Example 1 - Simply accessing the API, in R, via URLs",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_31",
            "start": 0,
            "end": 51,
            "label": {}
        },
        {
            "ix": "8-42_v1_32@0",
            "content": "One way to access the API is to directly send a request using httr <REF-21> in R. This approach requires the user to know the URL of the API endpoint, as well as the URL of the API function of interest.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_32",
            "start": 0,
            "end": 201,
            "label": {}
        },
        {
            "ix": "8-42_v1_32@1",
            "content": "Some additional processing steps of the resultant response is usually needed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_32",
            "start": 203,
            "end": 279,
            "label": {}
        },
        {
            "ix": "8-42_v1_32@2",
            "content": "A simple example to retrieve information on the P53_RAT protein is provided below.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_32",
            "start": 281,
            "end": 362,
            "label": {}
        },
        {
            "ix": "8-42_v1_34@0",
            "content": "Example 2 - Using a sequence to find its gene family (Hierarchical Orthologous Group) and function via gene ontologies",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_34",
            "start": 0,
            "end": 117,
            "label": {}
        },
        {
            "ix": "8-42_v1_35@0",
            "content": "Below is a simple workflow using the OmaDB package to annotate a given protein sequence, using the mapSequence() function.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_35",
            "start": 0,
            "end": 121,
            "label": {}
        },
        {
            "ix": "8-42_v1_37@0",
            "content": "In this example, the sequence mapping identified one target sequence.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_37",
            "start": 0,
            "end": 68,
            "label": {}
        },
        {
            "ix": "8-42_v1_37@1",
            "content": "From the seq_annotation object further information can be obtained as follows:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_37",
            "start": 70,
            "end": 147,
            "label": {}
        },
        {
            "ix": "8-42_v1_39@0",
            "content": "Thus, our sequence is human lactotransferrin (also known as lactoferrin).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_39",
            "start": 0,
            "end": 72,
            "label": {}
        },
        {
            "ix": "8-42_v1_39@1",
            "content": "Lactotransferrin is one of four subfamilies of transferrins in mammals <REF-22> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_39",
            "start": 74,
            "end": 154,
            "label": {}
        },
        {
            "ix": "8-42_v1_40@0",
            "content": "To investigate the evolutionary history of genes more precisely, we turn to Hierarchical Orthologous Groups (HOGs)\u2014sets of genes which have descended from a single common ancestral gene within a taxonomic range of interest <REF-10> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_40",
            "start": 0,
            "end": 232,
            "label": {}
        },
        {
            "ix": "8-42_v1_40@1",
            "content": "For an introduction to HOGs, we refer the interested reader to the following short video: https://youtu.be/5p5x5gxzhZA .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_40",
            "start": 234,
            "end": 353,
            "label": {}
        },
        {
            "ix": "8-42_v1_41@0",
            "content": "By knowing the ID of the HOG to which our sequence belongs, we can obtain a list of all the HOG members (i.e. all genes in the HOG), as follows:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_41",
            "start": 0,
            "end": 143,
            "label": {}
        },
        {
            "ix": "8-42_v1_43@0",
            "content": "Note that it is also possible to access information on a HOG using the ID of one of its members.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_43",
            "start": 0,
            "end": 95,
            "label": {}
        },
        {
            "ix": "8-42_v1_43@1",
            "content": "Therefore the below will produce the same output.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_43",
            "start": 97,
            "end": 145,
            "label": {}
        },
        {
            "ix": "8-42_v1_45@0",
            "content": "We can easily retrieve the Gene Ontology (GO) terms <REF-23> that are associated to each of the members using OmaDB.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_45",
            "start": 0,
            "end": 115,
            "label": {}
        },
        {
            "ix": "8-42_v1_47@0",
            "content": "The resultant list of GO terms per gene is in the \u201cgeneID2GO\u201d format by default, which is used by the topGO <REF-11> package.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_47",
            "start": 0,
            "end": 124,
            "label": {}
        },
        {
            "ix": "8-42_v1_48@0",
            "content": "To compare the function of lactotransferrins with their paralogous counterparts, we can retrieve a background set consisting of all members of the transferring HOG defined at the root of the eukaryotes",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_48",
            "start": 0,
            "end": 200,
            "label": {}
        },
        {
            "ix": "8-42_v1_50@0",
            "content": "We can now construct a topGO object using the getTopGO function as seen below.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_50",
            "start": 0,
            "end": 77,
            "label": {}
        },
        {
            "ix": "8-42_v1_50@1",
            "content": "Note that the background set of terms is set by getTopGO to all terms appearing in the list of annotations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_50",
            "start": 79,
            "end": 185,
            "label": {}
        },
        {
            "ix": "8-42_v1_50@2",
            "content": "This may not be appropriate in all cases\u2014the choice of background set requires careful consideration <REF-24> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_50",
            "start": 187,
            "end": 297,
            "label": {}
        },
        {
            "ix": "8-42_v1_52@0",
            "content": "As the output in Table 1 indicates, several enriched terms in the mammalian lactotransferrin are related to bone formation, consistent with previous reports in the literature (e.g. <REF-25> ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_52",
            "start": 0,
            "end": 191,
            "label": {}
        },
        {
            "ix": "8-42_v1_52@1",
            "content": "So is the role of lactotransferrin in antimicrobial activity (e.g. <REF-26> ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_52",
            "start": 193,
            "end": 270,
            "label": {}
        },
        {
            "ix": "8-42_v1_53@0",
            "content": "Table 1.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_53",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "8-42_v1_55@0",
            "content": "Example 3 - Taxonomic tree visualisation",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_55",
            "start": 0,
            "end": 39,
            "label": {}
        },
        {
            "ix": "8-42_v1_56@0",
            "content": "The taxonomic data obtained using the OmaDB package can easily be plugged into ggtree <REF-13> for phylogenetic tree visualisation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_56",
            "start": 0,
            "end": 130,
            "label": {}
        },
        {
            "ix": "8-42_v1_56@1",
            "content": "First, the tree is obtained using the getTaxonomy() function.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_56",
            "start": 132,
            "end": 192,
            "label": {}
        },
        {
            "ix": "8-42_v1_56@2",
            "content": "In this example, the tree is rooted at the Hominoidea taxonomic level.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_56",
            "start": 194,
            "end": 263,
            "label": {}
        },
        {
            "ix": "8-42_v1_56@3",
            "content": "The default format of the object returned is newick.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_56",
            "start": 265,
            "end": 316,
            "label": {}
        },
        {
            "ix": "8-42_v1_58@0",
            "content": "The resultant object can directly be used to build a phylogenetic tree using the ggtree package as below:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_58",
            "start": 0,
            "end": 104,
            "label": {}
        },
        {
            "ix": "8-42_v1_60@0",
            "content": "The tree can be further annotated using species silhouettes from PhyloPic ( http://phylopic.org/ ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_60",
            "start": 0,
            "end": 98,
            "label": {}
        },
        {
            "ix": "8-42_v1_60@1",
            "content": "This functionality is already enabled within the ggtree package and just requires obtaining the relevant image codes.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_60",
            "start": 100,
            "end": 216,
            "label": {}
        },
        {
            "ix": "8-42_v1_60@2",
            "content": "The workflow to produce Figure 2 is below.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_60",
            "start": 218,
            "end": 259,
            "label": {}
        },
        {
            "ix": "8-42_v1_63@0",
            "content": "Figure 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_63",
            "start": 0,
            "end": 8,
            "label": {}
        },
        {
            "ix": "8-42_v1_65@0",
            "content": "Example 4 - Visualising the distribution of PAM distances in the taxonomic space",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_65",
            "start": 0,
            "end": 79,
            "label": {}
        },
        {
            "ix": "8-42_v1_66@0",
            "content": "To obtain all orthologous pairs between two genomes, we can use the getGenomePairs() function.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_66",
            "start": 0,
            "end": 93,
            "label": {}
        },
        {
            "ix": "8-42_v1_66@1",
            "content": "To limit server load, the resultant response is paginated and by default only returns the first page, capped at 100 entries.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_66",
            "start": 95,
            "end": 218,
            "label": {}
        },
        {
            "ix": "8-42_v1_66@2",
            "content": "This is easily adjustable by setting the \u2018per_page\u2019 parameter to either the number of orthologs required or simply to \u2018all\u2019.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_66",
            "start": 220,
            "end": 343,
            "label": {}
        },
        {
            "ix": "8-42_v1_67@0",
            "content": "In this example, we compare the distribution of PAM distances (Point accepted mutations; <REF-27> ) between orthologs of two species-pairs, namely human-dog and human-mouse.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_67",
            "start": 0,
            "end": 172,
            "label": {}
        },
        {
            "ix": "8-42_v1_67@1",
            "content": "First, we request the required data:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_67",
            "start": 174,
            "end": 209,
            "label": {}
        },
        {
            "ix": "8-42_v1_69@0",
            "content": "We can then bind the two resultant data frames and plot the results ( Figure 3 ), as so:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_69",
            "start": 0,
            "end": 87,
            "label": {}
        },
        {
            "ix": "8-42_v1_71@0",
            "content": "Figure 3.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_71",
            "start": 0,
            "end": 8,
            "label": {}
        },
        {
            "ix": "8-42_v1_73@0",
            "content": "The two-sample Kolmogorov-Smirnov test can be performed on the two distributions, using the command:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_73",
            "start": 0,
            "end": 99,
            "label": {}
        },
        {
            "ix": "8-42_v1_75@0",
            "content": "This returns p-value < 2.2e-16.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_75",
            "start": 0,
            "end": 30,
            "label": {}
        },
        {
            "ix": "8-42_v1_75@1",
            "content": "The median distance between dog and human is shorter than that of mouse and human (8.8 vs. 11.8).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_75",
            "start": 32,
            "end": 128,
            "label": {}
        },
        {
            "ix": "8-42_v1_75@2",
            "content": "This is consistent with previous observations that the rodent has a longer branch than humans and carnivores, in part due to their shorter generation time <REF-28> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_75",
            "start": 130,
            "end": 294,
            "label": {}
        },
        {
            "ix": "8-42_v1_76@0",
            "content": "Example 5 - Annotating protein sequences not present in OMA",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_76",
            "start": 0,
            "end": 58,
            "label": {}
        },
        {
            "ix": "8-42_v1_77@0",
            "content": "Although the OMA database currently analyses over 2,100 genomes, many more have been sequenced, and the gap keeps on widening.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_77",
            "start": 0,
            "end": 125,
            "label": {}
        },
        {
            "ix": "8-42_v1_77@1",
            "content": "It is nevertheless possible to use OMA to infer the function of custom protein sequences through a fast approximate search against all sequences in OMA <REF-4> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_77",
            "start": 127,
            "end": 287,
            "label": {}
        },
        {
            "ix": "8-42_v1_79@0",
            "content": "This results in 54 GO annotations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_79",
            "start": 0,
            "end": 33,
            "label": {}
        },
        {
            "ix": "8-42_v1_79@1",
            "content": "By comparison, this sequence has merely 15 GO annotations in UniProt-GOA <REF-29> \u2014 all of which are also predicted by this method in OMA.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_79",
            "start": 35,
            "end": 172,
            "label": {}
        },
        {
            "ix": "8-42_v1_80@0",
            "content": "Example 6 - Combining OmaDB with BgeeDB for gene expression",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_80",
            "start": 0,
            "end": 58,
            "label": {}
        },
        {
            "ix": "8-42_v1_81@0",
            "content": "We go back to the lactotransferrin gene family from Example 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_81",
            "start": 0,
            "end": 61,
            "label": {}
        },
        {
            "ix": "8-42_v1_81@1",
            "content": "We can use OmaDB in conjunction with the BgeeDB Bioconductor package <REF-30> to retrieve expression data from the Bgee database <REF-31> as follows.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_81",
            "start": 63,
            "end": 211,
            "label": {}
        },
        {
            "ix": "8-42_v1_83@0",
            "content": "Among the tissues in which lactotransferrin is expressed according to Bgee ( Table 2 ), we note the bone marrow and the palpebral conjunctiva (the eyelid inner surface).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_83",
            "start": 0,
            "end": 168,
            "label": {}
        },
        {
            "ix": "8-42_v1_83@1",
            "content": "This is consistent with the aforementioned involvement of lactotransferrin in bone formation and anti-microbial activity.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_83",
            "start": 170,
            "end": 290,
            "label": {}
        },
        {
            "ix": "8-42_v1_84@0",
            "content": "Table 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_84",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "8-42_v1_86@0",
            "content": "Further tutorials on the OmaDB package can be found in the accompanying vignettes:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_86",
            "start": 0,
            "end": 81,
            "label": {}
        },
        {
            "ix": "8-42_v1_88@0",
            "content": "Discussion and outlook",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_88",
            "start": 0,
            "end": 21,
            "label": {}
        },
        {
            "ix": "8-42_v1_89@0",
            "content": "Orthology is used for various purposes, such as species tree inference, gene evolution dynamic, or protein function prediction.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_89",
            "start": 0,
            "end": 126,
            "label": {}
        },
        {
            "ix": "8-42_v1_89@1",
            "content": "The retrieval of orthologs is thus typically just the starting point of a larger analysis.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_89",
            "start": 128,
            "end": 217,
            "label": {}
        },
        {
            "ix": "8-42_v1_89@2",
            "content": "Therefore, this overhaul and expansion of the OMA programmatic interface will facilitate the incorporation of OMA data in such larger analyses.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_89",
            "start": 219,
            "end": 361,
            "label": {}
        },
        {
            "ix": "8-42_v1_90@0",
            "content": "Our R package will continue to be maintained in line with the biannual Bioconductor releases.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_90",
            "start": 0,
            "end": 92,
            "label": {}
        },
        {
            "ix": "8-42_v1_90@1",
            "content": "Further work to improve the package includes improvement in performance.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_90",
            "start": 94,
            "end": 165,
            "label": {}
        },
        {
            "ix": "8-42_v1_90@2",
            "content": "For example, the responses are currently fully loaded into an R object of choice which, depending on the response size, may create some time lag in the response.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_90",
            "start": 167,
            "end": 327,
            "label": {}
        },
        {
            "ix": "8-42_v1_90@3",
            "content": "We will also continue to update the package and API to incorporate new functionalities of OMA, such as support for local synteny which is currently under development.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_90",
            "start": 329,
            "end": 494,
            "label": {}
        },
        {
            "ix": "8-42_v1_91@0",
            "content": "Likewise, we will also maintain and further develop the Python package.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_91",
            "start": 0,
            "end": 70,
            "label": {}
        },
        {
            "ix": "8-42_v1_91@1",
            "content": "In particular, we will explore the possibility of further integration with the BioPython library <REF-32> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_91",
            "start": 72,
            "end": 178,
            "label": {}
        },
        {
            "ix": "8-42_v1_92@0",
            "content": "More generally, in OMA we will keep supporting the various ways of accessing the underlying data, including the interactive web browser and flat files in a variety of formats.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_92",
            "start": 0,
            "end": 174,
            "label": {}
        },
        {
            "ix": "8-42_v1_92@1",
            "content": "The REST API is also complemented by a new SPARQL interface that enables highly specific queries, as well as federated queries over multiple resources <REF-4> .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_92",
            "start": 176,
            "end": 335,
            "label": {}
        },
        {
            "ix": "8-42_v1_92@2",
            "content": "However, the query language is more complex.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_92",
            "start": 337,
            "end": 380,
            "label": {}
        },
        {
            "ix": "8-42_v1_93@0",
            "content": "We very much welcome feedback and questions from the community.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_93",
            "start": 0,
            "end": 62,
            "label": {}
        },
        {
            "ix": "8-42_v1_93@1",
            "content": "We also highly appreciate contributions to the code in the form of pull requests.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_93",
            "start": 64,
            "end": 144,
            "label": {}
        },
        {
            "ix": "8-42_v1_93@2",
            "content": "Our preferred channel for support is the BioStar website <REF-33> , where we monitor all posts with keyword \u201coma\u201d.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_93",
            "start": 146,
            "end": 259,
            "label": {}
        },
        {
            "ix": "8-42_v1_94@0",
            "content": "Software availability",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_94",
            "start": 0,
            "end": 20,
            "label": {}
        },
        {
            "ix": "8-42_v1_95@0",
            "content": "Please note that this manuscript uses version 2.0 of the OmaDB R package, which is in the development version of Bioconductor (v.3.9).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_95",
            "start": 0,
            "end": 133,
            "label": {}
        },
        {
            "ix": "8-42_v1_95@1",
            "content": "Until the release of Bioconductor v.3.9 in Spring 2019, there are two possible ways of installing it:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_95",
            "start": 135,
            "end": 235,
            "label": {}
        },
        {
            "ix": "8-42_v1_96@0",
            "content": "- 1) Install the development version of R (v.3.6) \u2014 required for Bioconductor v.3.9 \u2014 and install OmaDB using the command: BiocManager::install( 'OmaDB' , version = 'devel' ) \u2013or\u2013",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_96",
            "start": 0,
            "end": 178,
            "label": {}
        },
        {
            "ix": "8-42_v1_96@1",
            "content": "- 2) Install OmaDB 2.0 directly from the github repo using the devtools R package: install.packages( 'devtools' ) library (devtools) install_github( 'dessimozlab/omadb' )",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_96",
            "start": 180,
            "end": 349,
            "label": {}
        },
        {
            "ix": "8-42_v1_97@0",
            "content": "REST API available from: https://omabrowser.org/api",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_97",
            "start": 0,
            "end": 50,
            "label": {}
        },
        {
            "ix": "8-42_v1_98@0",
            "content": "Documentation available from: https://omabrowser.org/api/docs",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_98",
            "start": 0,
            "end": 60,
            "label": {}
        },
        {
            "ix": "8-42_v1_99@0",
            "content": "R OmaDB package available from: http://bioconductor.org/packages/OmaDB/",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_99",
            "start": 0,
            "end": 70,
            "label": {}
        },
        {
            "ix": "8-42_v1_100@0",
            "content": "Source code available from: https://github.com/DessimozLab/OmaDB/",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_100",
            "start": 0,
            "end": 64,
            "label": {}
        },
        {
            "ix": "8-42_v1_101@0",
            "content": "Archived source code as at time of publication: http://doi.org/10.5281/zenodo.2530253 <REF-34>",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_101",
            "start": 0,
            "end": 93,
            "label": {}
        },
        {
            "ix": "8-42_v1_102@0",
            "content": "License: GPL-2",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_102",
            "start": 0,
            "end": 13,
            "label": {}
        },
        {
            "ix": "8-42_v1_103@0",
            "content": "omadb Python package available from: https://pypi.org/project/omadb/",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_103",
            "start": 0,
            "end": 67,
            "label": {}
        },
        {
            "ix": "8-42_v1_104@0",
            "content": "Source code available from: https://github.com/DessimozLab/pyomadb/",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_104",
            "start": 0,
            "end": 66,
            "label": {}
        },
        {
            "ix": "8-42_v1_105@0",
            "content": "Archived source code as at time of publication: http://doi.org/10.5281/zenodo.2530250 <REF-35>",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_105",
            "start": 0,
            "end": 93,
            "label": {}
        },
        {
            "ix": "8-42_v1_106@0",
            "content": "License: LGPL-3",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_106",
            "start": 0,
            "end": 14,
            "label": {}
        },
        {
            "ix": "8-42_v1_107@0",
            "content": "<REF-1> Fitch WM : Distinguishing homologous from analogous proteins. Syst Zool. 1970 ; 19 ( 2 ): 99 \u2013 113 . 5449325 10.2307/2412448",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_107",
            "start": 0,
            "end": 131,
            "label": {}
        },
        {
            "ix": "8-42_v1_108@0",
            "content": "<REF-2> Sonnhammer EL Gabald\u00f3n T Sousa da Silva AW : Big data and other challenges in the quest for orthologs. Bioinformatics. 2014 ; 30 ( 21 ): 2993 \u2013 8 . 25064571 10.1093/bioinformatics/btu492 4201156",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_108",
            "start": 0,
            "end": 201,
            "label": {}
        },
        {
            "ix": "8-42_v1_109@0",
            "content": "<REF-3> Forslund K Pereira C Capella-Gutierrez S : Gearing up to handle the mosaic nature of life in the quest for orthologs. Bioinformatics. 2017 . 28968857 10.1093/bioinformatics/btx542 5860199",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_109",
            "start": 0,
            "end": 194,
            "label": {}
        },
        {
            "ix": "8-42_v1_110@0",
            "content": "<REF-4> Altenhoff AM Glover NM Train CM : The OMA orthology database in 2018: retrieving evolutionary relationships among all domains of life through richer web and programmatic interfaces. Nucleic Acids Res. 2018 ; 46 ( D1 ): D477 \u2013 85 . 29106550 10.1093/nar/gkx1019 5753216",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_110",
            "start": 0,
            "end": 274,
            "label": {}
        },
        {
            "ix": "8-42_v1_111@0",
            "content": "<REF-5> Schmitt T Messina DN Schreiber F : Letter to the editor: SeqXML and OrthoXML: standards for sequence and orthology information. Brief Bioinform. 2011 ; 12 ( 5 ): 485 \u2013 8 . 21666252 10.1093/bib/bbr025",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_111",
            "start": 0,
            "end": 206,
            "label": {}
        },
        {
            "ix": "8-42_v1_112@0",
            "content": "<REF-6> Han MV Zmasek CM : phyloXML: XML for evolutionary biology and comparative genomics. BMC Bioinformatics. 2009 ; 10 : 356 . 19860910 10.1186/1471-2105-10-356 2774328",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_112",
            "start": 0,
            "end": 170,
            "label": {}
        },
        {
            "ix": "8-42_v1_113@0",
            "content": "<REF-7> Huber W Carey VJ Gentleman R : Orchestrating high-throughput genomic analysis with Bioconductor. Nat Methods. 2015 ; 12 ( 2 ): 115 \u2013 21 . 25633503 10.1038/nmeth.3252 4509590",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_113",
            "start": 0,
            "end": 180,
            "label": {}
        },
        {
            "ix": "8-42_v1_114@0",
            "content": "<REF-8> Django Software Foundation . Django. [cited 2018]. Reference Source",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_114",
            "start": 0,
            "end": 74,
            "label": {}
        },
        {
            "ix": "8-42_v1_115@0",
            "content": "<REF-9> Folk M Heber G Koziol Q : An overview of the HDF5 technology suite and its applications. Proceedings of the EDBT. 2011 . 10.1145/1966895.1966900",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_115",
            "start": 0,
            "end": 151,
            "label": {}
        },
        {
            "ix": "8-42_v1_116@0",
            "content": "<REF-10> Altenhoff AM Gil M Gonnet GH : Inferring hierarchical orthologous groups from orthologous gene pairs. PLoS One. 2013 ; 8 ( 1 ): e53786 . 23342000 10.1371/journal.pone.0053786 3544860",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_116",
            "start": 0,
            "end": 190,
            "label": {}
        },
        {
            "ix": "8-42_v1_117@0",
            "content": "<REF-11> Alexa A Rahnenfuhrer J : topGO: Enrichment analysis for Gene Ontology. R package version 2.28.0. Bioconductor . 2016 .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_117",
            "start": 0,
            "end": 126,
            "label": {}
        },
        {
            "ix": "8-42_v1_118@0",
            "content": "<REF-12> Pag\u00e8s H Aboyoun P Gentleman R : Biostrings: Efficient manipulation of biological strings . R Package Version. 2017 ; 2 ( 0 ). Reference Source",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_118",
            "start": 0,
            "end": 150,
            "label": {}
        },
        {
            "ix": "8-42_v1_119@0",
            "content": "<REF-13> Yu G Smith DK Zhu H : ggtree: an r package for visualization and annotation of phylogenetic trees with their covariates and other associated data. McInerny G editor. Methods Ecol Evol. 2017 ; 8 ( 1 ): 28 \u2013 36 . 10.1111/2041-210X.12628",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_119",
            "start": 0,
            "end": 242,
            "label": {}
        },
        {
            "ix": "8-42_v1_120@0",
            "content": "<REF-14> Lawrence M Huber W Pag\u00e8s H : Software for computing and annotating genomic ranges. PLoS Comput Biol. 2013 ; 9 ( 8 ): e1003118 . 23950696 10.1371/journal.pcbi.1003118 3738458",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_120",
            "start": 0,
            "end": 181,
            "label": {}
        },
        {
            "ix": "8-42_v1_121@0",
            "content": "<REF-15> McKinney W : pandas: a foundational Python library for data analysis and statistics. Python for High Performance and Scientific Computing. 2011 ; 1 \u2013 9 . Reference Source",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_121",
            "start": 0,
            "end": 178,
            "label": {}
        },
        {
            "ix": "8-42_v1_122@0",
            "content": "<REF-16> Train C-M, Pignatelli M Altenhoff A : iHam & pyHam: visualizing and processing hierarchical orthologous groups. Bioinformatics. 2018 . 30508066 10.1093/bioinformatics/bty994",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_122",
            "start": 0,
            "end": 181,
            "label": {}
        },
        {
            "ix": "8-42_v1_123@0",
            "content": "<REF-17> Sukumaran J Holder MT : DendroPy: a Python library for phylogenetic computing. Bioinformatics. 2010 ; 26 ( 12 ): 1569 \u2013 71 . 20421198 10.1093/bioinformatics/btq228",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_123",
            "start": 0,
            "end": 171,
            "label": {}
        },
        {
            "ix": "8-42_v1_124@0",
            "content": "<REF-18> Huerta-Cepas J Serra F Bork P : ETE 3: Reconstruction, Analysis, and Visualization of Phylogenomic Data. Mol Biol Evol. 2016 ; 33 ( 6 ): 1635 \u2013 8 . 26921390 10.1093/molbev/msw046 4868116",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_124",
            "start": 0,
            "end": 194,
            "label": {}
        },
        {
            "ix": "8-42_v1_125@0",
            "content": "<REF-19> Klopfenstein DV Zhang L Pedersen BS : GOATOOLS: A Python library for Gene Ontology analyses. Sci Rep. 2018 ; 8 ( 1 ): 10872 . 30022098 10.1038/s41598-018-28948-z 6052049",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_125",
            "start": 0,
            "end": 177,
            "label": {}
        },
        {
            "ix": "8-42_v1_126@0",
            "content": "<REF-20> Kluyver T Ragan-Kelley B P\u00e9rez F : Jupyter Notebooks-a publishing format for reproducible computational workflows. In: ELPUB . 2016 ; 87 \u2013 90 . 10.3233/978-1-61499-649-1-87",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_126",
            "start": 0,
            "end": 180,
            "label": {}
        },
        {
            "ix": "8-42_v1_127@0",
            "content": "<REF-21> Wickham H : httr: Tools for Working with URLs and HTTP . 2018 . Reference Source",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_127",
            "start": 0,
            "end": 88,
            "label": {}
        },
        {
            "ix": "8-42_v1_128@0",
            "content": "<REF-22> Lambert LA Perri H Meehan TJ : Evolution of duplications in the transferrin family of proteins. Comp Biochem Physiol B Biochem Mol Biol. 2005 ; 140 ( 1 ): 11 \u2013 25 . 15621505 10.1016/j.cbpc.2004.09.012",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_128",
            "start": 0,
            "end": 208,
            "label": {}
        },
        {
            "ix": "8-42_v1_129@0",
            "content": "<REF-23> Ashburner M Ball CA Blake JA : Gene ontology: tool for the unification of biology. The Gene Ontology Consortium. Nat Genet. 2000 ; 25 ( 1 ): 25 \u2013 9 . 10802651 10.1038/75556 3037419",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_129",
            "start": 0,
            "end": 188,
            "label": {}
        },
        {
            "ix": "8-42_v1_130@0",
            "content": "<REF-24> Gaudet P Dessimoz C : Gene Ontology: Pitfalls, Biases, and Remedies. Methods Mol Biol. In: Dessimoz C, \u0160kunca N, editors. The Gene Ontology Handbook . New York, NY: Springer New York; 2017 ; 189 \u2013 205 . 27812944 10.1007/978-1-4939-3743-1_14",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_130",
            "start": 0,
            "end": 248,
            "label": {}
        },
        {
            "ix": "8-42_v1_131@0",
            "content": "<REF-25> Naot D Grey A Reid IR : Lactoferrin--a novel bone growth factor. Clin Med Res. 2005 ; 3 ( 2 ): 93 \u2013 101 . 16012127 10.3121/cmr.3.2.93 1183439",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_131",
            "start": 0,
            "end": 149,
            "label": {}
        },
        {
            "ix": "8-42_v1_132@0",
            "content": "<REF-26> Orsi N : The antimicrobial activity of lactoferrin: current status and perspectives. Biometals. 2004 ; 17 ( 3 ): 189 \u2013 96 . 15222464 10.1023/B:BIOM.0000027691.86757.e2",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_132",
            "start": 0,
            "end": 175,
            "label": {}
        },
        {
            "ix": "8-42_v1_133@0",
            "content": "<REF-27> Dayhoff MO Schwartz RM Orcutt BC : A model of evolutionary change in proteins. In: Atlas of Protein Sequence and Structure . 1978 ; 345 \u2013 52 . Reference Source",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_133",
            "start": 0,
            "end": 167,
            "label": {}
        },
        {
            "ix": "8-42_v1_134@0",
            "content": "<REF-28> Easteal S : Generation time and the rate of molecular evolution. Mol Biol Evol. 1985 ; 2 ( 5 ): 450 \u2013 3 . 3870871 10.1093/oxfordjournals.molbev.a040361",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_134",
            "start": 0,
            "end": 159,
            "label": {}
        },
        {
            "ix": "8-42_v1_135@0",
            "content": "<REF-29> Huntley RP Sawford T Mutowo-Meullenet P : The GOA database: gene Ontology annotation updates for 2015. Nucleic Acids Res. 2015 ; 43 ( Database issue ): D1057 \u2013 63 . 25378336 10.1093/nar/gku1113 4383930",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_135",
            "start": 0,
            "end": 209,
            "label": {}
        },
        {
            "ix": "8-42_v1_136@0",
            "content": "<REF-30> Komljenovic A Roux J Wollbrett J : BgeeDB, an R package for retrieval of curated expression datasets and for gene list expression localization enrichment tests [version 2; referees: 2 approved, 1 approved with reservations]. F1000Res. 2016 ; 5 : 2748 . 30467516 10.12688/f1000research.9973.2 6113886",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_136",
            "start": 0,
            "end": 307,
            "label": {}
        },
        {
            "ix": "8-42_v1_137@0",
            "content": "<REF-31> Bastian F Parmentier G Roux J : Bgee: Integrating and Comparing Heterogeneous Transcriptome Data Among Species. In: Data Integration in the Life Sciences . (Lecture Notes in Computer Science). Springer Berlin Heidelberg. 2008 ; 124 \u2013 31 . 10.1007/978-3-540-69828-9_12",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_137",
            "start": 0,
            "end": 275,
            "label": {}
        },
        {
            "ix": "8-42_v1_138@0",
            "content": "<REF-32> Cock PJ Antao T Chang JT : Biopython: freely available Python tools for computational molecular biology and bioinformatics. Bioinformatics. 2009 ; 25 ( 11 ): 1422 \u2013 3 . 19304878 10.1093/bioinformatics/btp163 2682512",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_138",
            "start": 0,
            "end": 223,
            "label": {}
        },
        {
            "ix": "8-42_v1_139@0",
            "content": "<REF-33> Parnell LD Lindenbaum P Shameer K : BioStar: an online question & answer resource for the bioinformatics community. PLoS Comput Biol. 2011 ; 7 ( 10 ): e1002216 . 22046109 10.1371/journal.pcbi.1002216 3203049",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_139",
            "start": 0,
            "end": 215,
            "label": {}
        },
        {
            "ix": "8-42_v1_140@0",
            "content": "<REF-34> klarakaleb Altenhoff A bioc-gitadmin : DessimozLab/OmaDB: v1.99.1 (Version 1.99.1). Zenodo. 2019 . http://www.doi.org/10.5281/zenodo.2530253",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_140",
            "start": 0,
            "end": 148,
            "label": {}
        },
        {
            "ix": "8-42_v1_141@0",
            "content": "<REF-35> Alex WV Altenhoff A : DessimozLab/pyomadb: v2.0.0 (Version 2.0.0). Zenodo. 2019 . http://www.doi.org/10.5281/zenodo.2530250",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "8-42_v1_141",
            "start": 0,
            "end": 131,
            "label": {}
        }
    ],
    "edges": [
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_1",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_1",
            "tgt_ix": "8-42_v1_2",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_3",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_3",
            "tgt_ix": "8-42_v1_4",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_3",
            "tgt_ix": "8-42_v1_5",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_3",
            "tgt_ix": "8-42_v1_6",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_3",
            "tgt_ix": "8-42_v1_7",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_3",
            "tgt_ix": "8-42_v1_8",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_9",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_9",
            "tgt_ix": "8-42_v1_10",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_9",
            "tgt_ix": "8-42_v1_11",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_11",
            "tgt_ix": "8-42_v1_12",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_11",
            "tgt_ix": "8-42_v1_13",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_11",
            "tgt_ix": "8-42_v1_14",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_11",
            "tgt_ix": "8-42_v1_15",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_15",
            "tgt_ix": "8-42_v1_16",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_9",
            "tgt_ix": "8-42_v1_17",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_17",
            "tgt_ix": "8-42_v1_18",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_17",
            "tgt_ix": "8-42_v1_19",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_17",
            "tgt_ix": "8-42_v1_20",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_17",
            "tgt_ix": "8-42_v1_21",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_17",
            "tgt_ix": "8-42_v1_22",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_9",
            "tgt_ix": "8-42_v1_23",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_23",
            "tgt_ix": "8-42_v1_24",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_23",
            "tgt_ix": "8-42_v1_25",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_23",
            "tgt_ix": "8-42_v1_26",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_23",
            "tgt_ix": "8-42_v1_27",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_23",
            "tgt_ix": "8-42_v1_28",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_29",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_30",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_31",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_31",
            "tgt_ix": "8-42_v1_32",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_31",
            "tgt_ix": "8-42_v1_33",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_34",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_35",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_36",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_37",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_38",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_39",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_40",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_41",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_42",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_43",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_44",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_45",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_46",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_47",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_48",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_49",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_50",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_51",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_52",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_53",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_53",
            "tgt_ix": "8-42_v1_54",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_55",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_56",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_57",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_58",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_59",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_60",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_61",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_62",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_63",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_63",
            "tgt_ix": "8-42_v1_64",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_65",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_66",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_67",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_68",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_69",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_70",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_71",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_71",
            "tgt_ix": "8-42_v1_72",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_73",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_74",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_75",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_76",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_76",
            "tgt_ix": "8-42_v1_77",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_76",
            "tgt_ix": "8-42_v1_78",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_76",
            "tgt_ix": "8-42_v1_79",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_80",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_81",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_82",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_83",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_84",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_84",
            "tgt_ix": "8-42_v1_85",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_86",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_87",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_88",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_88",
            "tgt_ix": "8-42_v1_89",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_88",
            "tgt_ix": "8-42_v1_90",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_88",
            "tgt_ix": "8-42_v1_91",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_88",
            "tgt_ix": "8-42_v1_92",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_88",
            "tgt_ix": "8-42_v1_93",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_94",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_95",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_96",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_97",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_98",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_99",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_100",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_101",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_102",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_103",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_104",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_105",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_106",
            "etype": "parent",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_1",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_1",
            "tgt_ix": "8-42_v1_2",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_2",
            "tgt_ix": "8-42_v1_3",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_3",
            "tgt_ix": "8-42_v1_4",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_4",
            "tgt_ix": "8-42_v1_5",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_5",
            "tgt_ix": "8-42_v1_6",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_7",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_7",
            "tgt_ix": "8-42_v1_8",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_8",
            "tgt_ix": "8-42_v1_9",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_9",
            "tgt_ix": "8-42_v1_10",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_10",
            "tgt_ix": "8-42_v1_11",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_11",
            "tgt_ix": "8-42_v1_12",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_12",
            "tgt_ix": "8-42_v1_13",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_13",
            "tgt_ix": "8-42_v1_14",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_14",
            "tgt_ix": "8-42_v1_15",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_15",
            "tgt_ix": "8-42_v1_16",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_16",
            "tgt_ix": "8-42_v1_17",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_17",
            "tgt_ix": "8-42_v1_18",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_18",
            "tgt_ix": "8-42_v1_19",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_20",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_20",
            "tgt_ix": "8-42_v1_21",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_21",
            "tgt_ix": "8-42_v1_22",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_22",
            "tgt_ix": "8-42_v1_23",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_23",
            "tgt_ix": "8-42_v1_24",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_24",
            "tgt_ix": "8-42_v1_25",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_26",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_26",
            "tgt_ix": "8-42_v1_27",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_27",
            "tgt_ix": "8-42_v1_28",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_28",
            "tgt_ix": "8-42_v1_29",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_30",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_30",
            "tgt_ix": "8-42_v1_31",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_31",
            "tgt_ix": "8-42_v1_32",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_32",
            "tgt_ix": "8-42_v1_33",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_33",
            "tgt_ix": "8-42_v1_34",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_35",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_35",
            "tgt_ix": "8-42_v1_36",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_36",
            "tgt_ix": "8-42_v1_37",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_37",
            "tgt_ix": "8-42_v1_38",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_38",
            "tgt_ix": "8-42_v1_39",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_39",
            "tgt_ix": "8-42_v1_40",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_40",
            "tgt_ix": "8-42_v1_41",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_41",
            "tgt_ix": "8-42_v1_42",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_42",
            "tgt_ix": "8-42_v1_43",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_43",
            "tgt_ix": "8-42_v1_44",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_44",
            "tgt_ix": "8-42_v1_45",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_45",
            "tgt_ix": "8-42_v1_46",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_46",
            "tgt_ix": "8-42_v1_47",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_47",
            "tgt_ix": "8-42_v1_48",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_48",
            "tgt_ix": "8-42_v1_49",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_49",
            "tgt_ix": "8-42_v1_50",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_50",
            "tgt_ix": "8-42_v1_51",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_51",
            "tgt_ix": "8-42_v1_52",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_52",
            "tgt_ix": "8-42_v1_53",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_53",
            "tgt_ix": "8-42_v1_54",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_54",
            "tgt_ix": "8-42_v1_55",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_56",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_56",
            "tgt_ix": "8-42_v1_57",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_57",
            "tgt_ix": "8-42_v1_58",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_58",
            "tgt_ix": "8-42_v1_59",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_59",
            "tgt_ix": "8-42_v1_60",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_60",
            "tgt_ix": "8-42_v1_61",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_61",
            "tgt_ix": "8-42_v1_62",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_62",
            "tgt_ix": "8-42_v1_63",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_63",
            "tgt_ix": "8-42_v1_64",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_64",
            "tgt_ix": "8-42_v1_65",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_66",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_66",
            "tgt_ix": "8-42_v1_67",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_67",
            "tgt_ix": "8-42_v1_68",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_68",
            "tgt_ix": "8-42_v1_69",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_69",
            "tgt_ix": "8-42_v1_70",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_70",
            "tgt_ix": "8-42_v1_71",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_71",
            "tgt_ix": "8-42_v1_72",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_72",
            "tgt_ix": "8-42_v1_73",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_73",
            "tgt_ix": "8-42_v1_74",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_74",
            "tgt_ix": "8-42_v1_75",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_75",
            "tgt_ix": "8-42_v1_76",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_76",
            "tgt_ix": "8-42_v1_77",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_77",
            "tgt_ix": "8-42_v1_78",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_78",
            "tgt_ix": "8-42_v1_79",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_79",
            "tgt_ix": "8-42_v1_80",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_81",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_81",
            "tgt_ix": "8-42_v1_82",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_82",
            "tgt_ix": "8-42_v1_83",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_83",
            "tgt_ix": "8-42_v1_84",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_84",
            "tgt_ix": "8-42_v1_85",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_85",
            "tgt_ix": "8-42_v1_86",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_86",
            "tgt_ix": "8-42_v1_87",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_87",
            "tgt_ix": "8-42_v1_88",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_88",
            "tgt_ix": "8-42_v1_89",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_89",
            "tgt_ix": "8-42_v1_90",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_90",
            "tgt_ix": "8-42_v1_91",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_91",
            "tgt_ix": "8-42_v1_92",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_92",
            "tgt_ix": "8-42_v1_93",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_93",
            "tgt_ix": "8-42_v1_94",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_95",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_95",
            "tgt_ix": "8-42_v1_96",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_96",
            "tgt_ix": "8-42_v1_97",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_97",
            "tgt_ix": "8-42_v1_98",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_98",
            "tgt_ix": "8-42_v1_99",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_99",
            "tgt_ix": "8-42_v1_100",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_100",
            "tgt_ix": "8-42_v1_101",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_101",
            "tgt_ix": "8-42_v1_102",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_102",
            "tgt_ix": "8-42_v1_103",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_103",
            "tgt_ix": "8-42_v1_104",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_104",
            "tgt_ix": "8-42_v1_105",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_105",
            "tgt_ix": "8-42_v1_106",
            "etype": "next",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_4",
            "tgt_ix": "8-42_v1_107",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_4",
            "tgt_ix": "8-42_v1_108",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_4",
            "tgt_ix": "8-42_v1_109",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_5",
            "tgt_ix": "8-42_v1_110",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_111",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_112",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_7",
            "tgt_ix": "8-42_v1_113",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_13",
            "tgt_ix": "8-42_v1_114",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_13",
            "tgt_ix": "8-42_v1_115",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_14",
            "tgt_ix": "8-42_v1_116",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_117",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_118",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_119",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_120",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_121",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_122",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_123",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_124",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_125",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_30",
            "tgt_ix": "8-42_v1_126",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_32",
            "tgt_ix": "8-42_v1_127",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_39",
            "tgt_ix": "8-42_v1_128",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_45",
            "tgt_ix": "8-42_v1_129",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_50",
            "tgt_ix": "8-42_v1_130",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_52",
            "tgt_ix": "8-42_v1_131",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_52",
            "tgt_ix": "8-42_v1_132",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_67",
            "tgt_ix": "8-42_v1_133",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_75",
            "tgt_ix": "8-42_v1_134",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_79",
            "tgt_ix": "8-42_v1_135",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_81",
            "tgt_ix": "8-42_v1_136",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_81",
            "tgt_ix": "8-42_v1_137",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_91",
            "tgt_ix": "8-42_v1_138",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_93",
            "tgt_ix": "8-42_v1_139",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_101",
            "tgt_ix": "8-42_v1_140",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_105",
            "tgt_ix": "8-42_v1_141",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_14",
            "tgt_ix": "8-42_v1_16",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_52",
            "tgt_ix": "8-42_v1_54",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_60",
            "tgt_ix": "8-42_v1_64",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_69",
            "tgt_ix": "8-42_v1_72",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_83",
            "tgt_ix": "8-42_v1_85",
            "etype": "link",
            "meta": {
                "created_by": "F1000XMLParser"
            }
        },
        {
            "src_ix": "8-42_v1_0",
            "tgt_ix": "8-42_v1_0@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_1",
            "tgt_ix": "8-42_v1_1@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_2",
            "tgt_ix": "8-42_v1_2@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_2",
            "tgt_ix": "8-42_v1_2@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_2",
            "tgt_ix": "8-42_v1_2@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_2",
            "tgt_ix": "8-42_v1_2@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_2",
            "tgt_ix": "8-42_v1_2@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_3",
            "tgt_ix": "8-42_v1_3@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_4",
            "tgt_ix": "8-42_v1_4@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_4",
            "tgt_ix": "8-42_v1_4@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_5",
            "tgt_ix": "8-42_v1_5@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_5",
            "tgt_ix": "8-42_v1_5@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_6@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_6@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_6@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_6@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_6",
            "tgt_ix": "8-42_v1_6@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_7",
            "tgt_ix": "8-42_v1_7@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_7",
            "tgt_ix": "8-42_v1_7@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_7",
            "tgt_ix": "8-42_v1_7@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_8",
            "tgt_ix": "8-42_v1_8@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_9",
            "tgt_ix": "8-42_v1_9@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_10",
            "tgt_ix": "8-42_v1_10@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_11",
            "tgt_ix": "8-42_v1_11@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_12",
            "tgt_ix": "8-42_v1_12@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_12",
            "tgt_ix": "8-42_v1_12@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_12",
            "tgt_ix": "8-42_v1_12@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_12",
            "tgt_ix": "8-42_v1_12@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_13",
            "tgt_ix": "8-42_v1_13@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_13",
            "tgt_ix": "8-42_v1_13@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_13",
            "tgt_ix": "8-42_v1_13@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_14",
            "tgt_ix": "8-42_v1_14@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_14",
            "tgt_ix": "8-42_v1_14@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_14",
            "tgt_ix": "8-42_v1_14@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_15",
            "tgt_ix": "8-42_v1_15@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_17",
            "tgt_ix": "8-42_v1_17@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_18",
            "tgt_ix": "8-42_v1_18@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_18",
            "tgt_ix": "8-42_v1_18@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_19@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_19@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_19",
            "tgt_ix": "8-42_v1_19@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_20",
            "tgt_ix": "8-42_v1_20@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_20",
            "tgt_ix": "8-42_v1_20@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_21",
            "tgt_ix": "8-42_v1_21@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_23",
            "tgt_ix": "8-42_v1_23@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_24",
            "tgt_ix": "8-42_v1_24@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_24",
            "tgt_ix": "8-42_v1_24@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_24",
            "tgt_ix": "8-42_v1_24@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_24",
            "tgt_ix": "8-42_v1_24@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_25@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_25@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_25@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_25",
            "tgt_ix": "8-42_v1_25@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_26",
            "tgt_ix": "8-42_v1_26@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_26",
            "tgt_ix": "8-42_v1_26@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_26",
            "tgt_ix": "8-42_v1_26@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_27",
            "tgt_ix": "8-42_v1_27@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_29",
            "tgt_ix": "8-42_v1_29@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_30",
            "tgt_ix": "8-42_v1_30@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_30",
            "tgt_ix": "8-42_v1_30@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_30",
            "tgt_ix": "8-42_v1_30@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_31",
            "tgt_ix": "8-42_v1_31@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_32",
            "tgt_ix": "8-42_v1_32@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_32",
            "tgt_ix": "8-42_v1_32@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_32",
            "tgt_ix": "8-42_v1_32@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_34",
            "tgt_ix": "8-42_v1_34@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_35",
            "tgt_ix": "8-42_v1_35@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_37",
            "tgt_ix": "8-42_v1_37@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_37",
            "tgt_ix": "8-42_v1_37@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_39",
            "tgt_ix": "8-42_v1_39@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_39",
            "tgt_ix": "8-42_v1_39@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_40",
            "tgt_ix": "8-42_v1_40@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_40",
            "tgt_ix": "8-42_v1_40@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_41",
            "tgt_ix": "8-42_v1_41@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_43",
            "tgt_ix": "8-42_v1_43@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_43",
            "tgt_ix": "8-42_v1_43@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_45",
            "tgt_ix": "8-42_v1_45@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_47",
            "tgt_ix": "8-42_v1_47@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_48",
            "tgt_ix": "8-42_v1_48@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_50",
            "tgt_ix": "8-42_v1_50@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_50",
            "tgt_ix": "8-42_v1_50@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_50",
            "tgt_ix": "8-42_v1_50@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_52",
            "tgt_ix": "8-42_v1_52@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_52",
            "tgt_ix": "8-42_v1_52@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_53",
            "tgt_ix": "8-42_v1_53@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_55",
            "tgt_ix": "8-42_v1_55@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_56",
            "tgt_ix": "8-42_v1_56@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_56",
            "tgt_ix": "8-42_v1_56@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_56",
            "tgt_ix": "8-42_v1_56@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_56",
            "tgt_ix": "8-42_v1_56@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_58",
            "tgt_ix": "8-42_v1_58@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_60",
            "tgt_ix": "8-42_v1_60@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_60",
            "tgt_ix": "8-42_v1_60@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_60",
            "tgt_ix": "8-42_v1_60@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_63",
            "tgt_ix": "8-42_v1_63@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_65",
            "tgt_ix": "8-42_v1_65@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_66",
            "tgt_ix": "8-42_v1_66@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_66",
            "tgt_ix": "8-42_v1_66@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_66",
            "tgt_ix": "8-42_v1_66@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_67",
            "tgt_ix": "8-42_v1_67@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_67",
            "tgt_ix": "8-42_v1_67@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_69",
            "tgt_ix": "8-42_v1_69@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_71",
            "tgt_ix": "8-42_v1_71@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_73",
            "tgt_ix": "8-42_v1_73@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_75",
            "tgt_ix": "8-42_v1_75@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_75",
            "tgt_ix": "8-42_v1_75@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_75",
            "tgt_ix": "8-42_v1_75@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_76",
            "tgt_ix": "8-42_v1_76@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_77",
            "tgt_ix": "8-42_v1_77@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_77",
            "tgt_ix": "8-42_v1_77@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_79",
            "tgt_ix": "8-42_v1_79@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_79",
            "tgt_ix": "8-42_v1_79@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_80",
            "tgt_ix": "8-42_v1_80@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_81",
            "tgt_ix": "8-42_v1_81@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_81",
            "tgt_ix": "8-42_v1_81@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_83",
            "tgt_ix": "8-42_v1_83@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_83",
            "tgt_ix": "8-42_v1_83@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_84",
            "tgt_ix": "8-42_v1_84@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_86",
            "tgt_ix": "8-42_v1_86@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_88",
            "tgt_ix": "8-42_v1_88@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_89",
            "tgt_ix": "8-42_v1_89@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_89",
            "tgt_ix": "8-42_v1_89@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_89",
            "tgt_ix": "8-42_v1_89@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_90",
            "tgt_ix": "8-42_v1_90@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_90",
            "tgt_ix": "8-42_v1_90@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_90",
            "tgt_ix": "8-42_v1_90@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_90",
            "tgt_ix": "8-42_v1_90@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_91",
            "tgt_ix": "8-42_v1_91@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_91",
            "tgt_ix": "8-42_v1_91@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_92",
            "tgt_ix": "8-42_v1_92@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_92",
            "tgt_ix": "8-42_v1_92@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_92",
            "tgt_ix": "8-42_v1_92@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_93",
            "tgt_ix": "8-42_v1_93@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_93",
            "tgt_ix": "8-42_v1_93@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_93",
            "tgt_ix": "8-42_v1_93@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_94",
            "tgt_ix": "8-42_v1_94@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_95",
            "tgt_ix": "8-42_v1_95@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_95",
            "tgt_ix": "8-42_v1_95@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_96",
            "tgt_ix": "8-42_v1_96@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_96",
            "tgt_ix": "8-42_v1_96@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_97",
            "tgt_ix": "8-42_v1_97@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_98",
            "tgt_ix": "8-42_v1_98@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_99",
            "tgt_ix": "8-42_v1_99@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_100",
            "tgt_ix": "8-42_v1_100@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_101",
            "tgt_ix": "8-42_v1_101@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_102",
            "tgt_ix": "8-42_v1_102@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_103",
            "tgt_ix": "8-42_v1_103@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_104",
            "tgt_ix": "8-42_v1_104@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_105",
            "tgt_ix": "8-42_v1_105@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_106",
            "tgt_ix": "8-42_v1_106@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_107",
            "tgt_ix": "8-42_v1_107@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_108",
            "tgt_ix": "8-42_v1_108@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_109",
            "tgt_ix": "8-42_v1_109@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_110",
            "tgt_ix": "8-42_v1_110@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_111",
            "tgt_ix": "8-42_v1_111@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_112",
            "tgt_ix": "8-42_v1_112@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_113",
            "tgt_ix": "8-42_v1_113@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_114",
            "tgt_ix": "8-42_v1_114@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_115",
            "tgt_ix": "8-42_v1_115@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_116",
            "tgt_ix": "8-42_v1_116@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_117",
            "tgt_ix": "8-42_v1_117@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_118",
            "tgt_ix": "8-42_v1_118@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_119",
            "tgt_ix": "8-42_v1_119@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_120",
            "tgt_ix": "8-42_v1_120@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_121",
            "tgt_ix": "8-42_v1_121@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_122",
            "tgt_ix": "8-42_v1_122@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_123",
            "tgt_ix": "8-42_v1_123@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_124",
            "tgt_ix": "8-42_v1_124@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_125",
            "tgt_ix": "8-42_v1_125@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_126",
            "tgt_ix": "8-42_v1_126@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_127",
            "tgt_ix": "8-42_v1_127@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_128",
            "tgt_ix": "8-42_v1_128@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_129",
            "tgt_ix": "8-42_v1_129@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_130",
            "tgt_ix": "8-42_v1_130@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_131",
            "tgt_ix": "8-42_v1_131@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_132",
            "tgt_ix": "8-42_v1_132@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_133",
            "tgt_ix": "8-42_v1_133@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_134",
            "tgt_ix": "8-42_v1_134@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_135",
            "tgt_ix": "8-42_v1_135@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_136",
            "tgt_ix": "8-42_v1_136@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_137",
            "tgt_ix": "8-42_v1_137@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_138",
            "tgt_ix": "8-42_v1_138@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_139",
            "tgt_ix": "8-42_v1_139@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_140",
            "tgt_ix": "8-42_v1_140@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "8-42_v1_141",
            "tgt_ix": "8-42_v1_141@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        }
    ],
    "prefix": "8-42_v1",
    "meta": {
        "parser": "F1000XMLParser",
        "intertext-graph": "N/A",
        "doi": "10.12688/f1000research.17548.1",
        "atype": "software-tool",
        "license": "http://creativecommons.org/licenses/by/4.0/",
        "title": "Expanding the Orthologous Matrix (OMA) programmatic interfaces: REST API and the \n                     OmaDB  packages for R and Python",
        "abstract": "The Orthologous Matrix (OMA) is a well-established resource to identify orthologs among many genomes. Here, we present two recent additions to its programmatic interface, namely a REST API, and user-friendly R and Python packages called OmaDB . These should further facilitate the incorporation of OMA data into computational scripts and pipelines. The REST API can be freely accessed at https://omabrowser.org/api . The R OmaDB package is available as part of Bioconductor at http://bioconductor.org/packages/OmaDB/ , and the omadb Python package is available from the Python Package Index (PyPI) at https://pypi.org/project/omadb/ .",
        "contributors": [
            {
                "surname": "Kaleb",
                "given-names": "Klara"
            },
            {
                "surname": "Vesztrocy",
                "given-names": "Alex Warwick"
            },
            {
                "surname": "Altenhoff",
                "given-names": "Adrian M."
            },
            {
                "surname": "Dessimoz",
                "given-names": "Christophe"
            }
        ],
        "url": "https://f1000research.com/articles/8-42/v1/",
        "doc_id": "8-42",
        "version": 1,
        "ix_counter": 468,
        "sentence_split_type": "HybridSplitterLessAndLong",
        "sentence_split_model": "HybridSplitterLessAndLong_SciSpacy+Spacy"
    }
}