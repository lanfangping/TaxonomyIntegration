{
    "nodes": [
        {
            "ix": "252-ARR_v2_0",
            "content": "Learning Non-Autoregressive Models from Search for Unsupervised Sentence Summarization",
            "ntype": "article-title",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_1",
            "content": "Abstract",
            "ntype": "abstract",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_2",
            "content": "Text summarization aims to generate a short summary for an input text. In this work, we propose a Non-Autoregressive Unsupervised Summarization (NAUS) approach, which does not require parallel data for training. Our NAUS first performs edit-based search towards a heuristically defined score, and generates a summary as pseudo-groundtruth. Then, we train an encoder-only non-autoregressive Transformer based on the search result. We also propose a dynamic programming approach for length-control decoding, which is important for the summarization task. Experiments on two datasets show that NAUS achieves state-of-the-art performance for unsupervised summarization, yet largely improving inference efficiency. Further, our algorithm is able to perform explicit length-transfer summary generation. 1",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_3",
            "content": "Introduction",
            "ntype": "title",
            "meta": {
                "section": "1"
            }
        },
        {
            "ix": "252-ARR_v2_4",
            "content": "Text summarization is an important natural language processing (NLP) task, aiming at generating concise summaries for given texts while preserving the key information. It has extensive real-world applications such as headline generation (Nenkova et al., 2011). In this paper, we focus on the setting of sentence summarization (Rush et al., 2015;Filippova et al., 2015).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_5",
            "content": "State-of-the-art text summarization models are typically trained in a supervised way with large training corpora, comprising pairs of long texts and their summaries (Zhang et al., 2020;Aghajanyan et al., 2020Aghajanyan et al., , 2021. However, such parallel data are expensive to obtain, preventing the applications to less popular domains and less spoken languages.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_6",
            "content": "Unsupervised text generation has been attracting increasing interest, because it does not require parallel data for training. One widely used approach is to compress a long text into a short one, and to reconstruct it to the long text by a cycle consistency loss (Miao and Blunsom, 2016;Wang and Lee, 2018;Baziotis et al., 2019). Due to the indifferentiability of the compressed sentence space, such an approach requires reinforcement learning (or its variants), which makes the training difficult (Kreutzer et al., 2021).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_7",
            "content": "Recently, Schumann et al. (2020) propose an edit-based approach for unsupervised summarization. Their model maximizes a heuristically defined scoring function that evaluates the quality (fluency and semantics) of the generated summary, achieving higher performance than cycle-consistency methods. However, the search approach is slow in inference because hundreds of search steps are needed for each data sample. Moreover, their approach can only select words from the input sentence with the word order preserved. Thus, it is restricted and may generate noisy summaries due to the local optimality of search algorithms.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_8",
            "content": "To address the above drawbacks, we propose a Non-Autoregressive approach to Unsupervised Summarization (NAUS). The idea is to perform search as in Schumann et al. (2020) and, inspired by Li et al. (2020), to train a machine learning model to smooth out such noise and to speed up the inference process. Different from Li et al. (2020), we propose to utilize non-autoregressive decoders, which generate all output tokens in parallel due to our following observations:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_9",
            "content": "\u2022 Non-autoregressive models are several times faster than autoregressive generation, which is important when the system is deployed. \u2022 The input and output of the summarization task have a strong correspondence. Non-autoregressive generation supports encoder-only architectures, which can better utilize such input-output correspondence and even outperform autoregressive models for summarization. \u2022 For non-autoregressive models, we can design a length-control algorithm based on dynamic programming to satisfy the constraint of output lengths, which is typical in summarization applications but cannot be easily achieved with autoregressive models.",
            "ntype": "list",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_10",
            "content": "We conducted experiments on Gigaword headline generation (Graff et al., 2003) and DUC2004 (Over and Yen, 2004) datasets. Experiments show that our NAUS achieves state-of-the-art performance on unsupervised summarization; especially, it outperforms its teacher (i.e., the search approach), confirming that NAUS can indeed smooth out the search noise. Regarding inference efficiency, our NAUS with truncating is 1000 times more efficient than the search approach; even with dynamic programming for length control, NAUS is still 100 times more efficient than search and several times more efficient than autoregressive models. Our NAUS is also able to perform length-transfer summary generation, i.e., generating summaries of different lengths from training.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_11",
            "content": "Approach",
            "ntype": "title",
            "meta": {
                "section": "2"
            }
        },
        {
            "ix": "252-ARR_v2_12",
            "content": "In our approach, we first follow Schumann et al. (2020) and obtain a summary by discrete search towards a heuristically defined objective function ( \u00a72.1). Then, we propose a non-autoregressive model for the summarization task ( \u00a72.2). We present the training strategy and the proposed length-control algorithm in \u00a72.3.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_13",
            "content": "Search-Based Summarization",
            "ntype": "title",
            "meta": {
                "section": "2.1"
            }
        },
        {
            "ix": "252-ARR_v2_14",
            "content": "Consider a given source text x = (x 1 , x 2 , . . . , x n ). The goal of summarization is to find a shorter text y = (y 1 , y 2 , . . . , y m ) as the summary.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_15",
            "content": "Our work on unsupervised summarization follows the recent progress of search-based text generation (Liu et al., , 2021aKumar et al., 2020). Schumann et al. (2020) formulate summarization as word-level extraction (with order preserved), and apply edit-based discrete local search to maximize a heuristically designed objective.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_16",
            "content": "Specifically, the objective function considers two aspects: (1) a language fluency score f LM (y), given by the reciprocal of a language model's perplexity; and (2) a semantic similarity score f SIM (y; x), given by the cosine embeddings. The overall objective combines the two aspects as",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_17",
            "content": "f (y; x) = f LM (y) \u2022 f SIM (y; x) \u03b3 (1)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_18",
            "content": "where \u03b3 is a weighting hyperparameter. Interested readers are referred to Schumann et al. (2020) for the details of the scoring function.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_19",
            "content": "Further, the desired summary length can be specified as a hard constraint, achieved by searching only among sentences of the correct length. Suppose the desired summary length is T , the approach selects T random words from the input, and maximizes the scoring function (1) by changing the selection and non-selection of two words.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_20",
            "content": "A greedy hill-climbing algorithm determines whether the change is accepted or not. In other words, a change is accepted if the score improves, or rejected otherwise. Such a process continues until a (possibly local) optimum is found.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_21",
            "content": "A pilot analysis in Schumann et al. (2020) shows that words largely overlap between a source text and its reference summary. This explains the high performance of such a word extraction approach, being a state-of-the-art unsupervised summarization system and outperforming strong competitors, e.g., cycle consistency (Wang and Lee, 2018;Baziotis et al., 2019).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_22",
            "content": "Non-Autoregressive Model for Summarization",
            "ntype": "title",
            "meta": {
                "section": "2.2"
            }
        },
        {
            "ix": "252-ARR_v2_23",
            "content": "Despite the high performance, such edit-based search has several drawbacks. First, the search process is slow because hundreds of local search steps are needed to obtain a high-quality summary. Second, their approach only extracts the original words with order preserved. Therefore, the generated summary is restricted and may be noisy.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_24",
            "content": "To this end, we propose a Non-Autoregressive approach to Unsupervised Summarization (NAUS) by learning from the search results. In this way, the machine learning model can smooth out the search noise and is much faster, largely alleviating the drawbacks of search-based summarization. Compared with training an autoregressive model from search (Li et al., 2020), non-autoregressive generation predicts all the words in parallel, further improving inference efficiency by several times.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_25",
            "content": "Moreover, a non-autoregressive model enables us to design an encoder-only architecture, which is more suited to the summarization task due to the strong correspondence between input and output, which cannot be fully utilized by encoder-decoder models, especially autoregressive ones.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_26",
            "content": "Specifically, we propose to use multi-layer Transformer (Vaswani et al., 2017) as the nonautoregressive architecture for summarization. Each Transformer layer is composed of a multihead attention sublayer and a feed-forward sublayer. Additionally, there is a residual connection in each sublayer, followed by layer normalization.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_27",
            "content": "Let X (n) \u2208 R T \u00d7d be the representation at the nth layer, where T is the number of words and d is the dimension. Specially, the input layer X (0) is the embeddings of words. Suppose we have h attention heads. The output of the ith head in the nth attention sublayer is A",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_28",
            "content": "(n) i = softmax Q i K i \u221a d k V i , where Q i , K i ,",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_29",
            "content": "and V i are matrices calculated by three distinct multi-layer perceptrons (MLPs) from X (n\u22121) ; d k is the attention dimension.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_30",
            "content": "Multiple attention heads are then concatenated:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_31",
            "content": "A (n) = Concat A (n) 1 , . . . , A (n) h W O",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_32",
            "content": "where W O \u2208 R d\u00d7d is a weight matrix.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_33",
            "content": "Then, we have a residual connection and layer normalization by",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_34",
            "content": "\u0100(n) = LayerNorm X (n\u22121) + A (n) (2)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_35",
            "content": "Further, an MLP sublayer processes \u0100(n) , followed by residual connection and layer normalization, yielding the nth layer's representation",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_36",
            "content": "X (n) = LayerNorm \u0100(n) + MLP( \u0100(n) ) (3)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_37",
            "content": "The last Transformer layer X (N ) is fed to softmax to predict the words of the summary in a non-autoregressive manner, that is, the probability at the tth step is given by softmax(W x (N ) t ), where x (N ) t is the tth row of the matrix X (N ) and W is the weight matrix.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_38",
            "content": "It is emphasized that, in the vocabulary, we include a special blank token , which is handled by dynamic programming during both training and inference ( \u00a72.3). This enables us to generate a shorter summary than the input with such a multi-layer Transformer.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_39",
            "content": "Our model can be thought of as an encoderonly architecture, differing from a typical encoderdecoder model with cross attention (Vaswani et al., 2017;Baziotis et al., 2019;Zhou and Rush, 2019). Previously, Su et al. (2021) propose a seemingly similar model to us, but put multiple end-ofsequence (EOS) tokens at the end of the generation; thus, they are unable to maintain the correspondence between input and output. Instead, we allow blank tokens scattering over the entire sentence; the residual connections in Eqns ( 2) and (3) can better utilize such input-output correspondence for summarization.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_40",
            "content": "Training and Inference",
            "ntype": "title",
            "meta": {
                "section": "2.3"
            }
        },
        {
            "ix": "252-ARR_v2_41",
            "content": "In this section, we first introduce the Connectionist Temporal Classification (CTC) training. Then, we propose a length-control decoding approach for summary generation.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_42",
            "content": "CTC Training. The Connectionist Temporal Classification (CTC, Graves et al., 2006) algorithm allows a special blank token in the vocabulary, and uses dynamic programming to marginalize out such blank tokens, known as latent alignment . In addition, non-autoregressive generation suffers from a common problem that words may be repeated in consecutive steps (Gu et al., 2018;; thus, CTC merges repeated words unless separated by . For example, the sequence of tokens a aabb is reduced to the text aab, denoted by \u0393(a aabb ) = aab.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_43",
            "content": "Concretely, the predicted likelihood is marginalized over all possible fillings of , i.e., all possible token sequences that are reduced to the groundtruth text:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_44",
            "content": "P (y|x) = w:\u0393(w)=y P (w|x)(4)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_45",
            "content": "where P (w|x) is the probability of generating a sequence of tokens w. Although enumerating every candidate in {w : \u0393(w) = y} is intractable, such marginalization fortunately can be computed by dynamic programming in an efficient way. Let \u03b1 s,t = w 1:s :\u0393(w 1:s )=y 1:t P (w 1:s |x) be the marginal probability of generating y 1:t up to the sth decoding slot. Moreover, \u03b1 s,0 is defined to be the probability that w 1:s is all , thus not having matched any word in y. The \u03b1 s,t variable can be further decomposed into two terms \u03b1 s,t = \u03b1 s,t + \u03b1 \u00ac s,t , where the first term is such probability with w s = , and the second term w s = . Apparently, the initialization of \u03b1 variables is",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_46",
            "content": "\u03b1 1,0 = P (w 1 = |x) (5) \u03b1 \u00ac 1,1 = P (w 1 = y 1 |x) (6) \u03b1 1,t = 0, \u2200t \u2265 1 (7) \u03b1 \u00ac 1,t = 0, \u2200t > 1 or t = 0(8)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_47",
            "content": "Eqn. ( 7) is because, at the first prediction slot, the empty token does not match any target words; Eqn. ( 8) is because the predicted non-first token must match exactly the first target word.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_48",
            "content": "The recursion formula for \u03b1 s,t is",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_49",
            "content": "\u03b1 s,t = \u03b1 s\u22121,t P (w t = |x)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_50",
            "content": "since the newly predicted token with probability P (w t = |x) does not match any target word, inheriting \u03b1 s\u22121,t .",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_51",
            "content": "The recursion formula for \u03b1 \u00ac s,t is",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_52",
            "content": "\u03b1 \u00ac s,t = \uf8f1 \uf8f4 \uf8f4 \uf8f2 \uf8f4 \uf8f4 \uf8f3 \u03b1 s\u22121,t\u22121 + \u03b1 \u00ac s\u22121,t P (w s = y t |x), if y t = y t\u22121 \u03b1 s\u22121,t\u22121 + \u03b1 \u00ac s\u22121,t P (w s = y t |x), otherwise",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_53",
            "content": "Here, w s is not , so we must have w s = y t , having the predicted probability P (w s = y t |x).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_54",
            "content": "If y t = y t\u22121 , then we have two sub-cases: first, w 1:s\u22121 is reduced to y 1:t\u22121 with w s\u22121 = separating two repeating words in y, having probability \u03b1 s\u22121,t\u22121 ; or second, w 1:s\u22121 is reduced to y 1:t with w s\u22121 = y t = , having probability \u03b1 \u00ac s\u22121 , which implies we are merging w s\u22121 and w s .",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_55",
            "content": "If y t = y t\u22121 , w 1:s\u22121 is reduced to either y 1:t\u22121 or y 1:t . In the first case, w s\u22121 can be either or non-, given by \u03b1 s\u22121,t\u22121 = \u03b1 s\u22121,t\u22121 + \u03b1 \u00ac s\u22121,t\u22121 . In the second case, we must have w s\u22121 = , which has a probability of \u03b1 \u00ac s\u22121,t . Finally, \u03b1 |w|,|y| is the marginal probability in Eqn. ( 4), as it is the probability that the entire generated sequence matches the entire target text.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_56",
            "content": "The CTC maximum likelihood estimation is to maximize the marginal probability, which is equivalent to minimizing the loss \u2212\u03b1 |w|,|y| . Since the dynamic programming formulas are differentiable, the entire model can be trained by backpropagation in an end-to-end manner with auto-differentiation tools (such as PyTorch).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_57",
            "content": "Length-Control Inference. Controlling output length is the nature of the summarization task, for example, displaying a short news headline on a mobile device. Moreover, Schumann et al. (2020) show that the main evaluation metric ROUGE (Lin, 2004) is sensitive to the summary length, and longer summaries tend to achieve higher ROUGE scores. Thus, it is crucial to control the summary length for fair comparison.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_58",
            "content": "We propose a length-control algorithm by dynamic programming (DP), following the nature of CTC training. However, our DP is an approximate algorithm because of the dependencies introduced by removing consecutive repeated tokens. Thus, we equip our DP with a beam search mechanism. We define B s,t to be a set of top-B sequences with s predicted tokens that are reduced to t words. B s,t is constructed by three scenarios.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_59",
            "content": "First, the blank token is predicted for the sth generation slot, and thus the summary length t remains the same, shown by the blue arrow in Figure 2. This yields a set of candidates",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_60",
            "content": "B (1) s,t = b \u2295 : b \u2208 B s\u22121,t(9)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_61",
            "content": "where \u2295 refers to string/token concatenation.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_62",
            "content": "Second, a repeated word is predicted for the sth generation slot, i.e., b s\u22121 for a subsequence b of length s\u22121. In this case, the summary length t also remains the same, also shown in the blue arrow in Figure 2. This gives a candidate set",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_63",
            "content": "B (2) s,t = b \u2295 b s\u22121 : b \u2208 B s\u22121,t(10)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_64",
            "content": "Third, a non-, non-repeating word w s is generated, increasing the summary length from t \u2212 1 to t, shown by the red arrow in Figure 2. This gives",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_65",
            "content": "B (3) s,t = top B b \u2295 w : b \u2208 B s\u22121,t\u22121 , w s = , w s = b s\u22121 (11)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_66",
            "content": "where top B selects the best B elements by the probability P (w s |x).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_67",
            "content": "Based on the three candidates sets, we select top-B sequences to keep the beam size fixed:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_68",
            "content": "B s,t = top B (B (1) s,t \u222a B (2) s,t \u222aB (3) s,t )(12)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_69",
            "content": "where the sequences are ranked by their predicted joint probabilities.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_70",
            "content": "Theorem 1.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_71",
            "content": "(1) If repeating tokens are not merged, then the proposed length-control algorithm with beam size B = 1 finds the exact optimum B S,T being the most probable length-T sentence given by S prediction slots.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_72",
            "content": "(2) If we merge repeating tokens predicted by CTC-trained models, the above algorithm may not be exact.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_73",
            "content": "Appendix A presents the proof of the theorem and provides a more detailed analysis, showing that our length-control algorithm, although being approximate inference, can generate a summary of the desired length properly. Compared with truncating an overlength output, our approach is able to generate more fluent and complete sentences. Also, our length-control algorithm is different from conventional beam search, shown in Appendix C.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_74",
            "content": "Experiments",
            "ntype": "title",
            "meta": {
                "section": "3"
            }
        },
        {
            "ix": "252-ARR_v2_75",
            "content": "Setup",
            "ntype": "title",
            "meta": {
                "section": "3.1"
            }
        },
        {
            "ix": "252-ARR_v2_76",
            "content": "Datasets. We evaluated our NAUS model on Gigaword headline generation and DUC2004 datasets.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_77",
            "content": "The headline generation dataset (Rush et al., 2015) is constructed from the Gigaword news corpus (Graff et al., 2003), where the first sentence of a news article is considered as input text and the news title is considered as the summary. The dataset contains 3.8M/198K/1951 samples for training/validation/test. Based on the analysis of the training size in Appendix B, we used 3M samples for training NAUS.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_78",
            "content": "It should be emphasized that, when NAUS learns from search, we only use the input of the training corpus: we perform search (Schumann et al., 2020) for each input, and train our NAUS from the search results. Therefore, we do not utilize any labeled parallel data, and our approach is unsupervised.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_79",
            "content": "Moreover, we considered two settings with desired summary lengths of 8 and 10, following Schumann et al. (2020). Our NAUS is trained from respective search results.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_80",
            "content": "The DUC2004 dataset (Over and Yen, 2004) is designed for testing only with 500 samples, where we also take the first sentence of an article as the input text. Our NAUS is transferred from the above headline generation corpus. Based on the length of DUC2004 summaries, we trained NAUS from search results with 13 words, also following Schumann et al. ( 2020) for fair comparison.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_81",
            "content": "Evaluation Metrics. We evaluated the quality of predicted summaries by ROUGE scores 2 (Lin, 2004), which are the most widely used metrics in previous work (Wang and Lee, 2018;Baziotis et al., 2019;Zhou and Rush, 2019). Specifically, ROUGE-n evaluates n-gram overlap between a predicted summary and its reference summary; ROUGE-L, instead, measures the longest common sequence between the predicted and reference summaries.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_82",
            "content": "Different ROUGE variants are adopted in previous work, depending on the dataset. We followed the standard evaluation scripts and evaluated headline generation by ROUGE F1 (Wang and Lee, 2018;Baziotis et al., 2019;Schumann et al., 2020) and DUC2004 by Truncate ROUGE Recall (Dorr et al., 2003;West et al., 2019).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_83",
            "content": "In addition to summary quality, we also evaluated the inference efficiency of different methods, as it is important for the deployment of deep learning models in real-time applications. We report the average inference time in seconds for each data sample, and compare the speedup with Schumann et al. (2020)'s search approach, which achieves (previous) state-of-the-art ROUGE scores. Our experiments were conducted on an i9-9940X CPU and an RTX6000 graphic card. Appendix B presents additional implementation details.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_84",
            "content": "Results and Analyses",
            "ntype": "title",
            "meta": {
                "section": "3.2"
            }
        },
        {
            "ix": "252-ARR_v2_85",
            "content": "Main Results. Table 1 presents the performance of our model and baselines on the Gigaword headline test set. For a fair comparison, we categorize all approaches by average summary lengths of ~8 and ~10 into Groups A and B, respectively.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_86",
            "content": "The Lead baseline extracts the first several words of the input sentence. Despite its simplicity, the Lead approach is a strong summarization baseline adopted in most previous work (F\u00e9vry and Phang, 2018;Baziotis et al., 2019). Wang and Lee (2018) utilize cycle consistency (Miao and Blunsom, 2016) for unsupervised summarization; the performance is relatively low, because the cycle consistency loss cannot ensure the generated text is a valid summary. Zhou and Rush (2019) perform beam search towards a stepby-step decomposable score of fluency and contextual matching. Both are unable to explicitly control the summary length: in a fair comparison of length 10 (Group B, Table 1), their performance is worse than the (previous) state-of-the-art approach (Schumann et al., 2020), 3 which performs edit-based local search.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_87",
            "content": "Our NAUS approach follows Schumann et al. ( 2020), but trains a non-autoregressive model from search results. We consider two settings for controlling the summary length: truncating longer summaries and decoding with our proposed lengthcontrol algorithm. Both of our variants outperform Schumann et al. ( 2020) by 1.21-2.73 in terms of the total ROUGE score (Rows 5-6 & 13-14, Table 1). As mentioned, Schumann et al. (2020) only extract original words with order preserved, yielding noisy sentences. Our NAUS, as a student, learns from the search-based teacher model and is able to smooth out its noise. This is a compelling result, as our student model outperforms its teacher.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_88",
            "content": "Regarding inference efficiency, our NAUS method with truncating is more than 1300 times faster than Schumann et al. (2020), because we do not need iterative search. Even with dynamic programming and beam search for length control, NAUS is still over 100 times faster. This shows our NAUS is extremely efficient in inference, which is important for real-time applications.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_89",
            "content": "Although the efficiency of Wang and Lee (2018) and Zhou and Rush (2019) is not available, we still expect our approach to be a few times faster (despite our higher ROUGE scores) because their models are autoregressive. By contrast, our NAUS is non-autoregressive, meaning that it predicts all words simultaneously. We will provide a controlled comparison between autoregressive and nonautoregressive models in Table 3.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_90",
            "content": "Table 2 shows the results on the DUC2004 dataset. The cycle-consistency approach (Bazio- jic et al., 2004) and the state-of-the-art edit-based search (Schumann et al., 2020).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_91",
            "content": "The performance of our NAUS model is consistent with Table 1, outperforming all previous methods in terms of the total ROUGE score, and being 100-1000 times faster than the search approach (Schumann et al., 2020).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_92",
            "content": "In general, the proposed NAUS not only achieves state-of-the-art ROUGE scores for unsupervised summarization, but also is more efficient when deployed. Results are consistent on both datasets, demonstrating the generality of our NAUS.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_93",
            "content": "In-Depth Analyses. We conduct in-depth analyses on the proposed NAUS model in Table 3. Due to the limit of time and space, we chose the Gigaword headline generation as our testbed. All the autoregressive (AR) and non-autoregressive (NAR) variants learn from the search output of our replication (Rows 2 & 11), where we achieve very close results to those reported in Schumann et al. (2020).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_94",
            "content": "We first tried vanilla encoder-decoder NAR Transformer (Rows 4 & 13, Gu et al., 2018), where we set the number of decoding slots as the desired summary length; thus, the blank token and the length-control algorithm are not needed. As seen, a vanilla NAR model does not perform well, and CTC largely outperforms vanilla NAR in both groups (Rows 5-6 & 14-15). Such results are highly consistent with the translation literature Gu and Kong, 2021;Qian et al., 2021;Huang et al., 2022).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_95",
            "content": "The proposed encoder-only NAUS model outperforms encoder-decoder ones in both groups in terms of the total ROUGE score, when the summary length is controlled by either truncating or length-control decoding (Rows 8-9 & 17-18). Profoundly, our non-autoregressive NAUS is even better than the autoregressive Transformer (Rows 3 & 12). We also experimented with previous nonautoregressive work for supervised summarization (Su et al., 2021) 4 in our learning-from-search setting. Although their approach appears to be encoder-only, it adds end-of-sequence (EOS) tokens at the end of the generation, and thus is unable to utilize the input-output correspondence. Their performance is higher than vanilla NAR models, but lower than ours. By contrast, NAUS is able to capture such correspondence with the residual connections, i.e., Eqns. ( 2) and (3), in its encoder-only architecture.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_96",
            "content": "Generally, the efficiency of encoder-only NAR 5 (without length-control decoding) is ~2 times faster than encoder-decoder NAR and ~20 times faster than the AR Transformer.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_97",
            "content": "Further, our length-control decoding improves the total ROUGE score, compared with truncating, for both encoder-decoder CTC and encoder-only NAUS models (Rows 6, 9, 15, & 18), although its dynamic programming is slower. Nevertheless, our non-autoregressive NAUS with length control is ~200 times faster than search and ~3 times faster than the AR Transformer.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_98",
            "content": "Additional Results. We present additional results in our appendices:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_99",
            "content": "Related Work",
            "ntype": "title",
            "meta": {
                "section": "4"
            }
        },
        {
            "ix": "252-ARR_v2_100",
            "content": "Summarization systems can be generally categorized into two paradigms: extractive and abstractive. Extractive systems extract certain sentences and clauses from input, for example, based on salient features (Zhou and Rush, 2019) or feature construction (He et al., 2012). Abstraction systems generate new utterances as the summary, e.g., by sequence-to-sequence models trained in a supervised way (Zhang et al., 2020;Liu et al., 2021b).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_101",
            "content": "Recently, unsupervised abstractive summarization is attracting increasing attention. Yang et al. (2020) propose to use the Lead baseline (first several sentences) as the pseudo-groundtruth. However, such an approach only works with wellstructured articles (such as CNN/DailyMail). Wang and Lee (2018) and Baziotis et al. (2019) use cycle consistency for unsupervised summarization. Zhou and Rush (2019) propose a step-by-step decomposable scoring function and perform beam search for summary generation. Schumann et al. (2020) propose an edit-based local search approach, which allows a more comprehensive scoring function and outperforms cycle consistency and beam search.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_102",
            "content": "Our paper follows Schumann et al. ( 2020) but trains a machine learning model to improve efficiency and smooth out search noise. Previously, Li et al. (2020) fine-tune a GPT-2 model based on search results for unsupervised paraphrasing; Jolly et al. (2022) adopt the search-and-learning framework to improve the semantic coverage for few-shot data-to-text generation. We extend previous work in a non-trivial way by designing a non-autoregressive generator and further proposing a length-control decoding algorithm.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_103",
            "content": "The importance of controlling the output length is recently realized in the summarization community. Baziotis et al. (2019) and Su et al. (2021) adopt soft penalty to encourage shorter sentences; Yang et al. (2021) and control the summary length through POS tag and EOS predictions. None of these studies can control the length explicitly. Song et al. (2021) is able to precisely control the length by progressively filling a predetermined number of decoding slots, analogous to the vanilla NAR model in our non-autoregressive setting.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_104",
            "content": "Non-autoregressive generation is originally proposed for machine translation (Gu et al., 2018;Guo et al., 2020;, which is later extended to other text generation tasks. Wiseman et al. (2018) address the table-to-text generation task, and model output segments by a hidden semi-Markov model (Ostendorf et al., 1996), simultaneously generating tokens for all segments. Jia et al. (2021) apply non-autoregressive models to extractive document-level summarization. Su et al. (2021) stack a non-autoregressive BERT model with a conditional random field (CRF) for abstractive summarization; since the summary is shorter than the input text, their approach puts multiple end-to-sequence (EOS) tokens at the end of the sentence, and thus is unable to utilize the strong input-output correspondence in the summarization task. Yang et al. (2021) apply auxiliary part-ofspeech (POS) loss and explore pretraining strategies for encoder-decoder nonautoregressive summarization. All these studies concern supervised summarization, while our paper focuses on unsupervised summarization. We adopt CTC training in our encoder-only architecture, allowing blank tokens to better align input and output words, which is more appropriate for summarization.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_105",
            "content": "Conclusion",
            "ntype": "title",
            "meta": {
                "section": "5"
            }
        },
        {
            "ix": "252-ARR_v2_106",
            "content": "In this work, we propose a non-autoregressive unsupervised summarization model (NAUS), where we further propose a length-control decoding algorithm based on dynamic programming. Experiments show that NAUS not only archives stateof-the-art unsupervised performance on Gigaword headline generation and DUC2004 datasets, but also is much more efficient than search methods and autoregressive models. Appendices present additional analyses and length-transfer experiments.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_107",
            "content": "Limitation and Future Work. Our paper focuses on unsupervised summarization due to the importance of low-data applications. One limitation is that we have not obtained rigorous empirical results for supervised summarization, where the developed model may also work. This is because previous supervised summarization studies lack explicit categorization of summary lengths (Yang et al., 2020;, making comparisons unfair and problematic (Schumann et al., 2020). Such an observation is also evidenced by Su et al. (2021), where the same model may differ by a few ROUGE points when generating summaries of different lengths. Nevertheless, we have compared with Su et al. (2021) in our setting and show the superiority of the NAUS under fair comparison. We plan to explore supervised summarization in future work after we establish a rigorous experimental setup, which is beyond the scope of this paper.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_108",
            "content": "Acknowledgments",
            "ntype": "title",
            "meta": {
                "section": "6"
            }
        },
        {
            "ix": "252-ARR_v2_109",
            "content": "A Proof of Theorem 1 Theorem 1. (1) If repeating tokens are not merged, then the proposed length-control algorithm with beam size B = 1 finds the exact optimum B S,T being the most probable length-T sentence given by S prediction slots. (2) If we merge repeating tokens predicted by CTC-trained models, the above algorithm may not be exact.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_110",
            "content": "Proof. [Part (1)] This part concerns a variant of our decoding algorithm, which only removes the blank token but does not merge consecutive repeated tokens to a single word, i.e., Eqn. (10) is removed. We denote this by \u0393 , for example, \u0393 (a aabb ) = aaabb, as opposed to \u0393(a aabb ) = aab in our algorithm. We now show that, based on \u0393 , our dynamic programming algorithm in \u00a72.3 with beam size B = 1 is an exact inference algorithm.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_111",
            "content": "We define \u03b2 s,t = max b:|b|=s,|\u0393 (b)|=t P (b|x), where | \u2022 | denotes the length of a sequence. In other words, \u03b2 s,t is the maximum probability of s tokens that are reduced to t words.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_112",
            "content": "According to the definition, we have",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_113",
            "content": "\u03b2 1,0 = P (w 1 = |x) (13) \u03b2 1,1 = max w 1 = P (w 1 |x) (14) \u03b2 s,t = 0 for s > t(15)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_114",
            "content": "In ( 13), \u03b2 1,0 refers to the probability of one token that is reduced to zero words, in which case the first predicted token can only be the blank token , corresponding to Eqn. ( 9) with s = 1 and t = 0. Likewise, \u03b2 1,1 is the maximum probability of one token that is reduced to one word. Thus, it is the probability of the most probable non-token, corresponding to Eqn. ( 11) with s = 1 and t = 0. Eqn. ( 15) asserts that fewer tokens cannot be reduced to more words; it is used for mathematical derivations, but need not to be explicitly implemented in our algorithm in \u00a72.3. The recursion variable \u03b2 s,t is computed by",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_115",
            "content": "\u03b2 s,t = max \u03b2 s\u22121,t \u2022 P (w s = |x), \u03b2 s\u22121,t\u22121 \u2022 max ws = P (w s |x)(16)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_116",
            "content": "In other words, the variable \u03b2 s,t can inherit \u03b2 s\u22121,t with a predicted blank token , corresponding to Eqn. (9); or it can inherit \u03b2 s\u22121,t\u22121 with a predicted non-token, corresponding to Eqn. (11). Specially, if t = 0, then the second term has \u03b2 s\u22121,\u22121 undefined, and thus is ignored in the max operation.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_117",
            "content": "We need the max operator to take the higher probability in the two cases, since \u03b2 s,t is the maximum probability of s tokens being reduced to t words. This corresponds to Eqn. ( 12) with beam size B = 1.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_118",
            "content": "To sum up, our inductive calculation guarantees that \u03b2 S,T is the exact maximum probability of max b:|b|=S,|\u0393 (b)|=T P (b|x) for the desired length T with S generation slots; our algorithm (if not merging repeating tokens) gives the corresponding B S,T as argmax P (b|x) under the same constraints, concluding the proof of Part (1).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_119",
            "content": "[Part (2)] CTC training merges consecutive repeated tokens to a single word, unless separated by the blank token (Graves et al., 2006). Since our model is trained by CTC, we should adopt this rule in inference as well. We show in this part that our algorithm, with beam size B = 1, may not yield the exact optimum with an example in Table 4.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_120",
            "content": "We consider generating a sentence of two words Word P (w 1 |x) P (w 2 |x) I 0.39 0.1 like 0.4 0.9 coding 0.1 0 0.11 0 Table 4: An example of predicted probabilities of two generation slots, where we have a vocabulary of three words and a blank token .",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_121",
            "content": "from the two prediction slots, i.e., S = T = 2. Apparently, the optimal sequence is \"I like\" with probability 0.39 \u2022 0.9 = 0.351. However, the algorithm would predict B 1,1 = {\"like\"} because \"like\" is the most probably token in the first slot. Then, our algorithm will give B 2,2 = {\"like I\"}, because it has to select a non-repeating token based on \u0393, yielding a non-optimal solution.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_122",
            "content": "It is noted that, if we do not merge repeating tokens as in \u0393 , our algorithm will give the exact optimum \"like like\" in the above example. This shows that merging consecutive repeated tokens requires the decoding algorithm to correct early predictions, and thus, our dynamic programming becomes an approximate inference. Nevertheless, our algorithm is able to generate a sequence of the desired length properly; its approximation happens only when the algorithm compares more repetitions with fewer s versus more s with fewer repetitions. Such approximation is further alleviated by beam search in our dynamic programming. Therefore, the proposed length-control algorithm is better than truncating a longer sentence; especially, our approach generates more fluent and complete sentences.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_123",
            "content": "Our NAUS had a Transformer encoder as the basic structure, generally following the settings in Vaswani et al. (2017): 6 encoder layers, each having 8 attention heads. The dimension was 512 for attention and 2048 for feed-forward modules.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_124",
            "content": "Our training used a batch size of 4K tokens, with a maximum of 200K updates. We used Adam with \u03b2 = (0.9, 0.98). In general, the learning rate warmed up to 5e-4 in the first 10K steps, and then decayed to 1e-9 with the inverse square-root schedule, except that we find the maximum learning rate of 1e-4 worked better for headline generation with the summary length of 8. We set the 2 weight decay to 0.01. Our length-control decoding algorithm 1. Notice that NAUS is trained by pseudo-groundtruth given by unsupervised edit-based search (Schumann et al., 2020). Thus, our approach is indeed unsupervised. had a beam size of 6. More details can be found in our repository (Footnote 1).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_125",
            "content": "Our NAUS training is based on Schumann et al. ( 2020)'s prediction on the input of the Gigaword headline generation training set. We show performance against the number of training samples in Figure 3. As seen, NAUS outperforms its search teacher even with a small set of 0.1 million samples. The performance saturates as the number of samples increases. Based on this analysis, we used 3 million samples from the 3.8 million Gigaword training set to train our NAUS models.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_126",
            "content": "Each reported number in Tables 1-3 were averaged over 10 independent runs, whereas the results in Table 7 (Appendix F) were based on a single run due to the limited time.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_127",
            "content": "As mentioned, our length-control decoding algorithm involves beam search within its dynamic programming, because the algorithm does not find the exact optimum when it merges repeating words. We analyze the effect of the beam size in our lengthcontrol algorithm.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_128",
            "content": "In addition, we compare our approach with CTC beam search (Graves et al., 2006). 6 Typically, a CTC-trained non-autoregressive model can be decoded either greedily or by beam search. The greedy decoding finds the most probable token at each step, i.e., w * i = argmax w i P (w i |x), and reduces the tokens to a sentence by \u0393(w 1 , \u2022 \u2022 \u2022 , w T ), where T is the number of decoding steps. The CTC beam search algorithm searches for the most likely sentence by marginalizing all token sequences that are reduced to y, i.e., argmax y w:\u0393(w)=y P (w|x). We show results in Figure 4, where we chose 10word Gigaword headline generation as the testbed with our NAUS model (Group B, Table 1). Notice that CTC beam search does not control the output length, and for fair comparison, we truncated its generated summaries. This also shows that our novel decoding approach and CTC beam search are distinct algorithms.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_129",
            "content": "As seen in Figure 4a, the beam search does play a role in our length-control algorithm. When the beam enlarges from 1 to 6, the performance (orange solid line) increases by 1.2 points in \u2206R, the difference of total ROUGE in comparison with Schumann et al. (2020) under our replication (Row 10, Table 1). However, further increasing the beam size does not yield additional performance gain. This is consistent with previous literature in autoregressive generation (Meister et al., 2020), which also suggests a beam size of 5-7 is the best in their applications. In terms of the efficiency (Figure 4b), a larger beam size monotonically increases the inference time. However, the overhead of beam search is relatively small in our dynamic programming, and thus we chose a beam size of 6 in our experiments.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_130",
            "content": "Our length-control algorithm significantly outperforms CTC beam search (dashed blue lines) in terms of both \u2206R and efficiency. Especially, CTC beam search is three times slower, and degrades more significantly than our length-control decoding when the beam size increases.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_131",
            "content": "We show in Table 6 example summaries generated by our NAUS with truncating and length-control decoding, as well as the previous state-of-the-art method (Schumann et al., 2020). We observe that NAUS without length control generates slightly longer summaries, and if truncated, the output may be incomplete; by contrast, our length-control algo- 2020), our NAUS (length control) generates a more informative summary that includes the main clause (united nations condemned), which also appears in the reference summary.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_132",
            "content": "We conducted human evaluation with a focus on truncating and length-control decodings. This is because truncating may generate incomplete sentences, which cannot be adequately evaluated by automatic metrics as their ROUGE scores are close.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_133",
            "content": "Specifically, we invited three human annotators to compare the two decoding algorithms for NAUS on 50 randomly selected samples, in the setting of Group B, Table 1 (Gigaword headline generation with a target length of 10). The annotation was conducted in a pairwise manner in terms of overall quality and fluency/completeness; average results (wins/loses/ties) are shown in Table 4. It should be mentioned that our annotation was strictly blind: the samples of two systems were presented in random order and annotators did not know which system generated a sample.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_134",
            "content": "As seen, our length-control decoding algorithm largely outperforms the truncating approach in terms of both the overall quality and fluency/completeness. The results are statistically significant (p-values < 0.01) in a one-sided binomial test. This verifies that length-control decoding is important for summarization, as truncating yields incomplete sentences, which are inadequately reflected by ROUGE scores.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_135",
            "content": "In the main paper, we present results where our NAUS is trained on search outputs (Schumann et al., 2020) that have the same length as the inference target. This follows the common assumption in machine learning that training and test samples are independently identically distributed.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_136",
            "content": "In this appendix, we show the performance of length-transfer summary generation, where the prediction has a different length from that of training. We denote such a model by NAUS i\u2192j , referring to training with i words and testing for j words.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_137",
            "content": "As seen in Groups A & B in Table 7, NAUS with length transfer is slightly worse than NAUS trained on the correct length, which is understandable. Nevertheless, length-transfer decoding still outperforms the search teacher and other baselines.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_138",
            "content": "Moreover, we consider the third setting in Schumann et al. (2020), where the target length is 50% of the input. Since it takes time to obtain pseudogroundtruths given by the edit-based search, we would directly transfer already trained NAUS models to this setting by our length-control decoding. Results are shown in Group C, Table 7. We observe NASU 10\u219250% is better than NASU 8\u219250% , which makes much sense because the latter has a larger gap during transfer. Remarkably, both NASU 8\u219250% and NASU 10\u219250% outperform Schumann et al. (2020) and other baselines, achieving new state-of-the-art unsupervised performance on this setting as well.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_139",
            "content": "We further compare with Su et al. (2021), who use a length penalty to encourage short summaries. However, their length control works in the statistical sense but may fail for individual samples. Moreover, such a soft length penalty cannot generate longer summaries than trained. Even in the setting of 10 \u2192 8, their generates summaries are slightly longer than required, while the performance degrades much more considerably than NAUS.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_140",
            "content": "These results show that our novel length-control decoding algorithm is not only effective when generating summaries of similar length to the training targets, but also generalizes well to different \u2020 Results quoted from previous papers; others are given by our experiments. Su et al. (2021)'s approach has a soft length penalty to encourage short output, but cannot generate longer summaries than trained.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_141",
            "content": "desired summary lengths without re-training. In general, our NAUS is an effective and efficient unsupervised summarization system with the ability of explicit length control.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "252-ARR_v2_142",
            "content": "Armen Aghajanyan, Anchit Gupta, Akshat Shrivastava, Xilun Chen, Luke Zettlemoyer, Sonal Gupta, Muppet: Massive multi-task representations with pre-finetuning, 2021, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b0",
                "authors": [
                    "Armen Aghajanyan",
                    "Anchit Gupta",
                    "Akshat Shrivastava",
                    "Xilun Chen",
                    "Luke Zettlemoyer",
                    "Sonal Gupta"
                ],
                "title": "Muppet: Massive multi-task representations with pre-finetuning",
                "pub_date": "2021",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_143",
            "content": "Armen Aghajanyan, Akshat Shrivastava, Anchit Gupta, Naman Goyal, Luke Zettlemoyer, Sonal Gupta, Better fine-tuning by reducing representational collapse, 2020, ICLR, .",
            "ntype": "ref",
            "meta": {
                "xid": "b1",
                "authors": [
                    "Armen Aghajanyan",
                    "Akshat Shrivastava",
                    "Anchit Gupta",
                    "Naman Goyal",
                    "Luke Zettlemoyer",
                    "Sonal Gupta"
                ],
                "title": "Better fine-tuning by reducing representational collapse",
                "pub_date": "2020",
                "pub_title": "ICLR",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_144",
            "content": "Christos Baziotis, Ion Androutsopoulos, SEQ3: Differentiable sequence-to-sequence-to-sequence autoencoder for unsupervised abstractive sentence compression, 2019, NAACL-HLT, .",
            "ntype": "ref",
            "meta": {
                "xid": "b2",
                "authors": [
                    "Christos Baziotis",
                    "Ion Androutsopoulos"
                ],
                "title": "SEQ3: Differentiable sequence-to-sequence-to-sequence autoencoder for unsupervised abstractive sentence compression",
                "pub_date": "2019",
                "pub_title": "NAACL-HLT",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_145",
            "content": "William Chan, Chitwan Saharia, Geoffrey Hinton, Mohammad Norouzi, Navdeep Jaitly, Imputer: Sequence modelling via imputation and dynamic programming, 2020, ICML, .",
            "ntype": "ref",
            "meta": {
                "xid": "b3",
                "authors": [
                    "William Chan",
                    "Chitwan Saharia",
                    "Geoffrey Hinton",
                    "Mohammad Norouzi",
                    "Navdeep Jaitly"
                ],
                "title": "Imputer: Sequence modelling via imputation and dynamic programming",
                "pub_date": "2020",
                "pub_title": "ICML",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_146",
            "content": "Bonnie Dorr, David Zajic, Richard Schwartz, Hedge trimmer: A parse-and-trim approach to headline generation, 2003, Proc. HLT-NAACL 03 Text Summarization Workshop, .",
            "ntype": "ref",
            "meta": {
                "xid": "b4",
                "authors": [
                    "Bonnie Dorr",
                    "David Zajic",
                    "Richard Schwartz"
                ],
                "title": "Hedge trimmer: A parse-and-trim approach to headline generation",
                "pub_date": "2003",
                "pub_title": "Proc. HLT-NAACL 03 Text Summarization Workshop",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_147",
            "content": "Thibault F\u00e9vry, Jason Phang, Unsupervised sentence compression using denoising autoencoders, 2018, CoNLL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b5",
                "authors": [
                    "Thibault F\u00e9vry",
                    "Jason Phang"
                ],
                "title": "Unsupervised sentence compression using denoising autoencoders",
                "pub_date": "2018",
                "pub_title": "CoNLL",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_148",
            "content": "Katja Filippova, Enrique Alfonseca, Carlos Colmenares, Lukasz Kaiser, Oriol Vinyals, Sentence compression by deletion with LSTMs, 2015, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b6",
                "authors": [
                    "Katja Filippova",
                    "Enrique Alfonseca",
                    "Carlos Colmenares",
                    "Lukasz Kaiser",
                    "Oriol Vinyals"
                ],
                "title": "Sentence compression by deletion with LSTMs",
                "pub_date": "2015",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_149",
            "content": "UNKNOWN, None, 2003, , English Gigaword. Linguistic Data Consortium.",
            "ntype": "ref",
            "meta": {
                "xid": "b7",
                "authors": null,
                "title": null,
                "pub_date": "2003",
                "pub_title": null,
                "pub": "English Gigaword. Linguistic Data Consortium"
            }
        },
        {
            "ix": "252-ARR_v2_150",
            "content": "Alex Graves, Santiago Fern\u00e1ndez, Faustino Gomez, J\u00fcrgen Schmidhuber, Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural networks, 2006, ICML, .",
            "ntype": "ref",
            "meta": {
                "xid": "b8",
                "authors": [
                    "Alex Graves",
                    "Santiago Fern\u00e1ndez",
                    "Faustino Gomez",
                    "J\u00fcrgen Schmidhuber"
                ],
                "title": "Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural networks",
                "pub_date": "2006",
                "pub_title": "ICML",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_151",
            "content": "Jiatao Gu, James Bradbury, Caiming Xiong, O Victor, Richard Li,  Socher, Non-autoregressive neural machine translation, 2018, ICLR, .",
            "ntype": "ref",
            "meta": {
                "xid": "b9",
                "authors": [
                    "Jiatao Gu",
                    "James Bradbury",
                    "Caiming Xiong",
                    "O Victor",
                    "Richard Li",
                    " Socher"
                ],
                "title": "Non-autoregressive neural machine translation",
                "pub_date": "2018",
                "pub_title": "ICLR",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_152",
            "content": "Jiatao Gu, Xiang Kong, Fully nonautoregressive neural machine translation: tricks of the trade, 2021, Findings of ACL-IJCNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b10",
                "authors": [
                    "Jiatao Gu",
                    "Xiang Kong"
                ],
                "title": "Fully nonautoregressive neural machine translation: tricks of the trade",
                "pub_date": "2021",
                "pub_title": "Findings of ACL-IJCNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_153",
            "content": "Junliang Guo, Xu Tan, Linli Xu, Tao Qin, Enhong Chen, Tie-Yan Liu, Fine-tuning by curriculum learning for non-autoregressive neural machine translation, 2020, AAAI, .",
            "ntype": "ref",
            "meta": {
                "xid": "b11",
                "authors": [
                    "Junliang Guo",
                    "Xu Tan",
                    "Linli Xu",
                    "Tao Qin",
                    "Enhong Chen",
                    "Tie-Yan Liu"
                ],
                "title": "Fine-tuning by curriculum learning for non-autoregressive neural machine translation",
                "pub_date": "2020",
                "pub_title": "AAAI",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_154",
            "content": "Zhanying He, Chun Chen, Jiajun Bu, Can Wang, Lijun Zhang, Deng Cai, Xiaofei He, Document summarization based on data reconstruction, 2012, AAAI, .",
            "ntype": "ref",
            "meta": {
                "xid": "b12",
                "authors": [
                    "Zhanying He",
                    "Chun Chen",
                    "Jiajun Bu",
                    "Can Wang",
                    "Lijun Zhang",
                    "Deng Cai",
                    "Xiaofei He"
                ],
                "title": "Document summarization based on data reconstruction",
                "pub_date": "2012",
                "pub_title": "AAAI",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_155",
            "content": "Chenyang Huang, Hao Zhou, Lili Osmar R Za\u00efane, Lei Mou,  Li, Non-autoregressive translation with layer-wise prediction and deep supervision, 2022, AAAI, .",
            "ntype": "ref",
            "meta": {
                "xid": "b13",
                "authors": [
                    "Chenyang Huang",
                    "Hao Zhou",
                    "Lili Osmar R Za\u00efane",
                    "Lei Mou",
                    " Li"
                ],
                "title": "Non-autoregressive translation with layer-wise prediction and deep supervision",
                "pub_date": "2022",
                "pub_title": "AAAI",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_156",
            "content": "Ruipeng Jia, Yanan Cao, Haichao Shi, Fang Fang, Pengfei Yin, Shi Wang, Flexible nonautoregressive extractive summarization with threshold: How to extract a non-fixed number of summary sentences, 2021, AAAI, .",
            "ntype": "ref",
            "meta": {
                "xid": "b14",
                "authors": [
                    "Ruipeng Jia",
                    "Yanan Cao",
                    "Haichao Shi",
                    "Fang Fang",
                    "Pengfei Yin",
                    "Shi Wang"
                ],
                "title": "Flexible nonautoregressive extractive summarization with threshold: How to extract a non-fixed number of summary sentences",
                "pub_date": "2021",
                "pub_title": "AAAI",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_157",
            "content": "Shailza Jolly, Xuan Zi, Andreas Zhang, Lili Dengel,  Mou, Search and learn: Improving semantic coverage for data-to-text generation, 2022, AAAI, .",
            "ntype": "ref",
            "meta": {
                "xid": "b15",
                "authors": [
                    "Shailza Jolly",
                    "Xuan Zi",
                    "Andreas Zhang",
                    "Lili Dengel",
                    " Mou"
                ],
                "title": "Search and learn: Improving semantic coverage for data-to-text generation",
                "pub_date": "2022",
                "pub_title": "AAAI",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_158",
            "content": "Julia Kreutzer, Stefan Riezler, Carolin Lawrence, Offline reinforcement learning from human feedback in real-world sequence-to-sequence tasks, 2021, Proc. Workshop on Structured Prediction for NLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b16",
                "authors": [
                    "Julia Kreutzer",
                    "Stefan Riezler",
                    "Carolin Lawrence"
                ],
                "title": "Offline reinforcement learning from human feedback in real-world sequence-to-sequence tasks",
                "pub_date": "2021",
                "pub_title": "Proc. Workshop on Structured Prediction for NLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_159",
            "content": "Dhruv Kumar, Lili Mou, Lukasz Golab, Olga Vechtomova, Iterative edit-based unsupervised sentence simplification, 2020, ACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b17",
                "authors": [
                    "Dhruv Kumar",
                    "Lili Mou",
                    "Lukasz Golab",
                    "Olga Vechtomova"
                ],
                "title": "Iterative edit-based unsupervised sentence simplification",
                "pub_date": "2020",
                "pub_title": "ACL",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_160",
            "content": "Jason Lee, Elman Mansimov, Kyunghyun Cho, Deterministic non-autoregressive neural sequence modeling by iterative refinement, 2018, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b18",
                "authors": [
                    "Jason Lee",
                    "Elman Mansimov",
                    "Kyunghyun Cho"
                ],
                "title": "Deterministic non-autoregressive neural sequence modeling by iterative refinement",
                "pub_date": "2018",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_161",
            "content": "Jingjing Li, Zichao Li, Lili Mou, Xin Jiang, Michael Lyu, Irwin King, Unsupervised text generation by learning from search, 2020, NeurIPS, .",
            "ntype": "ref",
            "meta": {
                "xid": "b19",
                "authors": [
                    "Jingjing Li",
                    "Zichao Li",
                    "Lili Mou",
                    "Xin Jiang",
                    "Michael Lyu",
                    "Irwin King"
                ],
                "title": "Unsupervised text generation by learning from search",
                "pub_date": "2020",
                "pub_title": "NeurIPS",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_162",
            "content": "Chin-Yew Lin, ROUGE: A package for automatic evaluation of summaries, 2004, Text Summarization Branches Out, .",
            "ntype": "ref",
            "meta": {
                "xid": "b20",
                "authors": [
                    "Chin-Yew Lin"
                ],
                "title": "ROUGE: A package for automatic evaluation of summaries",
                "pub_date": "2004",
                "pub_title": "Text Summarization Branches Out",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_163",
            "content": "Xianggen Liu, Pengyong Li, Fandong Meng, Hao Zhou, Huasong Zhong, Jie Zhou, Lili Mou, Sen Song, Simulated annealing for optimization of graphs and sequences, 2021, Neurocomputing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b21",
                "authors": [
                    "Xianggen Liu",
                    "Pengyong Li",
                    "Fandong Meng",
                    "Hao Zhou",
                    "Huasong Zhong",
                    "Jie Zhou",
                    "Lili Mou",
                    "Sen Song"
                ],
                "title": "Simulated annealing for optimization of graphs and sequences",
                "pub_date": "2021",
                "pub_title": "Neurocomputing",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_164",
            "content": "Xianggen Liu, Lili Mou, Fandong Meng, Hao Zhou, Jie Zhou, Sen Song, Unsupervised paraphrasing by simulated annealing, 2020, ACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b22",
                "authors": [
                    "Xianggen Liu",
                    "Lili Mou",
                    "Fandong Meng",
                    "Hao Zhou",
                    "Jie Zhou",
                    "Sen Song"
                ],
                "title": "Unsupervised paraphrasing by simulated annealing",
                "pub_date": "2020",
                "pub_title": "ACL",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_165",
            "content": "UNKNOWN, None, 2021, Ref-Sum: Refactoring neural summarization. In ACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b23",
                "authors": null,
                "title": null,
                "pub_date": "2021",
                "pub_title": "Ref-Sum: Refactoring neural summarization. In ACL",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_166",
            "content": "Clara Meister, Ryan Cotterell, Tim Vieira, If beam search is the answer, what was the question?, 2020, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b24",
                "authors": [
                    "Clara Meister",
                    "Ryan Cotterell",
                    "Tim Vieira"
                ],
                "title": "If beam search is the answer, what was the question?",
                "pub_date": "2020",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_167",
            "content": "Yishu Miao, Phil Blunsom, Language as a latent variable: Discrete generative models for sentence compression, 2016, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b25",
                "authors": [
                    "Yishu Miao",
                    "Phil Blunsom"
                ],
                "title": "Language as a latent variable: Discrete generative models for sentence compression",
                "pub_date": "2016",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_168",
            "content": "Ani Nenkova, Sameer Maskey, Yang Liu, Automatic summarization, 2011, ACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b26",
                "authors": [
                    "Ani Nenkova",
                    "Sameer Maskey",
                    "Yang Liu"
                ],
                "title": "Automatic summarization",
                "pub_date": "2011",
                "pub_title": "ACL",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_169",
            "content": "Mari Ostendorf, V Vassilios, Owen A Digalakis,  Kimball, From hmm's to segment models: A unified view of stochastic modeling for speech recognition, 1996, IEEE TASLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b27",
                "authors": [
                    "Mari Ostendorf",
                    "V Vassilios",
                    "Owen A Digalakis",
                    " Kimball"
                ],
                "title": "From hmm's to segment models: A unified view of stochastic modeling for speech recognition",
                "pub_date": "1996",
                "pub_title": "IEEE TASLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_170",
            "content": "Paul Over, James Yen, An introduction to DUC-2004: Intrinsic evaluation of generic news text summarization systems, 2004, Proc. the Document Understanding Conference, .",
            "ntype": "ref",
            "meta": {
                "xid": "b28",
                "authors": [
                    "Paul Over",
                    "James Yen"
                ],
                "title": "An introduction to DUC-2004: Intrinsic evaluation of generic news text summarization systems",
                "pub_date": "2004",
                "pub_title": "Proc. the Document Understanding Conference",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_171",
            "content": "Weizhen Qi, Yeyun Gong, Jian Jiao, Yu Yan, Weizhu Chen, Dayiheng Liu, Kewen Tang, Houqiang Li, Jiusheng Chen, Ruofei Zhang, Ming Zhou, Nan Duan, Bang: Bridging autoregressive and non-autoregressive generation with large scale pretraining, 2021, ICML, .",
            "ntype": "ref",
            "meta": {
                "xid": "b29",
                "authors": [
                    "Weizhen Qi",
                    "Yeyun Gong",
                    "Jian Jiao",
                    "Yu Yan",
                    "Weizhu Chen",
                    "Dayiheng Liu",
                    "Kewen Tang",
                    "Houqiang Li",
                    "Jiusheng Chen",
                    "Ruofei Zhang",
                    "Ming Zhou",
                    "Nan Duan"
                ],
                "title": "Bang: Bridging autoregressive and non-autoregressive generation with large scale pretraining",
                "pub_date": "2021",
                "pub_title": "ICML",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_172",
            "content": "Lihua Qian, Hao Zhou, Yu Bao, Mingxuan Wang, Lin Qiu, Weinan Zhang, Yong Yu, Lei Li, Glancing transformer for non-autoregressive neural machine translation, 2021, ACL-IJCNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b30",
                "authors": [
                    "Lihua Qian",
                    "Hao Zhou",
                    "Yu Bao",
                    "Mingxuan Wang",
                    "Lin Qiu",
                    "Weinan Zhang",
                    "Yong Yu",
                    "Lei Li"
                ],
                "title": "Glancing transformer for non-autoregressive neural machine translation",
                "pub_date": "2021",
                "pub_title": "ACL-IJCNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_173",
            "content": "Alexander Rush, Sumit Chopra, Jason Weston, A neural attention model for abstractive sentence summarization, 2015, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b31",
                "authors": [
                    "Alexander Rush",
                    "Sumit Chopra",
                    "Jason Weston"
                ],
                "title": "A neural attention model for abstractive sentence summarization",
                "pub_date": "2015",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_174",
            "content": "Chitwan Saharia, William Chan, Saurabh Saxena, Mohammad Norouzi, Non-autoregressive machine translation with latent alignments, 2020, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b32",
                "authors": [
                    "Chitwan Saharia",
                    "William Chan",
                    "Saurabh Saxena",
                    "Mohammad Norouzi"
                ],
                "title": "Non-autoregressive machine translation with latent alignments",
                "pub_date": "2020",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_175",
            "content": "Raphael Schumann, Lili Mou, Yao Lu, Olga Vechtomova, and Katja Markert. 2020. Discrete optimization for unsupervised sentence summarization with word-level extraction, , ACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b33",
                "authors": [
                    "Raphael Schumann",
                    "Lili Mou",
                    "Yao Lu"
                ],
                "title": "Olga Vechtomova, and Katja Markert. 2020. Discrete optimization for unsupervised sentence summarization with word-level extraction",
                "pub_date": null,
                "pub_title": "ACL",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_176",
            "content": "Kaiqiang Song, Bingqing Wang, Zhe Feng, Fei Liu, A new approach to overgenerating and scoring abstractive summaries, 2021, NAACL-HLT, .",
            "ntype": "ref",
            "meta": {
                "xid": "b34",
                "authors": [
                    "Kaiqiang Song",
                    "Bingqing Wang",
                    "Zhe Feng",
                    "Fei Liu"
                ],
                "title": "A new approach to overgenerating and scoring abstractive summaries",
                "pub_date": "2021",
                "pub_title": "NAACL-HLT",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_177",
            "content": "Yixuan Su, Deng Cai, Yan Wang, David Vandyke, Simon Baker, Piji Li, Nigel Collier, Nonautoregressive text generation with pre-trained language models, 2021, EACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b35",
                "authors": [
                    "Yixuan Su",
                    "Deng Cai",
                    "Yan Wang",
                    "David Vandyke",
                    "Simon Baker",
                    "Piji Li",
                    "Nigel Collier"
                ],
                "title": "Nonautoregressive text generation with pre-trained language models",
                "pub_date": "2021",
                "pub_title": "EACL",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_178",
            "content": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan Gomez, \u0141ukasz Kaiser, Illia Polosukhin, Attention is all you need, 2017, NIPS, .",
            "ntype": "ref",
            "meta": {
                "xid": "b36",
                "authors": [
                    "Ashish Vaswani",
                    "Noam Shazeer",
                    "Niki Parmar",
                    "Jakob Uszkoreit",
                    "Llion Jones",
                    "Aidan Gomez",
                    "\u0141ukasz Kaiser",
                    "Illia Polosukhin"
                ],
                "title": "Attention is all you need",
                "pub_date": "2017",
                "pub_title": "NIPS",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_179",
            "content": "Yaushian Wang, Hung-Yi Lee, Learning to encode text as human-readable summaries using generative adversarial networks, 2018, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b37",
                "authors": [
                    "Yaushian Wang",
                    "Hung-Yi Lee"
                ],
                "title": "Learning to encode text as human-readable summaries using generative adversarial networks",
                "pub_date": "2018",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_180",
            "content": "Peter West, Ari Holtzman, BottleSum: Unsupervised and selfsupervised sentence summarization using the information bottleneck principle, 2019-01, EMNLP-IJCNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b38",
                "authors": [
                    "Peter West",
                    "Ari Holtzman"
                ],
                "title": "BottleSum: Unsupervised and selfsupervised sentence summarization using the information bottleneck principle",
                "pub_date": "2019-01",
                "pub_title": "EMNLP-IJCNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_181",
            "content": "Sam Wiseman, Stuart Shieber, Alexander Rush, Learning neural templates for text generation, 2018, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b39",
                "authors": [
                    "Sam Wiseman",
                    "Stuart Shieber",
                    "Alexander Rush"
                ],
                "title": "Learning neural templates for text generation",
                "pub_date": "2018",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_182",
            "content": "Kexin Yang, Wenqiang Lei, Dayiheng Liu, Weizhen Qi, Jiancheng Lv, POS-constrained parallel decoding for non-autoregressive generation, 2021, ACL-IJCNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b40",
                "authors": [
                    "Kexin Yang",
                    "Wenqiang Lei",
                    "Dayiheng Liu",
                    "Weizhen Qi",
                    "Jiancheng Lv"
                ],
                "title": "POS-constrained parallel decoding for non-autoregressive generation",
                "pub_date": "2021",
                "pub_title": "ACL-IJCNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_183",
            "content": "Ziyi Yang, Chenguang Zhu, Robert Gmyr, Michael Zeng, Xuedong Huang, Eric Darve, TED: A pretrained unsupervised summarization model with theme modeling and denoising, 2020, EMNLP, .",
            "ntype": "ref",
            "meta": {
                "xid": "b41",
                "authors": [
                    "Ziyi Yang",
                    "Chenguang Zhu",
                    "Robert Gmyr",
                    "Michael Zeng",
                    "Xuedong Huang",
                    "Eric Darve"
                ],
                "title": "TED: A pretrained unsupervised summarization model with theme modeling and denoising",
                "pub_date": "2020",
                "pub_title": "EMNLP",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_184",
            "content": "David Zajic, Bonnie Dorr, Richard Schwartz, BBN/UMD at DUC-2004: Topiary, 2004, Proc. HLT-NAACL Document Understanding Workshop, .",
            "ntype": "ref",
            "meta": {
                "xid": "b42",
                "authors": [
                    "David Zajic",
                    "Bonnie Dorr",
                    "Richard Schwartz"
                ],
                "title": "BBN/UMD at DUC-2004: Topiary",
                "pub_date": "2004",
                "pub_title": "Proc. HLT-NAACL Document Understanding Workshop",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_185",
            "content": "Jingqing Zhang, Yao Zhao, Mohammad Saleh, Peter Liu, PEGASUS: Pre-training with extracted gap-sentences for abstractive summarization, 2020, ICML, .",
            "ntype": "ref",
            "meta": {
                "xid": "b43",
                "authors": [
                    "Jingqing Zhang",
                    "Yao Zhao",
                    "Mohammad Saleh",
                    "Peter Liu"
                ],
                "title": "PEGASUS: Pre-training with extracted gap-sentences for abstractive summarization",
                "pub_date": "2020",
                "pub_title": "ICML",
                "pub": null
            }
        },
        {
            "ix": "252-ARR_v2_186",
            "content": "Jiawei Zhou, Alexander Rush, Simple unsupervised summarization by contextual matching, 2019, ACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b44",
                "authors": [
                    "Jiawei Zhou",
                    "Alexander Rush"
                ],
                "title": "Simple unsupervised summarization by contextual matching",
                "pub_date": "2019",
                "pub_title": "ACL",
                "pub": null
            }
        }
    ],
    "span_nodes": [
        {
            "ix": "252-ARR_v2_0@0",
            "content": "Learning Non-Autoregressive Models from Search for Unsupervised Sentence Summarization",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_0",
            "start": 0,
            "end": 85,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_1@0",
            "content": "Abstract",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_1",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@0",
            "content": "Text summarization aims to generate a short summary for an input text.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 0,
            "end": 69,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@1",
            "content": "In this work, we propose a Non-Autoregressive Unsupervised Summarization (NAUS) approach, which does not require parallel data for training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 71,
            "end": 210,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@2",
            "content": "Our NAUS first performs edit-based search towards a heuristically defined score, and generates a summary as pseudo-groundtruth.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 212,
            "end": 338,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@3",
            "content": "Then, we train an encoder-only non-autoregressive Transformer based on the search result.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 340,
            "end": 428,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@4",
            "content": "We also propose a dynamic programming approach for length-control decoding, which is important for the summarization task.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 430,
            "end": 551,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@5",
            "content": "Experiments on two datasets show that NAUS achieves state-of-the-art performance for unsupervised summarization, yet largely improving inference efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 553,
            "end": 708,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@6",
            "content": "Further, our algorithm is able to perform explicit length-transfer summary generation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 710,
            "end": 795,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_2@7",
            "content": "1",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_2",
            "start": 797,
            "end": 797,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_3@0",
            "content": "Introduction",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_3",
            "start": 0,
            "end": 11,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_4@0",
            "content": "Text summarization is an important natural language processing (NLP) task, aiming at generating concise summaries for given texts while preserving the key information.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_4",
            "start": 0,
            "end": 166,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_4@1",
            "content": "It has extensive real-world applications such as headline generation (Nenkova et al., 2011).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_4",
            "start": 168,
            "end": 259,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_4@2",
            "content": "In this paper, we focus on the setting of sentence summarization (Rush et al., 2015;Filippova et al., 2015).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_4",
            "start": 261,
            "end": 368,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_5@0",
            "content": "State-of-the-art text summarization models are typically trained in a supervised way with large training corpora, comprising pairs of long texts and their summaries (Zhang et al., 2020;Aghajanyan et al., 2020Aghajanyan et al., , 2021.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_5",
            "start": 0,
            "end": 233,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_5@1",
            "content": "However, such parallel data are expensive to obtain, preventing the applications to less popular domains and less spoken languages.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_5",
            "start": 235,
            "end": 365,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_6@0",
            "content": "Unsupervised text generation has been attracting increasing interest, because it does not require parallel data for training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_6",
            "start": 0,
            "end": 124,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_6@1",
            "content": "One widely used approach is to compress a long text into a short one, and to reconstruct it to the long text by a cycle consistency loss (Miao and Blunsom, 2016;Wang and Lee, 2018;Baziotis et al., 2019).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_6",
            "start": 126,
            "end": 328,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_6@2",
            "content": "Due to the indifferentiability of the compressed sentence space, such an approach requires reinforcement learning (or its variants), which makes the training difficult (Kreutzer et al., 2021).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_6",
            "start": 330,
            "end": 521,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_7@0",
            "content": "Recently, Schumann et al. (2020) propose an edit-based approach for unsupervised summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_7",
            "start": 0,
            "end": 94,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_7@1",
            "content": "Their model maximizes a heuristically defined scoring function that evaluates the quality (fluency and semantics) of the generated summary, achieving higher performance than cycle-consistency methods.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_7",
            "start": 96,
            "end": 295,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_7@2",
            "content": "However, the search approach is slow in inference because hundreds of search steps are needed for each data sample.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_7",
            "start": 297,
            "end": 411,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_7@3",
            "content": "Moreover, their approach can only select words from the input sentence with the word order preserved.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_7",
            "start": 413,
            "end": 513,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_7@4",
            "content": "Thus, it is restricted and may generate noisy summaries due to the local optimality of search algorithms.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_7",
            "start": 515,
            "end": 619,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_8@0",
            "content": "To address the above drawbacks, we propose a Non-Autoregressive approach to Unsupervised Summarization (NAUS).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_8",
            "start": 0,
            "end": 109,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_8@1",
            "content": "The idea is to perform search as in Schumann et al. (2020) and, inspired by Li et al. (2020), to train a machine learning model to smooth out such noise and to speed up the inference process.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_8",
            "start": 111,
            "end": 301,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_8@2",
            "content": "Different from Li et al. (2020), we propose to utilize non-autoregressive decoders, which generate all output tokens in parallel due to our following observations:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_8",
            "start": 303,
            "end": 465,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_9@0",
            "content": "\u2022 Non-autoregressive models are several times faster than autoregressive generation, which is important when the system is deployed. \u2022 The input and output of the summarization task have a strong correspondence. Non-autoregressive generation supports encoder-only architectures, which can better utilize such input-output correspondence and even outperform autoregressive models for summarization. \u2022 For non-autoregressive models, we can design a length-control algorithm based on dynamic programming to satisfy the constraint of output lengths, which is typical in summarization applications but cannot be easily achieved with autoregressive models.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_9",
            "start": 0,
            "end": 649,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_10@0",
            "content": "We conducted experiments on Gigaword headline generation (Graff et al., 2003) and DUC2004 (Over and Yen, 2004) datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_10",
            "start": 0,
            "end": 119,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_10@1",
            "content": "Experiments show that our NAUS achieves state-of-the-art performance on unsupervised summarization; especially, it outperforms its teacher (i.e., the search approach), confirming that NAUS can indeed smooth out the search noise.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_10",
            "start": 121,
            "end": 348,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_10@2",
            "content": "Regarding inference efficiency, our NAUS with truncating is 1000 times more efficient than the search approach; even with dynamic programming for length control, NAUS is still 100 times more efficient than search and several times more efficient than autoregressive models.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_10",
            "start": 350,
            "end": 622,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_10@3",
            "content": "Our NAUS is also able to perform length-transfer summary generation, i.e., generating summaries of different lengths from training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_10",
            "start": 624,
            "end": 754,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_11@0",
            "content": "Approach",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_11",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_12@0",
            "content": "In our approach, we first follow Schumann et al. (2020) and obtain a summary by discrete search towards a heuristically defined objective function ( \u00a72.1).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_12",
            "start": 0,
            "end": 154,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_12@1",
            "content": "Then, we propose a non-autoregressive model for the summarization task ( \u00a72.2).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_12",
            "start": 156,
            "end": 234,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_12@2",
            "content": "We present the training strategy and the proposed length-control algorithm in \u00a72.3.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_12",
            "start": 236,
            "end": 318,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_13@0",
            "content": "Search-Based Summarization",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_13",
            "start": 0,
            "end": 25,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_14@0",
            "content": "Consider a given source text x = (x 1 , x 2 , . . . , x n ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_14",
            "start": 0,
            "end": 59,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_14@1",
            "content": "The goal of summarization is to find a shorter text y = (y 1 , y 2 , . . . , y m ) as the summary.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_14",
            "start": 61,
            "end": 158,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_15@0",
            "content": "Our work on unsupervised summarization follows the recent progress of search-based text generation (Liu et al., , 2021aKumar et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_15",
            "start": 0,
            "end": 138,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_15@1",
            "content": "Schumann et al. (2020) formulate summarization as word-level extraction (with order preserved), and apply edit-based discrete local search to maximize a heuristically designed objective.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_15",
            "start": 140,
            "end": 325,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_16@0",
            "content": "Specifically, the objective function considers two aspects: (1) a language fluency score f LM (y), given by the reciprocal of a language model's perplexity; and (2) a semantic similarity score f SIM (y; x), given by the cosine embeddings.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_16",
            "start": 0,
            "end": 237,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_16@1",
            "content": "The overall objective combines the two aspects as",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_16",
            "start": 239,
            "end": 287,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_17@0",
            "content": "f (y; x) = f LM (y) \u2022 f SIM (y; x) \u03b3 (1)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_17",
            "start": 0,
            "end": 39,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_18@0",
            "content": "where \u03b3 is a weighting hyperparameter.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_18",
            "start": 0,
            "end": 37,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_18@1",
            "content": "Interested readers are referred to Schumann et al. (2020) for the details of the scoring function.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_18",
            "start": 39,
            "end": 136,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_19@0",
            "content": "Further, the desired summary length can be specified as a hard constraint, achieved by searching only among sentences of the correct length.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_19",
            "start": 0,
            "end": 139,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_19@1",
            "content": "Suppose the desired summary length is T , the approach selects T random words from the input, and maximizes the scoring function (1) by changing the selection and non-selection of two words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_19",
            "start": 141,
            "end": 330,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_20@0",
            "content": "A greedy hill-climbing algorithm determines whether the change is accepted or not.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_20",
            "start": 0,
            "end": 81,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_20@1",
            "content": "In other words, a change is accepted if the score improves, or rejected otherwise.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_20",
            "start": 83,
            "end": 164,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_20@2",
            "content": "Such a process continues until a (possibly local) optimum is found.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_20",
            "start": 166,
            "end": 232,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_21@0",
            "content": "A pilot analysis in Schumann et al. (2020) shows that words largely overlap between a source text and its reference summary.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_21",
            "start": 0,
            "end": 123,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_21@1",
            "content": "This explains the high performance of such a word extraction approach, being a state-of-the-art unsupervised summarization system and outperforming strong competitors, e.g., cycle consistency (Wang and Lee, 2018;Baziotis et al., 2019).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_21",
            "start": 125,
            "end": 359,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_22@0",
            "content": "Non-Autoregressive Model for Summarization",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_22",
            "start": 0,
            "end": 41,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_23@0",
            "content": "Despite the high performance, such edit-based search has several drawbacks.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_23",
            "start": 0,
            "end": 74,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_23@1",
            "content": "First, the search process is slow because hundreds of local search steps are needed to obtain a high-quality summary.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_23",
            "start": 76,
            "end": 192,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_23@2",
            "content": "Second, their approach only extracts the original words with order preserved.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_23",
            "start": 194,
            "end": 270,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_23@3",
            "content": "Therefore, the generated summary is restricted and may be noisy.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_23",
            "start": 272,
            "end": 335,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_24@0",
            "content": "To this end, we propose a Non-Autoregressive approach to Unsupervised Summarization (NAUS) by learning from the search results.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_24",
            "start": 0,
            "end": 126,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_24@1",
            "content": "In this way, the machine learning model can smooth out the search noise and is much faster, largely alleviating the drawbacks of search-based summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_24",
            "start": 128,
            "end": 283,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_24@2",
            "content": "Compared with training an autoregressive model from search (Li et al., 2020), non-autoregressive generation predicts all the words in parallel, further improving inference efficiency by several times.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_24",
            "start": 285,
            "end": 484,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_25@0",
            "content": "Moreover, a non-autoregressive model enables us to design an encoder-only architecture, which is more suited to the summarization task due to the strong correspondence between input and output, which cannot be fully utilized by encoder-decoder models, especially autoregressive ones.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_25",
            "start": 0,
            "end": 282,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_26@0",
            "content": "Specifically, we propose to use multi-layer Transformer (Vaswani et al., 2017) as the nonautoregressive architecture for summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_26",
            "start": 0,
            "end": 134,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_26@1",
            "content": "Each Transformer layer is composed of a multihead attention sublayer and a feed-forward sublayer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_26",
            "start": 136,
            "end": 232,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_26@2",
            "content": "Additionally, there is a residual connection in each sublayer, followed by layer normalization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_26",
            "start": 234,
            "end": 328,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_27@0",
            "content": "Let X (n) \u2208 R T \u00d7d be the representation at the nth layer, where T is the number of words and d is the dimension.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_27",
            "start": 0,
            "end": 112,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_27@1",
            "content": "Specially, the input layer X (0) is the embeddings of words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_27",
            "start": 114,
            "end": 173,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_27@2",
            "content": "Suppose we have h attention heads.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_27",
            "start": 175,
            "end": 208,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_27@3",
            "content": "The output of the ith head in the nth attention sublayer is A",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_27",
            "start": 210,
            "end": 270,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_28@0",
            "content": "(n) i = softmax Q i K i \u221a d k V i , where Q i , K i ,",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_28",
            "start": 0,
            "end": 52,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_29@0",
            "content": "and V i are matrices calculated by three distinct multi-layer perceptrons (MLPs) from X (n\u22121) ; d k is the attention dimension.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_29",
            "start": 0,
            "end": 126,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_30@0",
            "content": "Multiple attention heads are then concatenated:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_30",
            "start": 0,
            "end": 46,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_31@0",
            "content": "A (n) = Concat A (n) 1 , . . . , A (n) h W O",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_31",
            "start": 0,
            "end": 43,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_32@0",
            "content": "where W O \u2208 R d\u00d7d is a weight matrix.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_32",
            "start": 0,
            "end": 36,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_33@0",
            "content": "Then, we have a residual connection and layer normalization by",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_33",
            "start": 0,
            "end": 61,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_34@0",
            "content": "\u0100(n) = LayerNorm X (n\u22121) + A (n) (2)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_34",
            "start": 0,
            "end": 35,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_35@0",
            "content": "Further, an MLP sublayer processes \u0100(n) , followed by residual connection and layer normalization, yielding the nth layer's representation",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_35",
            "start": 0,
            "end": 137,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_36@0",
            "content": "X (n) = LayerNorm \u0100(n) + MLP( \u0100(n) ) (3)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_36",
            "start": 0,
            "end": 39,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_37@0",
            "content": "The last Transformer layer X (N ) is fed to softmax to predict the words of the summary in a non-autoregressive manner, that is, the probability at the tth step is given by softmax(W x (N ) t ), where x (N ) t is the tth row of the matrix X (N ) and W is the weight matrix.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_37",
            "start": 0,
            "end": 272,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_38@0",
            "content": "It is emphasized that, in the vocabulary, we include a special blank token , which is handled by dynamic programming during both training and inference ( \u00a72.3).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_38",
            "start": 0,
            "end": 159,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_38@1",
            "content": "This enables us to generate a shorter summary than the input with such a multi-layer Transformer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_38",
            "start": 161,
            "end": 257,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_39@0",
            "content": "Our model can be thought of as an encoderonly architecture, differing from a typical encoderdecoder model with cross attention (Vaswani et al., 2017;Baziotis et al., 2019;Zhou and Rush, 2019).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_39",
            "start": 0,
            "end": 191,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_39@1",
            "content": "Previously, Su et al. (2021) propose a seemingly similar model to us, but put multiple end-ofsequence (EOS) tokens at the end of the generation; thus, they are unable to maintain the correspondence between input and output.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_39",
            "start": 193,
            "end": 415,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_39@2",
            "content": "Instead, we allow blank tokens scattering over the entire sentence; the residual connections in Eqns ( 2) and (3) can better utilize such input-output correspondence for summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_39",
            "start": 417,
            "end": 600,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_40@0",
            "content": "Training and Inference",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_40",
            "start": 0,
            "end": 21,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_41@0",
            "content": "In this section, we first introduce the Connectionist Temporal Classification (CTC) training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_41",
            "start": 0,
            "end": 92,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_41@1",
            "content": "Then, we propose a length-control decoding approach for summary generation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_41",
            "start": 94,
            "end": 168,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_42@0",
            "content": "CTC Training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_42",
            "start": 0,
            "end": 12,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_42@1",
            "content": "The Connectionist Temporal Classification (CTC, Graves et al., 2006) algorithm allows a special blank token in the vocabulary, and uses dynamic programming to marginalize out such blank tokens, known as latent alignment .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_42",
            "start": 14,
            "end": 234,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_42@2",
            "content": "In addition, non-autoregressive generation suffers from a common problem that words may be repeated in consecutive steps (Gu et al., 2018;; thus, CTC merges repeated words unless separated by .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_42",
            "start": 236,
            "end": 428,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_42@3",
            "content": "For example, the sequence of tokens a aabb is reduced to the text aab, denoted by \u0393(a aabb ) = aab.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_42",
            "start": 430,
            "end": 528,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_43@0",
            "content": "Concretely, the predicted likelihood is marginalized over all possible fillings of , i.e., all possible token sequences that are reduced to the groundtruth text:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_43",
            "start": 0,
            "end": 160,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_44@0",
            "content": "P (y|x) = w:\u0393(w)=y P (w|x)(4)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_44",
            "start": 0,
            "end": 28,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_45@0",
            "content": "where P (w|x) is the probability of generating a sequence of tokens w. Although enumerating every candidate in {w : \u0393(w) = y} is intractable, such marginalization fortunately can be computed by dynamic programming in an efficient way.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_45",
            "start": 0,
            "end": 233,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_45@1",
            "content": "Let \u03b1 s,t = w 1:s :\u0393(w 1:s )=y 1:t P (w 1:s |x) be the marginal probability of generating y 1:t up to the sth decoding slot.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_45",
            "start": 235,
            "end": 358,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_45@2",
            "content": "Moreover, \u03b1 s,0 is defined to be the probability that w 1:s is all , thus not having matched any word in y. The \u03b1 s,t variable can be further decomposed into two terms \u03b1 s,t = \u03b1 s,t + \u03b1 \u00ac s,t , where the first term is such probability with w s = , and the second term w s = .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_45",
            "start": 360,
            "end": 634,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_45@3",
            "content": "Apparently, the initialization of \u03b1 variables is",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_45",
            "start": 636,
            "end": 683,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_46@0",
            "content": "\u03b1 1,0 = P (w 1 = |x) (5) \u03b1 \u00ac 1,1 = P (w 1 = y 1 |x) (6) \u03b1 1,t = 0, \u2200t \u2265 1 (7) \u03b1 \u00ac 1,t = 0, \u2200t > 1 or t = 0(8)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_46",
            "start": 0,
            "end": 108,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_47@0",
            "content": "Eqn. ( 7) is because, at the first prediction slot, the empty token does not match any target words; Eqn. ( 8) is because the predicted non-first token must match exactly the first target word.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_47",
            "start": 0,
            "end": 192,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_48@0",
            "content": "The recursion formula for \u03b1 s,t is",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_48",
            "start": 0,
            "end": 33,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_49@0",
            "content": "\u03b1 s,t = \u03b1 s\u22121,t P (w t = |x)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_49",
            "start": 0,
            "end": 27,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_50@0",
            "content": "since the newly predicted token with probability P (w t = |x) does not match any target word, inheriting \u03b1 s\u22121,t .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_50",
            "start": 0,
            "end": 113,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_51@0",
            "content": "The recursion formula for \u03b1 \u00ac s,t is",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_51",
            "start": 0,
            "end": 35,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_52@0",
            "content": "\u03b1 \u00ac s,t = \uf8f1 \uf8f4 \uf8f4 \uf8f2 \uf8f4 \uf8f4 \uf8f3 \u03b1 s\u22121,t\u22121 + \u03b1 \u00ac s\u22121,t P (w s = y t |x), if y t = y t\u22121 \u03b1 s\u22121,t\u22121 + \u03b1 \u00ac s\u22121,t P (w s = y t |x), otherwise",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_52",
            "start": 0,
            "end": 127,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_53@0",
            "content": "Here, w s is not , so we must have w s = y t , having the predicted probability P (w s = y t |x).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_53",
            "start": 0,
            "end": 96,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_54@0",
            "content": "If y t = y t\u22121 , then we have two sub-cases: first, w 1:s\u22121 is reduced to y 1:t\u22121 with w s\u22121 = separating two repeating words in y, having probability \u03b1 s\u22121,t\u22121 ; or second, w 1:s\u22121 is reduced to y 1:t with w s\u22121 = y t = , having probability \u03b1 \u00ac s\u22121 , which implies we are merging w s\u22121 and w s .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_54",
            "start": 0,
            "end": 295,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_55@0",
            "content": "If y t = y t\u22121 , w 1:s\u22121 is reduced to either y 1:t\u22121 or y 1:t .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_55",
            "start": 0,
            "end": 63,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_55@1",
            "content": "In the first case, w s\u22121 can be either or non-, given by \u03b1 s\u22121,t\u22121 = \u03b1 s\u22121,t\u22121 + \u03b1 \u00ac s\u22121,t\u22121 .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_55",
            "start": 65,
            "end": 158,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_55@2",
            "content": "In the second case, we must have w s\u22121 = , which has a probability of \u03b1 \u00ac s\u22121,t .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_55",
            "start": 160,
            "end": 240,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_55@3",
            "content": "Finally, \u03b1 |w|,|y| is the marginal probability in Eqn. ( 4), as it is the probability that the entire generated sequence matches the entire target text.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_55",
            "start": 242,
            "end": 393,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_56@0",
            "content": "The CTC maximum likelihood estimation is to maximize the marginal probability, which is equivalent to minimizing the loss \u2212\u03b1 |w|,|y| .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_56",
            "start": 0,
            "end": 133,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_56@1",
            "content": "Since the dynamic programming formulas are differentiable, the entire model can be trained by backpropagation in an end-to-end manner with auto-differentiation tools (such as PyTorch).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_56",
            "start": 135,
            "end": 318,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_57@0",
            "content": "Length-Control Inference.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_57",
            "start": 0,
            "end": 24,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_57@1",
            "content": "Controlling output length is the nature of the summarization task, for example, displaying a short news headline on a mobile device.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_57",
            "start": 26,
            "end": 157,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_57@2",
            "content": "Moreover, Schumann et al. (2020) show that the main evaluation metric ROUGE (Lin, 2004) is sensitive to the summary length, and longer summaries tend to achieve higher ROUGE scores.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_57",
            "start": 159,
            "end": 339,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_57@3",
            "content": "Thus, it is crucial to control the summary length for fair comparison.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_57",
            "start": 341,
            "end": 410,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_58@0",
            "content": "We propose a length-control algorithm by dynamic programming (DP), following the nature of CTC training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_58",
            "start": 0,
            "end": 103,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_58@1",
            "content": "However, our DP is an approximate algorithm because of the dependencies introduced by removing consecutive repeated tokens.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_58",
            "start": 105,
            "end": 227,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_58@2",
            "content": "Thus, we equip our DP with a beam search mechanism.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_58",
            "start": 229,
            "end": 279,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_58@3",
            "content": "We define B s,t to be a set of top-B sequences with s predicted tokens that are reduced to t words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_58",
            "start": 281,
            "end": 379,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_58@4",
            "content": "B s,t is constructed by three scenarios.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_58",
            "start": 381,
            "end": 420,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_59@0",
            "content": "First, the blank token is predicted for the sth generation slot, and thus the summary length t remains the same, shown by the blue arrow in Figure 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_59",
            "start": 0,
            "end": 148,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_59@1",
            "content": "This yields a set of candidates",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_59",
            "start": 150,
            "end": 180,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_60@0",
            "content": "B (1) s,t = b \u2295 : b \u2208 B s\u22121,t(9)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_60",
            "start": 0,
            "end": 31,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_61@0",
            "content": "where \u2295 refers to string/token concatenation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_61",
            "start": 0,
            "end": 44,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_62@0",
            "content": "Second, a repeated word is predicted for the sth generation slot, i.e., b s\u22121 for a subsequence b of length s\u22121.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_62",
            "start": 0,
            "end": 111,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_62@1",
            "content": "In this case, the summary length t also remains the same, also shown in the blue arrow in Figure 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_62",
            "start": 113,
            "end": 211,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_62@2",
            "content": "This gives a candidate set",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_62",
            "start": 213,
            "end": 238,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_63@0",
            "content": "B (2) s,t = b \u2295 b s\u22121 : b \u2208 B s\u22121,t(10)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_63",
            "start": 0,
            "end": 38,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_64@0",
            "content": "Third, a non-, non-repeating word w s is generated, increasing the summary length from t \u2212 1 to t, shown by the red arrow in Figure 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_64",
            "start": 0,
            "end": 133,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_64@1",
            "content": "This gives",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_64",
            "start": 135,
            "end": 144,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_65@0",
            "content": "B (3) s,t = top B b \u2295 w : b \u2208 B s\u22121,t\u22121 , w s = , w s = b s\u22121 (11)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_65",
            "start": 0,
            "end": 65,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_66@0",
            "content": "where top B selects the best B elements by the probability P (w s |x).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_66",
            "start": 0,
            "end": 69,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_67@0",
            "content": "Based on the three candidates sets, we select top-B sequences to keep the beam size fixed:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_67",
            "start": 0,
            "end": 89,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_68@0",
            "content": "B s,t = top B (B (1) s,t \u222a B (2) s,t \u222aB (3) s,t )(12)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_68",
            "start": 0,
            "end": 52,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_69@0",
            "content": "where the sequences are ranked by their predicted joint probabilities.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_69",
            "start": 0,
            "end": 69,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_70@0",
            "content": "Theorem 1.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_70",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_71@0",
            "content": "(1) If repeating tokens are not merged, then the proposed length-control algorithm with beam size B = 1 finds the exact optimum B S,T being the most probable length-T sentence given by S prediction slots.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_71",
            "start": 0,
            "end": 203,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_72@0",
            "content": "(2) If we merge repeating tokens predicted by CTC-trained models, the above algorithm may not be exact.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_72",
            "start": 0,
            "end": 102,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_73@0",
            "content": "Appendix A presents the proof of the theorem and provides a more detailed analysis, showing that our length-control algorithm, although being approximate inference, can generate a summary of the desired length properly.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_73",
            "start": 0,
            "end": 218,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_73@1",
            "content": "Compared with truncating an overlength output, our approach is able to generate more fluent and complete sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_73",
            "start": 220,
            "end": 334,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_73@2",
            "content": "Also, our length-control algorithm is different from conventional beam search, shown in Appendix C.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_73",
            "start": 336,
            "end": 434,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_74@0",
            "content": "Experiments",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_74",
            "start": 0,
            "end": 10,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_75@0",
            "content": "Setup",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_75",
            "start": 0,
            "end": 4,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_76@0",
            "content": "Datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_76",
            "start": 0,
            "end": 8,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_76@1",
            "content": "We evaluated our NAUS model on Gigaword headline generation and DUC2004 datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_76",
            "start": 10,
            "end": 90,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_77@0",
            "content": "The headline generation dataset (Rush et al., 2015) is constructed from the Gigaword news corpus (Graff et al., 2003), where the first sentence of a news article is considered as input text and the news title is considered as the summary.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_77",
            "start": 0,
            "end": 237,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_77@1",
            "content": "The dataset contains 3.8M/198K/1951 samples for training/validation/test.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_77",
            "start": 239,
            "end": 311,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_77@2",
            "content": "Based on the analysis of the training size in Appendix B, we used 3M samples for training NAUS.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_77",
            "start": 313,
            "end": 407,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_78@0",
            "content": "It should be emphasized that, when NAUS learns from search, we only use the input of the training corpus: we perform search (Schumann et al., 2020) for each input, and train our NAUS from the search results.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_78",
            "start": 0,
            "end": 206,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_78@1",
            "content": "Therefore, we do not utilize any labeled parallel data, and our approach is unsupervised.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_78",
            "start": 208,
            "end": 296,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_79@0",
            "content": "Moreover, we considered two settings with desired summary lengths of 8 and 10, following Schumann et al. (2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_79",
            "start": 0,
            "end": 111,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_79@1",
            "content": "Our NAUS is trained from respective search results.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_79",
            "start": 113,
            "end": 163,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_80@0",
            "content": "The DUC2004 dataset (Over and Yen, 2004) is designed for testing only with 500 samples, where we also take the first sentence of an article as the input text.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_80",
            "start": 0,
            "end": 157,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_80@1",
            "content": "Our NAUS is transferred from the above headline generation corpus.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_80",
            "start": 159,
            "end": 224,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_80@2",
            "content": "Based on the length of DUC2004 summaries, we trained NAUS from search results with 13 words, also following Schumann et al. ( 2020) for fair comparison.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_80",
            "start": 226,
            "end": 377,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_81@0",
            "content": "Evaluation Metrics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_81",
            "start": 0,
            "end": 18,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_81@1",
            "content": "We evaluated the quality of predicted summaries by ROUGE scores 2 (Lin, 2004), which are the most widely used metrics in previous work (Wang and Lee, 2018;Baziotis et al., 2019;Zhou and Rush, 2019).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_81",
            "start": 20,
            "end": 217,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_81@2",
            "content": "Specifically, ROUGE-n evaluates n-gram overlap between a predicted summary and its reference summary; ROUGE-L, instead, measures the longest common sequence between the predicted and reference summaries.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_81",
            "start": 219,
            "end": 421,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_82@0",
            "content": "Different ROUGE variants are adopted in previous work, depending on the dataset.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_82",
            "start": 0,
            "end": 79,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_82@1",
            "content": "We followed the standard evaluation scripts and evaluated headline generation by ROUGE F1 (Wang and Lee, 2018;Baziotis et al., 2019;Schumann et al., 2020) and DUC2004 by Truncate ROUGE Recall (Dorr et al., 2003;West et al., 2019).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_82",
            "start": 81,
            "end": 310,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_83@0",
            "content": "In addition to summary quality, we also evaluated the inference efficiency of different methods, as it is important for the deployment of deep learning models in real-time applications.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_83",
            "start": 0,
            "end": 184,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_83@1",
            "content": "We report the average inference time in seconds for each data sample, and compare the speedup with Schumann et al. (2020)'s search approach, which achieves (previous) state-of-the-art ROUGE scores.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_83",
            "start": 186,
            "end": 382,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_83@2",
            "content": "Our experiments were conducted on an i9-9940X CPU and an RTX6000 graphic card.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_83",
            "start": 384,
            "end": 461,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_83@3",
            "content": "Appendix B presents additional implementation details.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_83",
            "start": 463,
            "end": 516,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_84@0",
            "content": "Results and Analyses",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_84",
            "start": 0,
            "end": 19,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_85@0",
            "content": "Main Results.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_85",
            "start": 0,
            "end": 12,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_85@1",
            "content": "Table 1 presents the performance of our model and baselines on the Gigaword headline test set.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_85",
            "start": 14,
            "end": 107,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_85@2",
            "content": "For a fair comparison, we categorize all approaches by average summary lengths of ~8 and ~10 into Groups A and B, respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_85",
            "start": 109,
            "end": 235,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_86@0",
            "content": "The Lead baseline extracts the first several words of the input sentence.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_86",
            "start": 0,
            "end": 72,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_86@1",
            "content": "Despite its simplicity, the Lead approach is a strong summarization baseline adopted in most previous work (F\u00e9vry and Phang, 2018;Baziotis et al., 2019).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_86",
            "start": 74,
            "end": 226,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_86@2",
            "content": "Wang and Lee (2018) utilize cycle consistency (Miao and Blunsom, 2016) for unsupervised summarization; the performance is relatively low, because the cycle consistency loss cannot ensure the generated text is a valid summary.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_86",
            "start": 228,
            "end": 452,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_86@3",
            "content": "Zhou and Rush (2019) perform beam search towards a stepby-step decomposable score of fluency and contextual matching.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_86",
            "start": 454,
            "end": 570,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_86@4",
            "content": "Both are unable to explicitly control the summary length: in a fair comparison of length 10 (Group B, Table 1), their performance is worse than the (previous) state-of-the-art approach (Schumann et al., 2020), 3 which performs edit-based local search.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_86",
            "start": 572,
            "end": 822,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_87@0",
            "content": "Our NAUS approach follows Schumann et al. ( 2020), but trains a non-autoregressive model from search results.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_87",
            "start": 0,
            "end": 108,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_87@1",
            "content": "We consider two settings for controlling the summary length: truncating longer summaries and decoding with our proposed lengthcontrol algorithm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_87",
            "start": 110,
            "end": 253,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_87@2",
            "content": "Both of our variants outperform Schumann et al. ( 2020) by 1.21-2.73 in terms of the total ROUGE score (Rows 5-6 & 13-14, Table 1).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_87",
            "start": 255,
            "end": 385,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_87@3",
            "content": "As mentioned, Schumann et al. (2020) only extract original words with order preserved, yielding noisy sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_87",
            "start": 387,
            "end": 498,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_87@4",
            "content": "Our NAUS, as a student, learns from the search-based teacher model and is able to smooth out its noise.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_87",
            "start": 500,
            "end": 602,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_87@5",
            "content": "This is a compelling result, as our student model outperforms its teacher.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_87",
            "start": 604,
            "end": 677,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_88@0",
            "content": "Regarding inference efficiency, our NAUS method with truncating is more than 1300 times faster than Schumann et al. (2020), because we do not need iterative search.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_88",
            "start": 0,
            "end": 163,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_88@1",
            "content": "Even with dynamic programming and beam search for length control, NAUS is still over 100 times faster.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_88",
            "start": 165,
            "end": 266,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_88@2",
            "content": "This shows our NAUS is extremely efficient in inference, which is important for real-time applications.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_88",
            "start": 268,
            "end": 370,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_89@0",
            "content": "Although the efficiency of Wang and Lee (2018) and Zhou and Rush (2019) is not available, we still expect our approach to be a few times faster (despite our higher ROUGE scores) because their models are autoregressive.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_89",
            "start": 0,
            "end": 217,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_89@1",
            "content": "By contrast, our NAUS is non-autoregressive, meaning that it predicts all words simultaneously.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_89",
            "start": 219,
            "end": 313,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_89@2",
            "content": "We will provide a controlled comparison between autoregressive and nonautoregressive models in Table 3.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_89",
            "start": 315,
            "end": 417,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_90@0",
            "content": "Table 2 shows the results on the DUC2004 dataset.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_90",
            "start": 0,
            "end": 48,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_90@1",
            "content": "The cycle-consistency approach (Bazio- jic et al., 2004) and the state-of-the-art edit-based search (Schumann et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_90",
            "start": 50,
            "end": 173,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_91@0",
            "content": "The performance of our NAUS model is consistent with Table 1, outperforming all previous methods in terms of the total ROUGE score, and being 100-1000 times faster than the search approach (Schumann et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_91",
            "start": 0,
            "end": 212,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_92@0",
            "content": "In general, the proposed NAUS not only achieves state-of-the-art ROUGE scores for unsupervised summarization, but also is more efficient when deployed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_92",
            "start": 0,
            "end": 150,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_92@1",
            "content": "Results are consistent on both datasets, demonstrating the generality of our NAUS.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_92",
            "start": 152,
            "end": 233,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_93@0",
            "content": "In-Depth Analyses.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_93",
            "start": 0,
            "end": 17,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_93@1",
            "content": "We conduct in-depth analyses on the proposed NAUS model in Table 3.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_93",
            "start": 19,
            "end": 85,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_93@2",
            "content": "Due to the limit of time and space, we chose the Gigaword headline generation as our testbed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_93",
            "start": 87,
            "end": 179,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_93@3",
            "content": "All the autoregressive (AR) and non-autoregressive (NAR) variants learn from the search output of our replication (Rows 2 & 11), where we achieve very close results to those reported in Schumann et al. (2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_93",
            "start": 181,
            "end": 389,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_94@0",
            "content": "We first tried vanilla encoder-decoder NAR Transformer (Rows 4 & 13, Gu et al., 2018), where we set the number of decoding slots as the desired summary length; thus, the blank token and the length-control algorithm are not needed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_94",
            "start": 0,
            "end": 229,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_94@1",
            "content": "As seen, a vanilla NAR model does not perform well, and CTC largely outperforms vanilla NAR in both groups (Rows 5-6 & 14-15).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_94",
            "start": 231,
            "end": 356,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_94@2",
            "content": "Such results are highly consistent with the translation literature Gu and Kong, 2021;Qian et al., 2021;Huang et al., 2022).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_94",
            "start": 358,
            "end": 480,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_95@0",
            "content": "The proposed encoder-only NAUS model outperforms encoder-decoder ones in both groups in terms of the total ROUGE score, when the summary length is controlled by either truncating or length-control decoding (Rows 8-9 & 17-18).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_95",
            "start": 0,
            "end": 224,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_95@1",
            "content": "Profoundly, our non-autoregressive NAUS is even better than the autoregressive Transformer (Rows 3 & 12).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_95",
            "start": 226,
            "end": 330,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_95@2",
            "content": "We also experimented with previous nonautoregressive work for supervised summarization (Su et al., 2021) 4 in our learning-from-search setting.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_95",
            "start": 332,
            "end": 474,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_95@3",
            "content": "Although their approach appears to be encoder-only, it adds end-of-sequence (EOS) tokens at the end of the generation, and thus is unable to utilize the input-output correspondence.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_95",
            "start": 476,
            "end": 656,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_95@4",
            "content": "Their performance is higher than vanilla NAR models, but lower than ours.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_95",
            "start": 658,
            "end": 730,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_95@5",
            "content": "By contrast, NAUS is able to capture such correspondence with the residual connections, i.e., Eqns. ( 2) and (3), in its encoder-only architecture.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_95",
            "start": 732,
            "end": 878,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_96@0",
            "content": "Generally, the efficiency of encoder-only NAR 5 (without length-control decoding) is ~2 times faster than encoder-decoder NAR and ~20 times faster than the AR Transformer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_96",
            "start": 0,
            "end": 170,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_97@0",
            "content": "Further, our length-control decoding improves the total ROUGE score, compared with truncating, for both encoder-decoder CTC and encoder-only NAUS models (Rows 6, 9, 15, & 18), although its dynamic programming is slower.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_97",
            "start": 0,
            "end": 218,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_97@1",
            "content": "Nevertheless, our non-autoregressive NAUS with length control is ~200 times faster than search and ~3 times faster than the AR Transformer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_97",
            "start": 220,
            "end": 358,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_98@0",
            "content": "Additional Results.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_98",
            "start": 0,
            "end": 18,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_98@1",
            "content": "We present additional results in our appendices:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_98",
            "start": 20,
            "end": 67,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_99@0",
            "content": "Related Work",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_99",
            "start": 0,
            "end": 11,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_100@0",
            "content": "Summarization systems can be generally categorized into two paradigms: extractive and abstractive.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_100",
            "start": 0,
            "end": 97,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_100@1",
            "content": "Extractive systems extract certain sentences and clauses from input, for example, based on salient features (Zhou and Rush, 2019) or feature construction (He et al., 2012).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_100",
            "start": 99,
            "end": 270,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_100@2",
            "content": "Abstraction systems generate new utterances as the summary, e.g., by sequence-to-sequence models trained in a supervised way (Zhang et al., 2020;Liu et al., 2021b).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_100",
            "start": 272,
            "end": 435,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_101@0",
            "content": "Recently, unsupervised abstractive summarization is attracting increasing attention.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_101",
            "start": 0,
            "end": 83,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_101@1",
            "content": "Yang et al. (2020) propose to use the Lead baseline (first several sentences) as the pseudo-groundtruth.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_101",
            "start": 85,
            "end": 188,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_101@2",
            "content": "However, such an approach only works with wellstructured articles (such as CNN/DailyMail).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_101",
            "start": 190,
            "end": 279,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_101@3",
            "content": "Wang and Lee (2018) and Baziotis et al. (2019) use cycle consistency for unsupervised summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_101",
            "start": 281,
            "end": 380,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_101@4",
            "content": "Zhou and Rush (2019) propose a step-by-step decomposable scoring function and perform beam search for summary generation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_101",
            "start": 382,
            "end": 502,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_101@5",
            "content": "Schumann et al. (2020) propose an edit-based local search approach, which allows a more comprehensive scoring function and outperforms cycle consistency and beam search.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_101",
            "start": 504,
            "end": 672,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_102@0",
            "content": "Our paper follows Schumann et al. ( 2020) but trains a machine learning model to improve efficiency and smooth out search noise.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_102",
            "start": 0,
            "end": 127,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_102@1",
            "content": "Previously, Li et al. (2020) fine-tune a GPT-2 model based on search results for unsupervised paraphrasing; Jolly et al. (2022) adopt the search-and-learning framework to improve the semantic coverage for few-shot data-to-text generation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_102",
            "start": 129,
            "end": 366,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_102@2",
            "content": "We extend previous work in a non-trivial way by designing a non-autoregressive generator and further proposing a length-control decoding algorithm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_102",
            "start": 368,
            "end": 514,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_103@0",
            "content": "The importance of controlling the output length is recently realized in the summarization community.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_103",
            "start": 0,
            "end": 99,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_103@1",
            "content": "Baziotis et al. (2019) and Su et al. (2021) adopt soft penalty to encourage shorter sentences; Yang et al. (2021) and control the summary length through POS tag and EOS predictions.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_103",
            "start": 101,
            "end": 281,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_103@2",
            "content": "None of these studies can control the length explicitly.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_103",
            "start": 283,
            "end": 338,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_103@3",
            "content": "Song et al. (2021) is able to precisely control the length by progressively filling a predetermined number of decoding slots, analogous to the vanilla NAR model in our non-autoregressive setting.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_103",
            "start": 340,
            "end": 534,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_104@0",
            "content": "Non-autoregressive generation is originally proposed for machine translation (Gu et al., 2018;Guo et al., 2020;, which is later extended to other text generation tasks.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_104",
            "start": 0,
            "end": 167,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_104@1",
            "content": "Wiseman et al. (2018) address the table-to-text generation task, and model output segments by a hidden semi-Markov model (Ostendorf et al., 1996), simultaneously generating tokens for all segments.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_104",
            "start": 169,
            "end": 365,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_104@2",
            "content": "Jia et al. (2021) apply non-autoregressive models to extractive document-level summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_104",
            "start": 367,
            "end": 459,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_104@3",
            "content": "Su et al. (2021) stack a non-autoregressive BERT model with a conditional random field (CRF) for abstractive summarization; since the summary is shorter than the input text, their approach puts multiple end-to-sequence (EOS) tokens at the end of the sentence, and thus is unable to utilize the strong input-output correspondence in the summarization task.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_104",
            "start": 461,
            "end": 815,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_104@4",
            "content": "Yang et al. (2021) apply auxiliary part-ofspeech (POS) loss and explore pretraining strategies for encoder-decoder nonautoregressive summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_104",
            "start": 817,
            "end": 963,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_104@5",
            "content": "All these studies concern supervised summarization, while our paper focuses on unsupervised summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_104",
            "start": 965,
            "end": 1070,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_104@6",
            "content": "We adopt CTC training in our encoder-only architecture, allowing blank tokens to better align input and output words, which is more appropriate for summarization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_104",
            "start": 1072,
            "end": 1233,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_105@0",
            "content": "Conclusion",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_105",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_106@0",
            "content": "In this work, we propose a non-autoregressive unsupervised summarization model (NAUS), where we further propose a length-control decoding algorithm based on dynamic programming.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_106",
            "start": 0,
            "end": 176,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_106@1",
            "content": "Experiments show that NAUS not only archives stateof-the-art unsupervised performance on Gigaword headline generation and DUC2004 datasets, but also is much more efficient than search methods and autoregressive models.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_106",
            "start": 178,
            "end": 395,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_106@2",
            "content": "Appendices present additional analyses and length-transfer experiments.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_106",
            "start": 397,
            "end": 467,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_107@0",
            "content": "Limitation and Future Work.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_107",
            "start": 0,
            "end": 26,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_107@1",
            "content": "Our paper focuses on unsupervised summarization due to the importance of low-data applications.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_107",
            "start": 28,
            "end": 122,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_107@2",
            "content": "One limitation is that we have not obtained rigorous empirical results for supervised summarization, where the developed model may also work.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_107",
            "start": 124,
            "end": 264,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_107@3",
            "content": "This is because previous supervised summarization studies lack explicit categorization of summary lengths (Yang et al., 2020;, making comparisons unfair and problematic (Schumann et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_107",
            "start": 266,
            "end": 458,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_107@4",
            "content": "Such an observation is also evidenced by Su et al. (2021), where the same model may differ by a few ROUGE points when generating summaries of different lengths.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_107",
            "start": 460,
            "end": 619,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_107@5",
            "content": "Nevertheless, we have compared with Su et al. (2021) in our setting and show the superiority of the NAUS under fair comparison.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_107",
            "start": 621,
            "end": 747,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_107@6",
            "content": "We plan to explore supervised summarization in future work after we establish a rigorous experimental setup, which is beyond the scope of this paper.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_107",
            "start": 749,
            "end": 897,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_108@0",
            "content": "Acknowledgments",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_108",
            "start": 0,
            "end": 14,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_109@0",
            "content": "A Proof of Theorem 1 Theorem 1. (1) If repeating tokens are not merged, then the proposed length-control algorithm with beam size B = 1 finds the exact optimum B S,T being the most probable length-T sentence given by S prediction slots.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_109",
            "start": 0,
            "end": 235,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_109@1",
            "content": "(2) If we merge repeating tokens predicted by CTC-trained models, the above algorithm may not be exact.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_109",
            "start": 237,
            "end": 339,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_110@0",
            "content": "Proof. [Part (1)] This part concerns a variant of our decoding algorithm, which only removes the blank token but does not merge consecutive repeated tokens to a single word, i.e., Eqn. (10) is removed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_110",
            "start": 0,
            "end": 200,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_110@1",
            "content": "We denote this by \u0393 , for example, \u0393 (a aabb ) = aaabb, as opposed to \u0393(a aabb ) = aab in our algorithm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_110",
            "start": 202,
            "end": 305,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_110@2",
            "content": "We now show that, based on \u0393 , our dynamic programming algorithm in \u00a72.3 with beam size B = 1 is an exact inference algorithm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_110",
            "start": 307,
            "end": 432,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_111@0",
            "content": "We define \u03b2 s,t = max b:|b|=s,|\u0393 (b)|=t P (b|x), where | \u2022 | denotes the length of a sequence.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_111",
            "start": 0,
            "end": 93,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_111@1",
            "content": "In other words, \u03b2 s,t is the maximum probability of s tokens that are reduced to t words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_111",
            "start": 95,
            "end": 183,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_112@0",
            "content": "According to the definition, we have",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_112",
            "start": 0,
            "end": 35,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_113@0",
            "content": "\u03b2 1,0 = P (w 1 = |x) (13) \u03b2 1,1 = max w 1 = P (w 1 |x) (14) \u03b2 s,t = 0 for s > t(15)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_113",
            "start": 0,
            "end": 82,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_114@0",
            "content": "In ( 13), \u03b2 1,0 refers to the probability of one token that is reduced to zero words, in which case the first predicted token can only be the blank token , corresponding to Eqn. ( 9) with s = 1 and t = 0.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_114",
            "start": 0,
            "end": 203,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_114@1",
            "content": "Likewise, \u03b2 1,1 is the maximum probability of one token that is reduced to one word.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_114",
            "start": 205,
            "end": 288,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_114@2",
            "content": "Thus, it is the probability of the most probable non-token, corresponding to Eqn. ( 11) with s = 1 and t = 0.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_114",
            "start": 290,
            "end": 398,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_114@3",
            "content": "Eqn. ( 15) asserts that fewer tokens cannot be reduced to more words; it is used for mathematical derivations, but need not to be explicitly implemented in our algorithm in \u00a72.3.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_114",
            "start": 400,
            "end": 577,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_114@4",
            "content": "The recursion variable \u03b2 s,t is computed by",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_114",
            "start": 579,
            "end": 621,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_115@0",
            "content": "\u03b2 s,t = max \u03b2 s\u22121,t \u2022 P (w s = |x), \u03b2 s\u22121,t\u22121 \u2022 max ws = P (w s |x)(16)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_115",
            "start": 0,
            "end": 70,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_116@0",
            "content": "In other words, the variable \u03b2 s,t can inherit \u03b2 s\u22121,t with a predicted blank token , corresponding to Eqn. (9); or it can inherit \u03b2 s\u22121,t\u22121 with a predicted non-token, corresponding to Eqn. (11).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_116",
            "start": 0,
            "end": 195,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_116@1",
            "content": "Specially, if t = 0, then the second term has \u03b2 s\u22121,\u22121 undefined, and thus is ignored in the max operation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_116",
            "start": 197,
            "end": 303,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_117@0",
            "content": "We need the max operator to take the higher probability in the two cases, since \u03b2 s,t is the maximum probability of s tokens being reduced to t words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_117",
            "start": 0,
            "end": 149,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_117@1",
            "content": "This corresponds to Eqn. ( 12) with beam size B = 1.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_117",
            "start": 151,
            "end": 202,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_118@0",
            "content": "To sum up, our inductive calculation guarantees that \u03b2 S,T is the exact maximum probability of max b:|b|=S,|\u0393 (b)|=T P (b|x) for the desired length T with S generation slots; our algorithm (if not merging repeating tokens) gives the corresponding B S,T as argmax P (b|x) under the same constraints, concluding the proof of Part (1).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_118",
            "start": 0,
            "end": 331,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_119@0",
            "content": "[Part (2)] CTC training merges consecutive repeated tokens to a single word, unless separated by the blank token (Graves et al., 2006).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_119",
            "start": 0,
            "end": 134,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_119@1",
            "content": "Since our model is trained by CTC, we should adopt this rule in inference as well.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_119",
            "start": 136,
            "end": 217,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_119@2",
            "content": "We show in this part that our algorithm, with beam size B = 1, may not yield the exact optimum with an example in Table 4.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_119",
            "start": 219,
            "end": 340,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_120@0",
            "content": "We consider generating a sentence of two words Word P (w 1 |x) P (w 2 |x) I 0.39 0.1 like 0.4 0.9 coding 0.1 0 0.11 0 Table 4: An example of predicted probabilities of two generation slots, where we have a vocabulary of three words and a blank token .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_120",
            "start": 0,
            "end": 250,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_121@0",
            "content": "from the two prediction slots, i.e., S = T = 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_121",
            "start": 0,
            "end": 46,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_121@1",
            "content": "Apparently, the optimal sequence is \"I like\" with probability 0.39 \u2022 0.9 = 0.351.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_121",
            "start": 48,
            "end": 128,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_121@2",
            "content": "However, the algorithm would predict B 1,1 = {\"like\"} because \"like\" is the most probably token in the first slot.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_121",
            "start": 130,
            "end": 243,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_121@3",
            "content": "Then, our algorithm will give B 2,2 = {\"like I\"}, because it has to select a non-repeating token based on \u0393, yielding a non-optimal solution.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_121",
            "start": 245,
            "end": 385,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_122@0",
            "content": "It is noted that, if we do not merge repeating tokens as in \u0393 , our algorithm will give the exact optimum \"like like\" in the above example.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_122",
            "start": 0,
            "end": 138,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_122@1",
            "content": "This shows that merging consecutive repeated tokens requires the decoding algorithm to correct early predictions, and thus, our dynamic programming becomes an approximate inference.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_122",
            "start": 140,
            "end": 320,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_122@2",
            "content": "Nevertheless, our algorithm is able to generate a sequence of the desired length properly; its approximation happens only when the algorithm compares more repetitions with fewer s versus more s with fewer repetitions.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_122",
            "start": 322,
            "end": 538,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_122@3",
            "content": "Such approximation is further alleviated by beam search in our dynamic programming.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_122",
            "start": 540,
            "end": 622,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_122@4",
            "content": "Therefore, the proposed length-control algorithm is better than truncating a longer sentence; especially, our approach generates more fluent and complete sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_122",
            "start": 624,
            "end": 787,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_123@0",
            "content": "Our NAUS had a Transformer encoder as the basic structure, generally following the settings in Vaswani et al. (2017): 6 encoder layers, each having 8 attention heads.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_123",
            "start": 0,
            "end": 165,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_123@1",
            "content": "The dimension was 512 for attention and 2048 for feed-forward modules.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_123",
            "start": 167,
            "end": 236,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@0",
            "content": "Our training used a batch size of 4K tokens, with a maximum of 200K updates.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 0,
            "end": 75,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@1",
            "content": "We used Adam with \u03b2 = (0.9, 0.98).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 77,
            "end": 110,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@2",
            "content": "In general, the learning rate warmed up to 5e-4 in the first 10K steps, and then decayed to 1e-9 with the inverse square-root schedule, except that we find the maximum learning rate of 1e-4 worked better for headline generation with the summary length of 8.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 112,
            "end": 368,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@3",
            "content": "We set the 2 weight decay to 0.01.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 370,
            "end": 403,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@4",
            "content": "Our length-control decoding algorithm 1.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 405,
            "end": 444,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@5",
            "content": "Notice that NAUS is trained by pseudo-groundtruth given by unsupervised edit-based search (Schumann et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 446,
            "end": 559,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@6",
            "content": "Thus, our approach is indeed unsupervised. had a beam size of 6.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 561,
            "end": 624,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_124@7",
            "content": "More details can be found in our repository (Footnote 1).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_124",
            "start": 626,
            "end": 682,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_125@0",
            "content": "Our NAUS training is based on Schumann et al. ( 2020)'s prediction on the input of the Gigaword headline generation training set.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_125",
            "start": 0,
            "end": 128,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_125@1",
            "content": "We show performance against the number of training samples in Figure 3.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_125",
            "start": 130,
            "end": 200,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_125@2",
            "content": "As seen, NAUS outperforms its search teacher even with a small set of 0.1 million samples.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_125",
            "start": 202,
            "end": 291,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_125@3",
            "content": "The performance saturates as the number of samples increases.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_125",
            "start": 293,
            "end": 353,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_125@4",
            "content": "Based on this analysis, we used 3 million samples from the 3.8 million Gigaword training set to train our NAUS models.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_125",
            "start": 355,
            "end": 472,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_126@0",
            "content": "Each reported number in Tables 1-3 were averaged over 10 independent runs, whereas the results in Table 7 (Appendix F) were based on a single run due to the limited time.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_126",
            "start": 0,
            "end": 169,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_127@0",
            "content": "As mentioned, our length-control decoding algorithm involves beam search within its dynamic programming, because the algorithm does not find the exact optimum when it merges repeating words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_127",
            "start": 0,
            "end": 189,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_127@1",
            "content": "We analyze the effect of the beam size in our lengthcontrol algorithm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_127",
            "start": 191,
            "end": 260,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_128@0",
            "content": "In addition, we compare our approach with CTC beam search (Graves et al., 2006).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_128",
            "start": 0,
            "end": 79,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_128@1",
            "content": "6 Typically, a CTC-trained non-autoregressive model can be decoded either greedily or by beam search.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_128",
            "start": 81,
            "end": 181,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_128@2",
            "content": "The greedy decoding finds the most probable token at each step, i.e., w * i = argmax w i P (w i |x), and reduces the tokens to a sentence by \u0393(w 1 , \u2022 \u2022 \u2022 , w T ), where T is the number of decoding steps.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_128",
            "start": 183,
            "end": 386,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_128@3",
            "content": "The CTC beam search algorithm searches for the most likely sentence by marginalizing all token sequences that are reduced to y, i.e., argmax y w:\u0393(w)=y P (w|x).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_128",
            "start": 388,
            "end": 547,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_128@4",
            "content": "We show results in Figure 4, where we chose 10word Gigaword headline generation as the testbed with our NAUS model (Group B, Table 1).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_128",
            "start": 549,
            "end": 682,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_128@5",
            "content": "Notice that CTC beam search does not control the output length, and for fair comparison, we truncated its generated summaries.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_128",
            "start": 684,
            "end": 809,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_128@6",
            "content": "This also shows that our novel decoding approach and CTC beam search are distinct algorithms.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_128",
            "start": 811,
            "end": 903,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_129@0",
            "content": "As seen in Figure 4a, the beam search does play a role in our length-control algorithm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_129",
            "start": 0,
            "end": 86,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_129@1",
            "content": "When the beam enlarges from 1 to 6, the performance (orange solid line) increases by 1.2 points in \u2206R, the difference of total ROUGE in comparison with Schumann et al. (2020) under our replication (Row 10, Table 1).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_129",
            "start": 88,
            "end": 302,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_129@2",
            "content": "However, further increasing the beam size does not yield additional performance gain.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_129",
            "start": 304,
            "end": 388,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_129@3",
            "content": "This is consistent with previous literature in autoregressive generation (Meister et al., 2020), which also suggests a beam size of 5-7 is the best in their applications.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_129",
            "start": 390,
            "end": 559,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_129@4",
            "content": "In terms of the efficiency (Figure 4b), a larger beam size monotonically increases the inference time.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_129",
            "start": 561,
            "end": 662,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_129@5",
            "content": "However, the overhead of beam search is relatively small in our dynamic programming, and thus we chose a beam size of 6 in our experiments.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_129",
            "start": 664,
            "end": 802,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_130@0",
            "content": "Our length-control algorithm significantly outperforms CTC beam search (dashed blue lines) in terms of both \u2206R and efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_130",
            "start": 0,
            "end": 125,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_130@1",
            "content": "Especially, CTC beam search is three times slower, and degrades more significantly than our length-control decoding when the beam size increases.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_130",
            "start": 127,
            "end": 271,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_131@0",
            "content": "We show in Table 6 example summaries generated by our NAUS with truncating and length-control decoding, as well as the previous state-of-the-art method (Schumann et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_131",
            "start": 0,
            "end": 175,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_131@1",
            "content": "We observe that NAUS without length control generates slightly longer summaries, and if truncated, the output may be incomplete; by contrast, our length-control algo- 2020), our NAUS (length control) generates a more informative summary that includes the main clause (united nations condemned), which also appears in the reference summary.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_131",
            "start": 177,
            "end": 515,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_132@0",
            "content": "We conducted human evaluation with a focus on truncating and length-control decodings.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_132",
            "start": 0,
            "end": 85,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_132@1",
            "content": "This is because truncating may generate incomplete sentences, which cannot be adequately evaluated by automatic metrics as their ROUGE scores are close.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_132",
            "start": 87,
            "end": 238,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_133@0",
            "content": "Specifically, we invited three human annotators to compare the two decoding algorithms for NAUS on 50 randomly selected samples, in the setting of Group B, Table 1 (Gigaword headline generation with a target length of 10).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_133",
            "start": 0,
            "end": 221,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_133@1",
            "content": "The annotation was conducted in a pairwise manner in terms of overall quality and fluency/completeness; average results (wins/loses/ties) are shown in Table 4.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_133",
            "start": 223,
            "end": 381,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_133@2",
            "content": "It should be mentioned that our annotation was strictly blind: the samples of two systems were presented in random order and annotators did not know which system generated a sample.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_133",
            "start": 383,
            "end": 563,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_134@0",
            "content": "As seen, our length-control decoding algorithm largely outperforms the truncating approach in terms of both the overall quality and fluency/completeness.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_134",
            "start": 0,
            "end": 152,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_134@1",
            "content": "The results are statistically significant (p-values < 0.01) in a one-sided binomial test.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_134",
            "start": 154,
            "end": 242,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_134@2",
            "content": "This verifies that length-control decoding is important for summarization, as truncating yields incomplete sentences, which are inadequately reflected by ROUGE scores.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_134",
            "start": 244,
            "end": 410,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_135@0",
            "content": "In the main paper, we present results where our NAUS is trained on search outputs (Schumann et al., 2020) that have the same length as the inference target.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_135",
            "start": 0,
            "end": 155,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_135@1",
            "content": "This follows the common assumption in machine learning that training and test samples are independently identically distributed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_135",
            "start": 157,
            "end": 284,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_136@0",
            "content": "In this appendix, we show the performance of length-transfer summary generation, where the prediction has a different length from that of training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_136",
            "start": 0,
            "end": 146,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_136@1",
            "content": "We denote such a model by NAUS i\u2192j , referring to training with i words and testing for j words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_136",
            "start": 148,
            "end": 243,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_137@0",
            "content": "As seen in Groups A & B in Table 7, NAUS with length transfer is slightly worse than NAUS trained on the correct length, which is understandable.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_137",
            "start": 0,
            "end": 144,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_137@1",
            "content": "Nevertheless, length-transfer decoding still outperforms the search teacher and other baselines.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_137",
            "start": 146,
            "end": 241,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_138@0",
            "content": "Moreover, we consider the third setting in Schumann et al. (2020), where the target length is 50% of the input.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_138",
            "start": 0,
            "end": 110,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_138@1",
            "content": "Since it takes time to obtain pseudogroundtruths given by the edit-based search, we would directly transfer already trained NAUS models to this setting by our length-control decoding.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_138",
            "start": 112,
            "end": 294,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_138@2",
            "content": "Results are shown in Group C, Table 7.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_138",
            "start": 296,
            "end": 333,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_138@3",
            "content": "We observe NASU 10\u219250% is better than NASU 8\u219250% , which makes much sense because the latter has a larger gap during transfer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_138",
            "start": 335,
            "end": 460,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_138@4",
            "content": "Remarkably, both NASU 8\u219250% and NASU 10\u219250% outperform Schumann et al. (2020) and other baselines, achieving new state-of-the-art unsupervised performance on this setting as well.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_138",
            "start": 462,
            "end": 640,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_139@0",
            "content": "We further compare with Su et al. (2021), who use a length penalty to encourage short summaries.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_139",
            "start": 0,
            "end": 95,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_139@1",
            "content": "However, their length control works in the statistical sense but may fail for individual samples.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_139",
            "start": 97,
            "end": 193,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_139@2",
            "content": "Moreover, such a soft length penalty cannot generate longer summaries than trained.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_139",
            "start": 195,
            "end": 277,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_139@3",
            "content": "Even in the setting of 10 \u2192 8, their generates summaries are slightly longer than required, while the performance degrades much more considerably than NAUS.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_139",
            "start": 279,
            "end": 434,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_140@0",
            "content": "These results show that our novel length-control decoding algorithm is not only effective when generating summaries of similar length to the training targets, but also generalizes well to different \u2020 Results quoted from previous papers; others are given by our experiments.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_140",
            "start": 0,
            "end": 272,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_140@1",
            "content": "Su et al. (2021)'s approach has a soft length penalty to encourage short output, but cannot generate longer summaries than trained.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_140",
            "start": 274,
            "end": 404,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_141@0",
            "content": "desired summary lengths without re-training.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_141",
            "start": 0,
            "end": 43,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_141@1",
            "content": "In general, our NAUS is an effective and efficient unsupervised summarization system with the ability of explicit length control.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_141",
            "start": 45,
            "end": 173,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_142@0",
            "content": "Armen Aghajanyan, Anchit Gupta, Akshat Shrivastava, Xilun Chen, Luke Zettlemoyer, Sonal Gupta, Muppet: Massive multi-task representations with pre-finetuning, 2021, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_142",
            "start": 0,
            "end": 172,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_143@0",
            "content": "Armen Aghajanyan, Akshat Shrivastava, Anchit Gupta, Naman Goyal, Luke Zettlemoyer, Sonal Gupta, Better fine-tuning by reducing representational collapse, 2020, ICLR, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_143",
            "start": 0,
            "end": 166,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_144@0",
            "content": "Christos Baziotis, Ion Androutsopoulos, SEQ3: Differentiable sequence-to-sequence-to-sequence autoencoder for unsupervised abstractive sentence compression, 2019, NAACL-HLT, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_144",
            "start": 0,
            "end": 174,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_145@0",
            "content": "William Chan, Chitwan Saharia, Geoffrey Hinton, Mohammad Norouzi, Navdeep Jaitly, Imputer: Sequence modelling via imputation and dynamic programming, 2020, ICML, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_145",
            "start": 0,
            "end": 162,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_146@0",
            "content": "Bonnie Dorr, David Zajic, Richard Schwartz, Hedge trimmer: A parse-and-trim approach to headline generation, 2003, Proc. HLT-NAACL 03 Text Summarization Workshop, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_146",
            "start": 0,
            "end": 163,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_147@0",
            "content": "Thibault F\u00e9vry, Jason Phang, Unsupervised sentence compression using denoising autoencoders, 2018, CoNLL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_147",
            "start": 0,
            "end": 106,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_148@0",
            "content": "Katja Filippova, Enrique Alfonseca, Carlos Colmenares, Lukasz Kaiser, Oriol Vinyals, Sentence compression by deletion with LSTMs, 2015, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_148",
            "start": 0,
            "end": 143,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_149@0",
            "content": "UNKNOWN, None, 2003, , English Gigaword. Linguistic Data Consortium.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_149",
            "start": 0,
            "end": 67,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_150@0",
            "content": "Alex Graves, Santiago Fern\u00e1ndez, Faustino Gomez, J\u00fcrgen Schmidhuber, Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural networks, 2006, ICML, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_150",
            "start": 0,
            "end": 188,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_151@0",
            "content": "Jiatao Gu, James Bradbury, Caiming Xiong, O Victor, Richard Li,  Socher, Non-autoregressive neural machine translation, 2018, ICLR, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_151",
            "start": 0,
            "end": 132,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_152@0",
            "content": "Jiatao Gu, Xiang Kong, Fully nonautoregressive neural machine translation: tricks of the trade, 2021, Findings of ACL-IJCNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_152",
            "start": 0,
            "end": 126,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_153@0",
            "content": "Junliang Guo, Xu Tan, Linli Xu, Tao Qin, Enhong Chen, Tie-Yan Liu, Fine-tuning by curriculum learning for non-autoregressive neural machine translation, 2020, AAAI, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_153",
            "start": 0,
            "end": 165,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_154@0",
            "content": "Zhanying He, Chun Chen, Jiajun Bu, Can Wang, Lijun Zhang, Deng Cai, Xiaofei He, Document summarization based on data reconstruction, 2012, AAAI, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_154",
            "start": 0,
            "end": 145,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_155@0",
            "content": "Chenyang Huang, Hao Zhou, Lili Osmar R Za\u00efane, Lei Mou,  Li, Non-autoregressive translation with layer-wise prediction and deep supervision, 2022, AAAI, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_155",
            "start": 0,
            "end": 153,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_156@0",
            "content": "Ruipeng Jia, Yanan Cao, Haichao Shi, Fang Fang, Pengfei Yin, Shi Wang, Flexible nonautoregressive extractive summarization with threshold: How to extract a non-fixed number of summary sentences, 2021, AAAI, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_156",
            "start": 0,
            "end": 207,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_157@0",
            "content": "Shailza Jolly, Xuan Zi, Andreas Zhang, Lili Dengel,  Mou, Search and learn: Improving semantic coverage for data-to-text generation, 2022, AAAI, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_157",
            "start": 0,
            "end": 145,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_158@0",
            "content": "Julia Kreutzer, Stefan Riezler, Carolin Lawrence, Offline reinforcement learning from human feedback in real-world sequence-to-sequence tasks, 2021, Proc. Workshop on Structured Prediction for NLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_158",
            "start": 0,
            "end": 198,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_159@0",
            "content": "Dhruv Kumar, Lili Mou, Lukasz Golab, Olga Vechtomova, Iterative edit-based unsupervised sentence simplification, 2020, ACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_159",
            "start": 0,
            "end": 124,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_160@0",
            "content": "Jason Lee, Elman Mansimov, Kyunghyun Cho, Deterministic non-autoregressive neural sequence modeling by iterative refinement, 2018, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_160",
            "start": 0,
            "end": 138,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_161@0",
            "content": "Jingjing Li, Zichao Li, Lili Mou, Xin Jiang, Michael Lyu, Irwin King, Unsupervised text generation by learning from search, 2020, NeurIPS, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_161",
            "start": 0,
            "end": 139,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_162@0",
            "content": "Chin-Yew Lin, ROUGE: A package for automatic evaluation of summaries, 2004, Text Summarization Branches Out, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_162",
            "start": 0,
            "end": 109,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_163@0",
            "content": "Xianggen Liu, Pengyong Li, Fandong Meng, Hao Zhou, Huasong Zhong, Jie Zhou, Lili Mou, Sen Song, Simulated annealing for optimization of graphs and sequences, 2021, Neurocomputing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_163",
            "start": 0,
            "end": 180,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_164@0",
            "content": "Xianggen Liu, Lili Mou, Fandong Meng, Hao Zhou, Jie Zhou, Sen Song, Unsupervised paraphrasing by simulated annealing, 2020, ACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_164",
            "start": 0,
            "end": 129,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_165@0",
            "content": "UNKNOWN, None, 2021, Ref-Sum: Refactoring neural summarization. In ACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_165",
            "start": 0,
            "end": 72,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_166@0",
            "content": "Clara Meister, Ryan Cotterell, Tim Vieira, If beam search is the answer, what was the question?, 2020, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_166",
            "start": 0,
            "end": 110,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_167@0",
            "content": "Yishu Miao, Phil Blunsom, Language as a latent variable: Discrete generative models for sentence compression, 2016, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_167",
            "start": 0,
            "end": 123,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_168@0",
            "content": "Ani Nenkova, Sameer Maskey, Yang Liu, Automatic summarization, 2011, ACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_168",
            "start": 0,
            "end": 74,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_169@0",
            "content": "Mari Ostendorf, V Vassilios, Owen A Digalakis,  Kimball, From hmm's to segment models: A unified view of stochastic modeling for speech recognition, 1996, IEEE TASLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_169",
            "start": 0,
            "end": 167,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_170@0",
            "content": "Paul Over, James Yen, An introduction to DUC-2004: Intrinsic evaluation of generic news text summarization systems, 2004, Proc. the Document Understanding Conference, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_170",
            "start": 0,
            "end": 167,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_171@0",
            "content": "Weizhen Qi, Yeyun Gong, Jian Jiao, Yu Yan, Weizhu Chen, Dayiheng Liu, Kewen Tang, Houqiang Li, Jiusheng Chen, Ruofei Zhang, Ming Zhou, Nan Duan, Bang: Bridging autoregressive and non-autoregressive generation with large scale pretraining, 2021, ICML, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_171",
            "start": 0,
            "end": 251,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_172@0",
            "content": "Lihua Qian, Hao Zhou, Yu Bao, Mingxuan Wang, Lin Qiu, Weinan Zhang, Yong Yu, Lei Li, Glancing transformer for non-autoregressive neural machine translation, 2021, ACL-IJCNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_172",
            "start": 0,
            "end": 175,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_173@0",
            "content": "Alexander Rush, Sumit Chopra, Jason Weston, A neural attention model for abstractive sentence summarization, 2015, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_173",
            "start": 0,
            "end": 122,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_174@0",
            "content": "Chitwan Saharia, William Chan, Saurabh Saxena, Mohammad Norouzi, Non-autoregressive machine translation with latent alignments, 2020, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_174",
            "start": 0,
            "end": 141,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_175@0",
            "content": "Raphael Schumann, Lili Mou, Yao Lu, Olga Vechtomova, and Katja Markert. 2020. Discrete optimization for unsupervised sentence summarization with word-level extraction, , ACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_175",
            "start": 0,
            "end": 175,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_176@0",
            "content": "Kaiqiang Song, Bingqing Wang, Zhe Feng, Fei Liu, A new approach to overgenerating and scoring abstractive summaries, 2021, NAACL-HLT, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_176",
            "start": 0,
            "end": 134,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_177@0",
            "content": "Yixuan Su, Deng Cai, Yan Wang, David Vandyke, Simon Baker, Piji Li, Nigel Collier, Nonautoregressive text generation with pre-trained language models, 2021, EACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_177",
            "start": 0,
            "end": 163,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_178@0",
            "content": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan Gomez, \u0141ukasz Kaiser, Illia Polosukhin, Attention is all you need, 2017, NIPS, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_178",
            "start": 0,
            "end": 158,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_179@0",
            "content": "Yaushian Wang, Hung-Yi Lee, Learning to encode text as human-readable summaries using generative adversarial networks, 2018, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_179",
            "start": 0,
            "end": 132,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_180@0",
            "content": "Peter West, Ari Holtzman, BottleSum: Unsupervised and selfsupervised sentence summarization using the information bottleneck principle, 2019-01, EMNLP-IJCNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_180",
            "start": 0,
            "end": 159,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_181@0",
            "content": "Sam Wiseman, Stuart Shieber, Alexander Rush, Learning neural templates for text generation, 2018, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_181",
            "start": 0,
            "end": 105,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_182@0",
            "content": "Kexin Yang, Wenqiang Lei, Dayiheng Liu, Weizhen Qi, Jiancheng Lv, POS-constrained parallel decoding for non-autoregressive generation, 2021, ACL-IJCNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_182",
            "start": 0,
            "end": 153,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_183@0",
            "content": "Ziyi Yang, Chenguang Zhu, Robert Gmyr, Michael Zeng, Xuedong Huang, Eric Darve, TED: A pretrained unsupervised summarization model with theme modeling and denoising, 2020, EMNLP, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_183",
            "start": 0,
            "end": 179,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_184@0",
            "content": "David Zajic, Bonnie Dorr, Richard Schwartz, BBN/UMD at DUC-2004: Topiary, 2004, Proc. HLT-NAACL Document Understanding Workshop, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_184",
            "start": 0,
            "end": 129,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_185@0",
            "content": "Jingqing Zhang, Yao Zhao, Mohammad Saleh, Peter Liu, PEGASUS: Pre-training with extracted gap-sentences for abstractive summarization, 2020, ICML, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_185",
            "start": 0,
            "end": 147,
            "label": {}
        },
        {
            "ix": "252-ARR_v2_186@0",
            "content": "Jiawei Zhou, Alexander Rush, Simple unsupervised summarization by contextual matching, 2019, ACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "252-ARR_v2_186",
            "start": 0,
            "end": 98,
            "label": {}
        }
    ],
    "edges": [
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_1",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_1",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_1",
            "tgt_ix": "252-ARR_v2_2",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_1",
            "tgt_ix": "252-ARR_v2_2",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_3",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_3",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_4",
            "tgt_ix": "252-ARR_v2_5",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_5",
            "tgt_ix": "252-ARR_v2_6",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_6",
            "tgt_ix": "252-ARR_v2_7",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_7",
            "tgt_ix": "252-ARR_v2_8",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_8",
            "tgt_ix": "252-ARR_v2_9",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_4",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_5",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_6",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_7",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_8",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_9",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_10",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_4",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_11",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_10",
            "tgt_ix": "252-ARR_v2_11",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_11",
            "tgt_ix": "252-ARR_v2_12",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_11",
            "tgt_ix": "252-ARR_v2_12",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_11",
            "tgt_ix": "252-ARR_v2_13",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_12",
            "tgt_ix": "252-ARR_v2_13",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_14",
            "tgt_ix": "252-ARR_v2_15",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_15",
            "tgt_ix": "252-ARR_v2_16",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_16",
            "tgt_ix": "252-ARR_v2_17",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_17",
            "tgt_ix": "252-ARR_v2_18",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_18",
            "tgt_ix": "252-ARR_v2_19",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_19",
            "tgt_ix": "252-ARR_v2_20",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_20",
            "tgt_ix": "252-ARR_v2_21",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_14",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_15",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_16",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_17",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_18",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_19",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_20",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_21",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_14",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_11",
            "tgt_ix": "252-ARR_v2_22",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_21",
            "tgt_ix": "252-ARR_v2_22",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_23",
            "tgt_ix": "252-ARR_v2_24",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_24",
            "tgt_ix": "252-ARR_v2_25",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_25",
            "tgt_ix": "252-ARR_v2_26",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_26",
            "tgt_ix": "252-ARR_v2_27",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_27",
            "tgt_ix": "252-ARR_v2_28",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_28",
            "tgt_ix": "252-ARR_v2_29",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_29",
            "tgt_ix": "252-ARR_v2_30",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_30",
            "tgt_ix": "252-ARR_v2_31",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_31",
            "tgt_ix": "252-ARR_v2_32",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_32",
            "tgt_ix": "252-ARR_v2_33",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_33",
            "tgt_ix": "252-ARR_v2_34",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_34",
            "tgt_ix": "252-ARR_v2_35",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_35",
            "tgt_ix": "252-ARR_v2_36",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_36",
            "tgt_ix": "252-ARR_v2_37",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_37",
            "tgt_ix": "252-ARR_v2_38",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_38",
            "tgt_ix": "252-ARR_v2_39",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_23",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_24",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_25",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_26",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_27",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_28",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_29",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_30",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_31",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_32",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_33",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_34",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_35",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_36",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_37",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_38",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_39",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_23",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_11",
            "tgt_ix": "252-ARR_v2_40",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_39",
            "tgt_ix": "252-ARR_v2_40",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_41",
            "tgt_ix": "252-ARR_v2_42",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_42",
            "tgt_ix": "252-ARR_v2_43",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_43",
            "tgt_ix": "252-ARR_v2_44",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_44",
            "tgt_ix": "252-ARR_v2_45",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_45",
            "tgt_ix": "252-ARR_v2_46",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_46",
            "tgt_ix": "252-ARR_v2_47",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_47",
            "tgt_ix": "252-ARR_v2_48",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_48",
            "tgt_ix": "252-ARR_v2_49",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_49",
            "tgt_ix": "252-ARR_v2_50",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_50",
            "tgt_ix": "252-ARR_v2_51",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_51",
            "tgt_ix": "252-ARR_v2_52",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_52",
            "tgt_ix": "252-ARR_v2_53",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_53",
            "tgt_ix": "252-ARR_v2_54",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_54",
            "tgt_ix": "252-ARR_v2_55",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_55",
            "tgt_ix": "252-ARR_v2_56",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_56",
            "tgt_ix": "252-ARR_v2_57",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_57",
            "tgt_ix": "252-ARR_v2_58",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_58",
            "tgt_ix": "252-ARR_v2_59",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_59",
            "tgt_ix": "252-ARR_v2_60",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_60",
            "tgt_ix": "252-ARR_v2_61",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_61",
            "tgt_ix": "252-ARR_v2_62",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_62",
            "tgt_ix": "252-ARR_v2_63",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_63",
            "tgt_ix": "252-ARR_v2_64",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_64",
            "tgt_ix": "252-ARR_v2_65",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_65",
            "tgt_ix": "252-ARR_v2_66",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_66",
            "tgt_ix": "252-ARR_v2_67",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_67",
            "tgt_ix": "252-ARR_v2_68",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_68",
            "tgt_ix": "252-ARR_v2_69",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_69",
            "tgt_ix": "252-ARR_v2_70",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_70",
            "tgt_ix": "252-ARR_v2_71",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_71",
            "tgt_ix": "252-ARR_v2_72",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_72",
            "tgt_ix": "252-ARR_v2_73",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_41",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_42",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_43",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_44",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_45",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_46",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_47",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_48",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_49",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_50",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_51",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_52",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_53",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_54",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_55",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_56",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_57",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_58",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_59",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_60",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_61",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_62",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_63",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_64",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_65",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_66",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_67",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_68",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_69",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_70",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_71",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_72",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_73",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_41",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_74",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_73",
            "tgt_ix": "252-ARR_v2_74",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_74",
            "tgt_ix": "252-ARR_v2_75",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_74",
            "tgt_ix": "252-ARR_v2_75",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_76",
            "tgt_ix": "252-ARR_v2_77",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_77",
            "tgt_ix": "252-ARR_v2_78",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_78",
            "tgt_ix": "252-ARR_v2_79",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_79",
            "tgt_ix": "252-ARR_v2_80",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_80",
            "tgt_ix": "252-ARR_v2_81",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_81",
            "tgt_ix": "252-ARR_v2_82",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_82",
            "tgt_ix": "252-ARR_v2_83",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_76",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_77",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_78",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_79",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_80",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_81",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_82",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_83",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_76",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_74",
            "tgt_ix": "252-ARR_v2_84",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_83",
            "tgt_ix": "252-ARR_v2_84",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_85",
            "tgt_ix": "252-ARR_v2_86",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_86",
            "tgt_ix": "252-ARR_v2_87",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_87",
            "tgt_ix": "252-ARR_v2_88",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_88",
            "tgt_ix": "252-ARR_v2_89",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_89",
            "tgt_ix": "252-ARR_v2_90",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_90",
            "tgt_ix": "252-ARR_v2_91",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_91",
            "tgt_ix": "252-ARR_v2_92",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_92",
            "tgt_ix": "252-ARR_v2_93",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_93",
            "tgt_ix": "252-ARR_v2_94",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_94",
            "tgt_ix": "252-ARR_v2_95",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_95",
            "tgt_ix": "252-ARR_v2_96",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_96",
            "tgt_ix": "252-ARR_v2_97",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_97",
            "tgt_ix": "252-ARR_v2_98",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_85",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_86",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_87",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_88",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_89",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_90",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_91",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_92",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_93",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_94",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_95",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_96",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_97",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_98",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_85",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_99",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_98",
            "tgt_ix": "252-ARR_v2_99",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_100",
            "tgt_ix": "252-ARR_v2_101",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_101",
            "tgt_ix": "252-ARR_v2_102",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_102",
            "tgt_ix": "252-ARR_v2_103",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_103",
            "tgt_ix": "252-ARR_v2_104",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_99",
            "tgt_ix": "252-ARR_v2_100",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_99",
            "tgt_ix": "252-ARR_v2_101",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_99",
            "tgt_ix": "252-ARR_v2_102",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_99",
            "tgt_ix": "252-ARR_v2_103",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_99",
            "tgt_ix": "252-ARR_v2_104",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_99",
            "tgt_ix": "252-ARR_v2_100",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_105",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_105",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_106",
            "tgt_ix": "252-ARR_v2_107",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_105",
            "tgt_ix": "252-ARR_v2_106",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_105",
            "tgt_ix": "252-ARR_v2_107",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_105",
            "tgt_ix": "252-ARR_v2_106",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_108",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_108",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_109",
            "tgt_ix": "252-ARR_v2_110",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_110",
            "tgt_ix": "252-ARR_v2_111",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_111",
            "tgt_ix": "252-ARR_v2_112",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_112",
            "tgt_ix": "252-ARR_v2_113",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_113",
            "tgt_ix": "252-ARR_v2_114",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_114",
            "tgt_ix": "252-ARR_v2_115",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_115",
            "tgt_ix": "252-ARR_v2_116",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_116",
            "tgt_ix": "252-ARR_v2_117",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_117",
            "tgt_ix": "252-ARR_v2_118",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_118",
            "tgt_ix": "252-ARR_v2_119",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_119",
            "tgt_ix": "252-ARR_v2_120",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_120",
            "tgt_ix": "252-ARR_v2_121",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_121",
            "tgt_ix": "252-ARR_v2_122",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_109",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_110",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_111",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_112",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_113",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_114",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_115",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_116",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_117",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_118",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_119",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_120",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_121",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_122",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_109",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_123",
            "tgt_ix": "252-ARR_v2_124",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_125",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_125",
            "tgt_ix": "252-ARR_v2_126",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_123",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_124",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_125",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_126",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_122",
            "tgt_ix": "252-ARR_v2_123",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_127",
            "tgt_ix": "252-ARR_v2_128",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_129",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_129",
            "tgt_ix": "252-ARR_v2_130",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_127",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_128",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_129",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_130",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_126",
            "tgt_ix": "252-ARR_v2_127",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_131",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_130",
            "tgt_ix": "252-ARR_v2_131",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_132",
            "tgt_ix": "252-ARR_v2_133",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_133",
            "tgt_ix": "252-ARR_v2_134",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_132",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_133",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_134",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_131",
            "tgt_ix": "252-ARR_v2_132",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_135",
            "tgt_ix": "252-ARR_v2_136",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_136",
            "tgt_ix": "252-ARR_v2_137",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_137",
            "tgt_ix": "252-ARR_v2_138",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_138",
            "tgt_ix": "252-ARR_v2_139",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_139",
            "tgt_ix": "252-ARR_v2_140",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_140",
            "tgt_ix": "252-ARR_v2_141",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_135",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_136",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_137",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_138",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_139",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_140",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_141",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_134",
            "tgt_ix": "252-ARR_v2_135",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "252-ARR_v2_0",
            "tgt_ix": "252-ARR_v2_0@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_1",
            "tgt_ix": "252-ARR_v2_1@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_2",
            "tgt_ix": "252-ARR_v2_2@7",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_3",
            "tgt_ix": "252-ARR_v2_3@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_4",
            "tgt_ix": "252-ARR_v2_4@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_4",
            "tgt_ix": "252-ARR_v2_4@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_4",
            "tgt_ix": "252-ARR_v2_4@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_5",
            "tgt_ix": "252-ARR_v2_5@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_5",
            "tgt_ix": "252-ARR_v2_5@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_6",
            "tgt_ix": "252-ARR_v2_6@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_6",
            "tgt_ix": "252-ARR_v2_6@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_6",
            "tgt_ix": "252-ARR_v2_6@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_7",
            "tgt_ix": "252-ARR_v2_7@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_7",
            "tgt_ix": "252-ARR_v2_7@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_7",
            "tgt_ix": "252-ARR_v2_7@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_7",
            "tgt_ix": "252-ARR_v2_7@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_7",
            "tgt_ix": "252-ARR_v2_7@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_8",
            "tgt_ix": "252-ARR_v2_8@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_8",
            "tgt_ix": "252-ARR_v2_8@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_8",
            "tgt_ix": "252-ARR_v2_8@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_9",
            "tgt_ix": "252-ARR_v2_9@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_10",
            "tgt_ix": "252-ARR_v2_10@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_10",
            "tgt_ix": "252-ARR_v2_10@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_10",
            "tgt_ix": "252-ARR_v2_10@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_10",
            "tgt_ix": "252-ARR_v2_10@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_11",
            "tgt_ix": "252-ARR_v2_11@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_12",
            "tgt_ix": "252-ARR_v2_12@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_12",
            "tgt_ix": "252-ARR_v2_12@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_12",
            "tgt_ix": "252-ARR_v2_12@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_13",
            "tgt_ix": "252-ARR_v2_13@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_14",
            "tgt_ix": "252-ARR_v2_14@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_14",
            "tgt_ix": "252-ARR_v2_14@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_15",
            "tgt_ix": "252-ARR_v2_15@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_15",
            "tgt_ix": "252-ARR_v2_15@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_16",
            "tgt_ix": "252-ARR_v2_16@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_16",
            "tgt_ix": "252-ARR_v2_16@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_17",
            "tgt_ix": "252-ARR_v2_17@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_18",
            "tgt_ix": "252-ARR_v2_18@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_18",
            "tgt_ix": "252-ARR_v2_18@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_19",
            "tgt_ix": "252-ARR_v2_19@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_19",
            "tgt_ix": "252-ARR_v2_19@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_20",
            "tgt_ix": "252-ARR_v2_20@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_20",
            "tgt_ix": "252-ARR_v2_20@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_20",
            "tgt_ix": "252-ARR_v2_20@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_21",
            "tgt_ix": "252-ARR_v2_21@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_21",
            "tgt_ix": "252-ARR_v2_21@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_22",
            "tgt_ix": "252-ARR_v2_22@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_23",
            "tgt_ix": "252-ARR_v2_23@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_23",
            "tgt_ix": "252-ARR_v2_23@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_23",
            "tgt_ix": "252-ARR_v2_23@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_23",
            "tgt_ix": "252-ARR_v2_23@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_24",
            "tgt_ix": "252-ARR_v2_24@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_24",
            "tgt_ix": "252-ARR_v2_24@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_24",
            "tgt_ix": "252-ARR_v2_24@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_25",
            "tgt_ix": "252-ARR_v2_25@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_26",
            "tgt_ix": "252-ARR_v2_26@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_26",
            "tgt_ix": "252-ARR_v2_26@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_26",
            "tgt_ix": "252-ARR_v2_26@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_27",
            "tgt_ix": "252-ARR_v2_27@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_27",
            "tgt_ix": "252-ARR_v2_27@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_27",
            "tgt_ix": "252-ARR_v2_27@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_27",
            "tgt_ix": "252-ARR_v2_27@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_28",
            "tgt_ix": "252-ARR_v2_28@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_29",
            "tgt_ix": "252-ARR_v2_29@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_30",
            "tgt_ix": "252-ARR_v2_30@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_31",
            "tgt_ix": "252-ARR_v2_31@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_32",
            "tgt_ix": "252-ARR_v2_32@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_33",
            "tgt_ix": "252-ARR_v2_33@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_34",
            "tgt_ix": "252-ARR_v2_34@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_35",
            "tgt_ix": "252-ARR_v2_35@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_36",
            "tgt_ix": "252-ARR_v2_36@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_37",
            "tgt_ix": "252-ARR_v2_37@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_38",
            "tgt_ix": "252-ARR_v2_38@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_38",
            "tgt_ix": "252-ARR_v2_38@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_39",
            "tgt_ix": "252-ARR_v2_39@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_39",
            "tgt_ix": "252-ARR_v2_39@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_39",
            "tgt_ix": "252-ARR_v2_39@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_40",
            "tgt_ix": "252-ARR_v2_40@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_41",
            "tgt_ix": "252-ARR_v2_41@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_41",
            "tgt_ix": "252-ARR_v2_41@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_42",
            "tgt_ix": "252-ARR_v2_42@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_42",
            "tgt_ix": "252-ARR_v2_42@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_42",
            "tgt_ix": "252-ARR_v2_42@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_42",
            "tgt_ix": "252-ARR_v2_42@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_43",
            "tgt_ix": "252-ARR_v2_43@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_44",
            "tgt_ix": "252-ARR_v2_44@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_45",
            "tgt_ix": "252-ARR_v2_45@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_45",
            "tgt_ix": "252-ARR_v2_45@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_45",
            "tgt_ix": "252-ARR_v2_45@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_45",
            "tgt_ix": "252-ARR_v2_45@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_46",
            "tgt_ix": "252-ARR_v2_46@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_47",
            "tgt_ix": "252-ARR_v2_47@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_48",
            "tgt_ix": "252-ARR_v2_48@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_49",
            "tgt_ix": "252-ARR_v2_49@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_50",
            "tgt_ix": "252-ARR_v2_50@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_51",
            "tgt_ix": "252-ARR_v2_51@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_52",
            "tgt_ix": "252-ARR_v2_52@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_53",
            "tgt_ix": "252-ARR_v2_53@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_54",
            "tgt_ix": "252-ARR_v2_54@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_55",
            "tgt_ix": "252-ARR_v2_55@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_55",
            "tgt_ix": "252-ARR_v2_55@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_55",
            "tgt_ix": "252-ARR_v2_55@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_55",
            "tgt_ix": "252-ARR_v2_55@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_56",
            "tgt_ix": "252-ARR_v2_56@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_56",
            "tgt_ix": "252-ARR_v2_56@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_57",
            "tgt_ix": "252-ARR_v2_57@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_57",
            "tgt_ix": "252-ARR_v2_57@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_57",
            "tgt_ix": "252-ARR_v2_57@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_57",
            "tgt_ix": "252-ARR_v2_57@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_58",
            "tgt_ix": "252-ARR_v2_58@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_58",
            "tgt_ix": "252-ARR_v2_58@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_58",
            "tgt_ix": "252-ARR_v2_58@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_58",
            "tgt_ix": "252-ARR_v2_58@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_58",
            "tgt_ix": "252-ARR_v2_58@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_59",
            "tgt_ix": "252-ARR_v2_59@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_59",
            "tgt_ix": "252-ARR_v2_59@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_60",
            "tgt_ix": "252-ARR_v2_60@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_61",
            "tgt_ix": "252-ARR_v2_61@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_62",
            "tgt_ix": "252-ARR_v2_62@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_62",
            "tgt_ix": "252-ARR_v2_62@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_62",
            "tgt_ix": "252-ARR_v2_62@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_63",
            "tgt_ix": "252-ARR_v2_63@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_64",
            "tgt_ix": "252-ARR_v2_64@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_64",
            "tgt_ix": "252-ARR_v2_64@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_65",
            "tgt_ix": "252-ARR_v2_65@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_66",
            "tgt_ix": "252-ARR_v2_66@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_67",
            "tgt_ix": "252-ARR_v2_67@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_68",
            "tgt_ix": "252-ARR_v2_68@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_69",
            "tgt_ix": "252-ARR_v2_69@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_70",
            "tgt_ix": "252-ARR_v2_70@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_71",
            "tgt_ix": "252-ARR_v2_71@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_72",
            "tgt_ix": "252-ARR_v2_72@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_73",
            "tgt_ix": "252-ARR_v2_73@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_73",
            "tgt_ix": "252-ARR_v2_73@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_73",
            "tgt_ix": "252-ARR_v2_73@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_74",
            "tgt_ix": "252-ARR_v2_74@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_75",
            "tgt_ix": "252-ARR_v2_75@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_76",
            "tgt_ix": "252-ARR_v2_76@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_76",
            "tgt_ix": "252-ARR_v2_76@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_77",
            "tgt_ix": "252-ARR_v2_77@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_77",
            "tgt_ix": "252-ARR_v2_77@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_77",
            "tgt_ix": "252-ARR_v2_77@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_78",
            "tgt_ix": "252-ARR_v2_78@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_78",
            "tgt_ix": "252-ARR_v2_78@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_79",
            "tgt_ix": "252-ARR_v2_79@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_79",
            "tgt_ix": "252-ARR_v2_79@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_80",
            "tgt_ix": "252-ARR_v2_80@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_80",
            "tgt_ix": "252-ARR_v2_80@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_80",
            "tgt_ix": "252-ARR_v2_80@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_81",
            "tgt_ix": "252-ARR_v2_81@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_81",
            "tgt_ix": "252-ARR_v2_81@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_81",
            "tgt_ix": "252-ARR_v2_81@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_82",
            "tgt_ix": "252-ARR_v2_82@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_82",
            "tgt_ix": "252-ARR_v2_82@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_83",
            "tgt_ix": "252-ARR_v2_83@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_83",
            "tgt_ix": "252-ARR_v2_83@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_83",
            "tgt_ix": "252-ARR_v2_83@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_83",
            "tgt_ix": "252-ARR_v2_83@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_84",
            "tgt_ix": "252-ARR_v2_84@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_85",
            "tgt_ix": "252-ARR_v2_85@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_85",
            "tgt_ix": "252-ARR_v2_85@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_85",
            "tgt_ix": "252-ARR_v2_85@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_86",
            "tgt_ix": "252-ARR_v2_86@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_86",
            "tgt_ix": "252-ARR_v2_86@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_86",
            "tgt_ix": "252-ARR_v2_86@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_86",
            "tgt_ix": "252-ARR_v2_86@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_86",
            "tgt_ix": "252-ARR_v2_86@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_87",
            "tgt_ix": "252-ARR_v2_87@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_87",
            "tgt_ix": "252-ARR_v2_87@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_87",
            "tgt_ix": "252-ARR_v2_87@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_87",
            "tgt_ix": "252-ARR_v2_87@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_87",
            "tgt_ix": "252-ARR_v2_87@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_87",
            "tgt_ix": "252-ARR_v2_87@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_88",
            "tgt_ix": "252-ARR_v2_88@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_88",
            "tgt_ix": "252-ARR_v2_88@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_88",
            "tgt_ix": "252-ARR_v2_88@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_89",
            "tgt_ix": "252-ARR_v2_89@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_89",
            "tgt_ix": "252-ARR_v2_89@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_89",
            "tgt_ix": "252-ARR_v2_89@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_90",
            "tgt_ix": "252-ARR_v2_90@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_90",
            "tgt_ix": "252-ARR_v2_90@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_91",
            "tgt_ix": "252-ARR_v2_91@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_92",
            "tgt_ix": "252-ARR_v2_92@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_92",
            "tgt_ix": "252-ARR_v2_92@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_93",
            "tgt_ix": "252-ARR_v2_93@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_93",
            "tgt_ix": "252-ARR_v2_93@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_93",
            "tgt_ix": "252-ARR_v2_93@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_93",
            "tgt_ix": "252-ARR_v2_93@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_94",
            "tgt_ix": "252-ARR_v2_94@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_94",
            "tgt_ix": "252-ARR_v2_94@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_94",
            "tgt_ix": "252-ARR_v2_94@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_95",
            "tgt_ix": "252-ARR_v2_95@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_95",
            "tgt_ix": "252-ARR_v2_95@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_95",
            "tgt_ix": "252-ARR_v2_95@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_95",
            "tgt_ix": "252-ARR_v2_95@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_95",
            "tgt_ix": "252-ARR_v2_95@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_95",
            "tgt_ix": "252-ARR_v2_95@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_96",
            "tgt_ix": "252-ARR_v2_96@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_97",
            "tgt_ix": "252-ARR_v2_97@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_97",
            "tgt_ix": "252-ARR_v2_97@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_98",
            "tgt_ix": "252-ARR_v2_98@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_98",
            "tgt_ix": "252-ARR_v2_98@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_99",
            "tgt_ix": "252-ARR_v2_99@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_100",
            "tgt_ix": "252-ARR_v2_100@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_100",
            "tgt_ix": "252-ARR_v2_100@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_100",
            "tgt_ix": "252-ARR_v2_100@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_101",
            "tgt_ix": "252-ARR_v2_101@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_101",
            "tgt_ix": "252-ARR_v2_101@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_101",
            "tgt_ix": "252-ARR_v2_101@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_101",
            "tgt_ix": "252-ARR_v2_101@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_101",
            "tgt_ix": "252-ARR_v2_101@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_101",
            "tgt_ix": "252-ARR_v2_101@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_102",
            "tgt_ix": "252-ARR_v2_102@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_102",
            "tgt_ix": "252-ARR_v2_102@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_102",
            "tgt_ix": "252-ARR_v2_102@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_103",
            "tgt_ix": "252-ARR_v2_103@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_103",
            "tgt_ix": "252-ARR_v2_103@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_103",
            "tgt_ix": "252-ARR_v2_103@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_103",
            "tgt_ix": "252-ARR_v2_103@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_104@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_104@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_104@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_104@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_104@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_104@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_104",
            "tgt_ix": "252-ARR_v2_104@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_105",
            "tgt_ix": "252-ARR_v2_105@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_106",
            "tgt_ix": "252-ARR_v2_106@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_106",
            "tgt_ix": "252-ARR_v2_106@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_106",
            "tgt_ix": "252-ARR_v2_106@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_107@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_107@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_107@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_107@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_107@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_107@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_107",
            "tgt_ix": "252-ARR_v2_107@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_108",
            "tgt_ix": "252-ARR_v2_108@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_109",
            "tgt_ix": "252-ARR_v2_109@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_109",
            "tgt_ix": "252-ARR_v2_109@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_110",
            "tgt_ix": "252-ARR_v2_110@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_110",
            "tgt_ix": "252-ARR_v2_110@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_110",
            "tgt_ix": "252-ARR_v2_110@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_111",
            "tgt_ix": "252-ARR_v2_111@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_111",
            "tgt_ix": "252-ARR_v2_111@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_112",
            "tgt_ix": "252-ARR_v2_112@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_113",
            "tgt_ix": "252-ARR_v2_113@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_114",
            "tgt_ix": "252-ARR_v2_114@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_114",
            "tgt_ix": "252-ARR_v2_114@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_114",
            "tgt_ix": "252-ARR_v2_114@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_114",
            "tgt_ix": "252-ARR_v2_114@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_114",
            "tgt_ix": "252-ARR_v2_114@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_115",
            "tgt_ix": "252-ARR_v2_115@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_116",
            "tgt_ix": "252-ARR_v2_116@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_116",
            "tgt_ix": "252-ARR_v2_116@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_117",
            "tgt_ix": "252-ARR_v2_117@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_117",
            "tgt_ix": "252-ARR_v2_117@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_118",
            "tgt_ix": "252-ARR_v2_118@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_119",
            "tgt_ix": "252-ARR_v2_119@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_119",
            "tgt_ix": "252-ARR_v2_119@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_119",
            "tgt_ix": "252-ARR_v2_119@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_120",
            "tgt_ix": "252-ARR_v2_120@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_121",
            "tgt_ix": "252-ARR_v2_121@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_121",
            "tgt_ix": "252-ARR_v2_121@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_121",
            "tgt_ix": "252-ARR_v2_121@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_121",
            "tgt_ix": "252-ARR_v2_121@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_122",
            "tgt_ix": "252-ARR_v2_122@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_122",
            "tgt_ix": "252-ARR_v2_122@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_122",
            "tgt_ix": "252-ARR_v2_122@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_122",
            "tgt_ix": "252-ARR_v2_122@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_122",
            "tgt_ix": "252-ARR_v2_122@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_123",
            "tgt_ix": "252-ARR_v2_123@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_123",
            "tgt_ix": "252-ARR_v2_123@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_124",
            "tgt_ix": "252-ARR_v2_124@7",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_125",
            "tgt_ix": "252-ARR_v2_125@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_125",
            "tgt_ix": "252-ARR_v2_125@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_125",
            "tgt_ix": "252-ARR_v2_125@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_125",
            "tgt_ix": "252-ARR_v2_125@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_125",
            "tgt_ix": "252-ARR_v2_125@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_126",
            "tgt_ix": "252-ARR_v2_126@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_127",
            "tgt_ix": "252-ARR_v2_127@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_127",
            "tgt_ix": "252-ARR_v2_127@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_128@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_128@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_128@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_128@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_128@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_128@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_128",
            "tgt_ix": "252-ARR_v2_128@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_129",
            "tgt_ix": "252-ARR_v2_129@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_129",
            "tgt_ix": "252-ARR_v2_129@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_129",
            "tgt_ix": "252-ARR_v2_129@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_129",
            "tgt_ix": "252-ARR_v2_129@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_129",
            "tgt_ix": "252-ARR_v2_129@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_129",
            "tgt_ix": "252-ARR_v2_129@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_130",
            "tgt_ix": "252-ARR_v2_130@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_130",
            "tgt_ix": "252-ARR_v2_130@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_131",
            "tgt_ix": "252-ARR_v2_131@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_131",
            "tgt_ix": "252-ARR_v2_131@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_132",
            "tgt_ix": "252-ARR_v2_132@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_132",
            "tgt_ix": "252-ARR_v2_132@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_133",
            "tgt_ix": "252-ARR_v2_133@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_133",
            "tgt_ix": "252-ARR_v2_133@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_133",
            "tgt_ix": "252-ARR_v2_133@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_134",
            "tgt_ix": "252-ARR_v2_134@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_134",
            "tgt_ix": "252-ARR_v2_134@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_134",
            "tgt_ix": "252-ARR_v2_134@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_135",
            "tgt_ix": "252-ARR_v2_135@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_135",
            "tgt_ix": "252-ARR_v2_135@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_136",
            "tgt_ix": "252-ARR_v2_136@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_136",
            "tgt_ix": "252-ARR_v2_136@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_137",
            "tgt_ix": "252-ARR_v2_137@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_137",
            "tgt_ix": "252-ARR_v2_137@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_138",
            "tgt_ix": "252-ARR_v2_138@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_138",
            "tgt_ix": "252-ARR_v2_138@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_138",
            "tgt_ix": "252-ARR_v2_138@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_138",
            "tgt_ix": "252-ARR_v2_138@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_138",
            "tgt_ix": "252-ARR_v2_138@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_139",
            "tgt_ix": "252-ARR_v2_139@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_139",
            "tgt_ix": "252-ARR_v2_139@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_139",
            "tgt_ix": "252-ARR_v2_139@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_139",
            "tgt_ix": "252-ARR_v2_139@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_140",
            "tgt_ix": "252-ARR_v2_140@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_140",
            "tgt_ix": "252-ARR_v2_140@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_141",
            "tgt_ix": "252-ARR_v2_141@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_141",
            "tgt_ix": "252-ARR_v2_141@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_142",
            "tgt_ix": "252-ARR_v2_142@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_143",
            "tgt_ix": "252-ARR_v2_143@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_144",
            "tgt_ix": "252-ARR_v2_144@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_145",
            "tgt_ix": "252-ARR_v2_145@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_146",
            "tgt_ix": "252-ARR_v2_146@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_147",
            "tgt_ix": "252-ARR_v2_147@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_148",
            "tgt_ix": "252-ARR_v2_148@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_149",
            "tgt_ix": "252-ARR_v2_149@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_150",
            "tgt_ix": "252-ARR_v2_150@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_151",
            "tgt_ix": "252-ARR_v2_151@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_152",
            "tgt_ix": "252-ARR_v2_152@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_153",
            "tgt_ix": "252-ARR_v2_153@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_154",
            "tgt_ix": "252-ARR_v2_154@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_155",
            "tgt_ix": "252-ARR_v2_155@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_156",
            "tgt_ix": "252-ARR_v2_156@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_157",
            "tgt_ix": "252-ARR_v2_157@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_158",
            "tgt_ix": "252-ARR_v2_158@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_159",
            "tgt_ix": "252-ARR_v2_159@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_160",
            "tgt_ix": "252-ARR_v2_160@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_161",
            "tgt_ix": "252-ARR_v2_161@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_162",
            "tgt_ix": "252-ARR_v2_162@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_163",
            "tgt_ix": "252-ARR_v2_163@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_164",
            "tgt_ix": "252-ARR_v2_164@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_165",
            "tgt_ix": "252-ARR_v2_165@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_166",
            "tgt_ix": "252-ARR_v2_166@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_167",
            "tgt_ix": "252-ARR_v2_167@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_168",
            "tgt_ix": "252-ARR_v2_168@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_169",
            "tgt_ix": "252-ARR_v2_169@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_170",
            "tgt_ix": "252-ARR_v2_170@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_171",
            "tgt_ix": "252-ARR_v2_171@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_172",
            "tgt_ix": "252-ARR_v2_172@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_173",
            "tgt_ix": "252-ARR_v2_173@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_174",
            "tgt_ix": "252-ARR_v2_174@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_175",
            "tgt_ix": "252-ARR_v2_175@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_176",
            "tgt_ix": "252-ARR_v2_176@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_177",
            "tgt_ix": "252-ARR_v2_177@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_178",
            "tgt_ix": "252-ARR_v2_178@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_179",
            "tgt_ix": "252-ARR_v2_179@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_180",
            "tgt_ix": "252-ARR_v2_180@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_181",
            "tgt_ix": "252-ARR_v2_181@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_182",
            "tgt_ix": "252-ARR_v2_182@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_183",
            "tgt_ix": "252-ARR_v2_183@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_184",
            "tgt_ix": "252-ARR_v2_184@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_185",
            "tgt_ix": "252-ARR_v2_185@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "252-ARR_v2_186",
            "tgt_ix": "252-ARR_v2_186@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        }
    ],
    "prefix": "paper.tei",
    "meta": {
        "ix_counter": 1242,
        "sentence_split_type": "HybridSplitterLessAndLong",
        "sentence_split_model": "HybridSplitterLessAndLong_SciSpacy+Spacy",
        "doc_id": "252-ARR",
        "version": 2
    }
}