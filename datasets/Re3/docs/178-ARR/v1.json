{
    "nodes": [
        {
            "ix": "178-ARR_v1_0",
            "content": "Fusing Heterogeneous Factors with Triaffine Mechanism for Nested Named Entity Recognition",
            "ntype": "article-title",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_1",
            "content": "Abstract",
            "ntype": "abstract",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_2",
            "content": "Nested entities are observed in many domains due to their compositionality, which cannot be easily recognized by the widely-used sequence labeling framework. A natural solution is to treat the task as a span classification problem. To learn better span representation and increase classification performance, it is crucial to effectively integrate heterogeneous factors including inside tokens, boundaries, labels, and related spans which could be contributing to nested entities recognition. To fuse these heterogeneous factors, we propose a novel triaffine mechanism including triaffine attention and scoring. Triaffine attention uses boundaries and labels as queries, and uses inside tokens and related spans as keys and values for span representations. Triaffine scoring interacts with boundaries and span representations for classification. Experiments show that our proposed method achieves the state-of-the-art F 1 scores on four nested NER datasets: ACE2004, ACE2005, GENIA, and KBP2017.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_3",
            "content": "Introduction",
            "ntype": "title",
            "meta": {
                "section": "1"
            }
        },
        {
            "ix": "178-ARR_v1_4",
            "content": "Named entity recognition (NER) is a fundamental natural language processing task that extracts entities from texts. Flat NER has been well studied and is usually viewed as a sequence labeling problem (Lample et al., 2016). However, nested entities also widely exist in real-world applications due to their multi-granularity semantic meaning (Alex et al., 2007;Yuan et al., 2020), which cannot be solved by the sequence labeling framework since tokens have multiple labels (Finkel and Manning, 2009).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_5",
            "content": "Various paradigms for nested NER have been proposed in recent years. A representative direction is the span-based approach that learns deep representation for every possible span and then classifies it to the corresponding type (Zheng et al., 2019;Xia et al., 2019;Tan et al., 2020;Yu et al., 2020). By leveraging the large-scale pretrained language a defective NF -chi B site was completely inactive in EBV -transformed B cells , \u2026 model, several works show that the simple model structure for span representation and classification can achieve satisfactory results Zhong and Chen, 2021). However, we still believe that explicit modeling of some relevant features will further benefit the span representation and classification under the complex nested setting. Taking Figure 1 as an example, we claim that the following factors are critical for recognizing whether a span is an entity. (1) Tokens: It is obvious that tokens of the given span contribute to the recognition. (2) Boundaries: We emphasize boundaries (or boundary tokens) because they are special tokens with rich semantics. Works with simple structure may just produce the span representation based on the concatenation or biaffine transformation of boundary representation (Yu et al., 2020;Fu et al., 2021). Some other works take boundary detection as additional supervision for better representation learning (Zheng et al., 2019;Tan et al., 2020). More importantly, a unilateral boundary cannot determine the entity type since it can exist in multiple entities with different labels (e.g., \"NF\", \"B\", and \"cells\") under the nested setting. (3) Labels: As mentioned above, tokens could belong to entities with different labels. Therefore, we propose that the model should learn label-aware span representation to take into consideration of the different token contributions at the label level. 1 For exam-ple, \"NF\" may contribute more to \"protein\" type when classifying the span \"NF -chi B\", as well as \"chi B\" and \"site\" contribute more to \"DNA\" type when classifying the span \"NF -chi B site\". (4) Related spans: Interactions among spans are important in nested entities (Luo and Zhao, 2020;Fu et al., 2021). The insider and outsider entities may hint at each other's types. For example, entities inside \"EBV-transformed B cells\" have more possibilities to be cell-related entities. Interactions can also help the non-entity span like \"transformed B cells\" to validate its partialness by looking at outer entity \"EBV -transformed B cells\".",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_6",
            "content": "Although some of the factors may be explored in previous works, to the best of our knowledge, it is the first work to fuse all these heterogeneous factors into a unified network. As the traditional additive, multiplicative attention, or biaffine transformation cannot interact with such multiple heterogeneous factors simultaneously, we propose a novel triaffine mechanism as the tensor multiplication with three rank-1 tensors (vectors) and a rank-3 tensor, which makes it possible to jointly consider high-order interactions among multiple factors. Specifically, our method follows the pipeline of span representation learning and classification. At the stage of span representation learning, we apply the triaffine attention to aggregate the label-wise span representations by considering boundaries and labels as queries as well as inside tokens as keys and values. Then, a similar triaffine attention is applied to produce the label-wise cross-span representations by querying boundaries and labels with related spans. At the stage of span classification, we fuse the span representations and boundaries for label-wise classification with a triaffine score function. In practice, we add an auxiliary object function to classify spans without the cross-span interaction, which benefits learning robust span representation and can be used as a span filter to speed up both training and inference without performance degradation.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_7",
            "content": "We conduct experiments on four nested NER datasets: ACE2004, ACE2005, GENIA, and KBP2017. Our model achieves 88.56, 88.83, 81.23, and 87.27 scores in terms of F 1 , respectively, outperforming state-of-the-art methods. Ablation studies show the effectiveness of each factor and the superiority of the triaffine mechanism. We will release our codes and models for further research.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_8",
            "content": "Our contributions are summarized as:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_9",
            "content": "\u2022 We propose that heterogeneous factors (i.e., tokens, boundaries, labels, related spans) should be taken into consideration in the spanbased methods for nested NER. \u2022 We propose a span-based method with a novel triaffine mechanism including triaffine attention and scoring to fuse the above-mentioned heterogeneous factors for span representations and classification. \u2022 Experiments show that our proposed method performs better than existing span-based methods and achieves state-of-the-arts performances on four nested NER datasets.",
            "ntype": "list",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_10",
            "content": "2 Related Work",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_11",
            "content": "Nested NER",
            "ntype": "title",
            "meta": {
                "section": "2.1"
            }
        },
        {
            "ix": "178-ARR_v1_12",
            "content": "Nested NER approaches do not have a unified paradigm. Here we mainly focus on span-based methods since they are close to our work. The span-based methods are one of the most mainstream ways for the nested NER. With the development of pre-training, it is easy to obtain the span representation by the concatenation of boundary representation Zhong and Chen, 2021) or the aggregated representation of tokens (Zheng et al., 2019;, and then follow a linear layer (Xia et al., 2019) or biaffine transformation (Yu et al., 2020) for classification. Several works improve the span-based methods with additional features or supervision. Zheng et al. (2019); Tan et al. (2020) point out the importance of boundaries and therefore introduce the boundary detection task. propose Pyramid to allow interactions between spans from different layers. Fu et al. (2021) adopt TreeCRF to model interactions between nested spans. Compared with previous methods, our method can jointly fuse multiple heterogeneous factors with the proposed triaffine mechanism.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_13",
            "content": "Other methods for nested NER vary greatly. Earlier research on nested NER is rule-based (Zhang et al., 2004). Lu and Roth (2015); Katiyar and Cardie (2018); leverage the hypergraph to represent all possible nested structures, which needs to be carefully designed to avoid spurious structures and structural ambiguities. ; Fisher and Vlachos (2019) predict the transition actions to construct nested entities. propose an anchor-based method to recognize entities. There are other works that recognize entities in a generative fashion (Yan et al., 2021;. Generally, it is not a unified framework for nested NER, and we model it with a span-based method since it is most straightforward.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_14",
            "content": "Affine Transformations in NLP",
            "ntype": "title",
            "meta": {
                "section": "2.2"
            }
        },
        {
            "ix": "178-ARR_v1_15",
            "content": "Dozat and Manning (2017) introduce the biaffine transformation in the dependency parsing task for arc classification. Later, it is widely used in many tasks that need to model bilateral representations Yu et al., 2020). The triaffine transformation is further introduced to extend biaffine transformation for high-order interaction in the field of dependency parsing (Wang et al., 2019; and semantic role labeling (Li et al., 2020b). There are two key differences between our triaffine transformation and theirs. Firstly, they only model the homogeneous features such as three tokens, but our triaffine transformation can model heterogeneous factors. Secondly, they usually leverage triaffine transformation to obtain log potentials for CRFs, but we apply it for span representation and classification.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_16",
            "content": "Approach",
            "ntype": "title",
            "meta": {
                "section": "3"
            }
        },
        {
            "ix": "178-ARR_v1_17",
            "content": "Figure 2 shows an overview of our method. We will first introduce the triaffine transformations, which lie in the heart of our model to fuse heterogeneous factors. Then, we will introduce our model based on the proposed triaffine transformations.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_18",
            "content": "Deep Triaffine Transformation",
            "ntype": "title",
            "meta": {
                "section": "3.1"
            }
        },
        {
            "ix": "178-ARR_v1_19",
            "content": "We define the deep triaffine transformation with vectors u, v, w \u2208 R d and a tensor W \u2208 R d+1 \u00d7 R d \u00d7 R d+1 which outputs a scalar by applying distinct MLP transformations on input vectors and calculating tensor vector multiplications.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_20",
            "content": "u \u2032 = MLP(u) 1 , v \u2032 = MLP(v) 1 (1) w \u2032 =MLP(w) (2) TriAff(u, v, w, W) =W \u00d7 1 u \u2032 \u00d7 2 w \u2032 \u00d7 3 v \u2032 (3)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_21",
            "content": "where \u00d7 n is the mode-n tensor vector multiplication. A constant 1 is concatenated with inputs to retain the biaffine transformation. The tensor W is initialized using N (0, \u03c3 2 ). In our approach, we use boundary representations as u and v. Inside tokens or span representations are used as w. We denote the tensors in the triaffine attention as {W r } and triaffine scoring as {V r }, which decouples attention weights and scores for different labels.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_22",
            "content": "Text Encoding",
            "ntype": "title",
            "meta": {
                "section": "3.2"
            }
        },
        {
            "ix": "178-ARR_v1_23",
            "content": "We follow and to encode the text. For text",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_24",
            "content": "X = [x 1 , x 2 , ..., x N ]",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_25",
            "content": "with N tokens, we first generate the contextual embedding x c i with the pre-trained language model,",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_26",
            "content": "x c 1 , x c 2 , ..., x c N = PLM(x 1 , x 2 , ..., x N )(4)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_27",
            "content": "Then, we concatenate x c i with word embedding x w i , part-of-speech embedding x p i and character embedding x ch i , and feed the concatenated embedding x i into a BiLSTM (Hochreiter and Schmidhuber, 1997) to obtain the token representations {h i }.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_28",
            "content": "Triaffine Attention for Span Representations",
            "ntype": "title",
            "meta": {
                "section": "3.3"
            }
        },
        {
            "ix": "178-ARR_v1_29",
            "content": "To fuse heterogeneous factors for better span representation, we propose a triaffine attention mechanism shown in Figure 3a. To interact tokens with labels and boundaries, we learn the label-wise span representation h i,j,r with the triaffine attention \u03b1 i,j,k,r for the span (i, j):",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_30",
            "content": "s i,j,k,r = TriAff(h i , h j , h k , W r ) (5) \u03b1 i,j,k,r = exp(s i,j,k,r ) j k \u2032 =i exp(s i,j,k \u2032 ,r )(6)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_31",
            "content": "h i,j,r = j k=i \u03b1 i,j,k,r MLP(h k )(7)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_32",
            "content": "Boundary representations (h i , h j ) and the labelwise parameters (W r ) can be viewed as attention queries, and tokens (h k ) can be viewed as keys and values. Compared with the general attention framework (additive or multiplicative attention), our triaffine attention permits all high-order interactions between heterogeneous queries and keys.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_33",
            "content": "Triaffine Attention for Cross-span Representations",
            "ntype": "title",
            "meta": {
                "section": "3.4"
            }
        },
        {
            "ix": "178-ARR_v1_34",
            "content": "Motivated by the span-level interactions in the nested setting, we fuse related spans information into cross-span representations. We view the boundaries of the span and labels as attention queries, related spans (containing the span itself) as attention keys and values to obtain cross-span representations. Similar to the Equation 7, we obtain label-wise cross-span representations h c i,j,r for the span (i, j) based on triaffine attention \u03b2 i,j,g,r .",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_35",
            "content": "\u210e ! \u210e \" \u2026 \u210e ! ! ,$ ! ,% \u2026 \ud835\udcb2 % \ud835\udcb1 % \ud835\udc5e !$&% \ud835\udc61 !$&% \ud835\udefd !$&% softmax (a) Triaffine Attention (b) Triaffine Scoring 1,4 \u2297 1 2 3 4 5 \ud835\udcb1 % \u210e ! \u210e \" \u210e \",!,$ %(",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_36",
            "content": "q i,j,g,r = TriAff(h i , h j , h ig,jg,r , W r ) (8)",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_37",
            "content": "\u03b2 i,j,g,r = exp(q i,j,g,r )",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_38",
            "content": "g \u2032 exp(q i,j,g \u2032 ,r )(9)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_39",
            "content": "h c i,j,r = g \u03b2 i,j,g,r MLP(h ig,jg,r )(10)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_40",
            "content": "where {(i g , j g )} are the related spans. One can treat all enumerated spans as related spans, and we will introduce how we select them in Section 3.6.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_41",
            "content": "Triaffine Scoring for Span Classification",
            "ntype": "title",
            "meta": {
                "section": "3.5"
            }
        },
        {
            "ix": "178-ARR_v1_42",
            "content": "To classify the entity type of the span, we calculate label-wise scores based on cross-span representations. Since boundary information has been proved effective in previous works (Yu et al., 2020;Fu et al., 2021), we leverage the boundaries information and cross-span representations for span classification via triaffine scoring. Specifically, we estimate the log probabilities p c i,j,r of the span (i, j) for label r using boundaries h i , h j and cross-span representations h c i,j,r .",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_43",
            "content": "p c i,j,r = TriAff(h i , h j , h c i,j,r , V r )(11)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_44",
            "content": "Since h c i,j,r are composed by h ig,jg,r , we can decompose Equation 11 into:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_45",
            "content": "t i,j,g,r = TriAff(h i , h j , h ig,jg,r , V r ) (12",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_46",
            "content": ")",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_47",
            "content": "p c i,j,r = g \u03b2 i,j,g,r t i,j,g,r(13)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_48",
            "content": "Figure 3b and 3c show the mechanism of triaffine scoring and the decomposition. We also apply the similar decomposition functions in the auxiliary span classification task, which applies the triaffine scoring on boundary representations and intermediate span representations h i,j,r to estimate log probabilities p i,j,r as intermediate predictions.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_49",
            "content": "Training and Inference",
            "ntype": "title",
            "meta": {
                "section": "3.6"
            }
        },
        {
            "ix": "178-ARR_v1_50",
            "content": "In practice, it is expensive and non-informative to consider interactions between all spans. Therefore, we propose an auxiliary task to classify spans with intermediate span representations. Then, we can rank all spans based on the maximum of log probabilities (except None) from the intermediate predictions p i,j = max R r=1 p i,j,r , and retain top-m spans {(i l , j l )} m l=1 as candidates. We calculate cross-span representations h c i l ,j l ,r for retained spans by considering the full interactions among them, and estimate the classification logits p c i l ,j l ,r . Thus, we have two groups of predictions in our model {p i,j,r } 1\u2264i\u2264j\u2264N and {p c i l ,j l ,r } 1\u2264l\u2264m . {p i,j,r } are calculated for every possible span, and {p c i l ,j l ,r } are calculated only on top-m spans.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_51",
            "content": "In the training phase, we jointly minimize two groups of cross-entropy losses:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_52",
            "content": "L aux = \u2212 2 N (N + 1) i,j log exp(p i,j,r ij ) r exp(p i,j,r )(14)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_53",
            "content": "L main = \u2212 1 m 1\u2264l\u2264m log exp(p c i l ,j l ,r i l ,j l ) r exp(p c i l ,j l ,r )(15)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_54",
            "content": "L =\u00b5 aux L aux + L main (16)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_55",
            "content": "where r ij is the label of span (i, j).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_56",
            "content": "In both the training and inference phase, {p i,j,r } are used to select spans with high possibilities based on the supervision from L aux . We inference the labels of selected spans using {p c i l ,j l ,r } by assigning label ri l ,j l = arg r max p c i l ,j l ,r , and we assign None class for others.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_57",
            "content": "Experiments",
            "ntype": "title",
            "meta": {
                "section": "4"
            }
        },
        {
            "ix": "178-ARR_v1_58",
            "content": "Datasets",
            "ntype": "title",
            "meta": {
                "section": "4.1"
            }
        },
        {
            "ix": "178-ARR_v1_59",
            "content": "We conduct our experiments on the ACE2004 2 , ACE2005 3 (Doddington et al., 2004), GENIA (Kim et al., 2003) and KBP2017 4 (Ji et al., 2017) datasets. To fairly compare with previous works, we follow the same dataset split with Lu and Roth (2015) for ACE2004 and ACE2005 datasets and use the split from for GENIA and KBP2017 datasets. The statistics of all datasets are listed in Table 1. Following previous work, we measure the results using span-level precision, recall, and F 1 scores.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_60",
            "content": "Implementation Details",
            "ntype": "title",
            "meta": {
                "section": "4.2"
            }
        },
        {
            "ix": "178-ARR_v1_61",
            "content": "We use BERT-large-cased (Devlin et al., 2019) and albert-xxlarge-v2 (Lan et al., 2020) as the contextual embedding, fastText (Bojanowski et al., 2017) as the word embedding in ACE2004, ACE2005 and KBP2017 dataset. We use BioBERT-v1.1 (Lee et al., 2020) and",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_62",
            "content": "BioWordVec as the contextual and word embedding in the GENIA dataset respectively. We truncate the input texts with context at length 192. The part-of-speech embeddings are initialized with dimension 50. The char embeddings are generated by a one-layer BiLSTM with hidden size 50. The two-layers BiLSTM with a hidden size of 1,024 is used for the token representations. For triaffine transformations, we use d = 256 for the ACE2004, ACE2005, and KBP2017 dataset, and d = 320 for the GENIA dataset, respectively. We set \u00b5 aux to 1.0, and select m = 30 in both training and inference. We use AdamW (Loshchilov and Hutter, 2019) to optimize our models with a linear learning rate decay. Detailed training parameters are presented in Appendix A.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_63",
            "content": "Baselines",
            "ntype": "title",
            "meta": {
                "section": "4.3"
            }
        },
        {
            "ix": "178-ARR_v1_64",
            "content": "DYGIE uses multi-task learning to extract entities, relations, and coreferences. MGNER (Xia et al., 2019) uses a detector to find span candidates and a classifier for categorization. BENSC (Tan et al., 2020) trains the boundary detection and span classification tasks jointly. TreeCRF (Fu et al., 2021) views entities as nodes in a constituency tree and decodes them with a Masked Inside algorithm. Biaffine (Yu et al., 2020) classifies spans by a biaffine function between boundary representations. Pyramid designs pyramid layer and inverse pyramid layer to decode nested entities.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_65",
            "content": "We also report the results of models with other paradigms, including hypergraph-based methods , transition-based methods (Fisher and Vlachos, 2019), generative methods (Yan et al., 2021;, and so on. We do not compare to BERT-MRC (Li et al., 2020a) since they use additional resources as queries. DYGIE++ and PURE (Zhong and Chen, 2021) use different splits of the ACE datasets which are not comparable.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_66",
            "content": "Results",
            "ntype": "title",
            "meta": {
                "section": "4.4"
            }
        },
        {
            "ix": "178-ARR_v1_67",
            "content": "We compare our method with baseline methods in Table 2 for the ACE2004, ACE2005, and GENIA datasets and Table 3 for the KBP2017 dataset, respectively. With BERT as the encoder, our model achieves 87.40, 86.82, 81.23, and 85.05 paradigms, our model also achieves the state-of-theart results on the GENIA (+0.69 vs. Locate and Label) and KBP2017 dataset (+1.00 vs. Locate and Label) and shows comparable performances on ACE2004 (-0.01 vs. Locate and Label) and ACE2005 (-0.23 vs. Sequence to Set). With a stronger encoder ALBERT, our model achieves 88.56, 88.83, and 87.27 scores in terms of F 1 on ACE2004, ACE2005, and KBP2017 respectively, which exceeds all existing baselines including the Pyramid model with ALBERT (+0.82 on ACE2004, +2.49 on ACE2005) and the previous state-of-theart method on KBP2017 dataset (+3.22 vs. Locate and Label).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_68",
            "content": "Ablation Study",
            "ntype": "title",
            "meta": {
                "section": "4.5"
            }
        },
        {
            "ix": "178-ARR_v1_69",
            "content": "Considering we leverage multiple factors in multiple parts of the model, we design the following ablation settings to validate the effectiveness of each factor and the proposed triaffine mechanism. (a) To show the effectiveness of triaffine mechanism, we use a baseline biaffine model with the combination of boundary representations:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_70",
            "content": "p i,j,r = h i 1 T V r h j 1(17)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_71",
            "content": "(b) To show the effectiveness of boundaries in scoring, we remove boundaries factor from scoring:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_72",
            "content": "p i,j,r = V r h i,j,r + b r(18)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_73",
            "content": "(c) To show the effectiveness of labels in representation, we remove label factor in attention: (d) To show the effectiveness of boundaries in representation, we remove boundaries factor in attention:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_74",
            "content": "s i,j,k,r = TriAff(h i , h j , h k , W)(19)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_75",
            "content": "s i,j,k,r = s k,r = q r \u2022 h k(20)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_76",
            "content": "(e) To show the effectiveness of the triaffine mechanism in representations, we replace triaffine attention with linear attention:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_77",
            "content": "s i,j,k,r = W r (h i \u2225 h j \u2225 h k ) + c r(21)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_78",
            "content": "(f) To show the effectiveness of triaffine scoring, we replace triaffine scoring to linear scoring: (h) Our full model (i.e, use p c i l ,j l ,r as predictions). Table 4 shows the results of ablation studies on ACE2004 and GENIA datasets. We use BERT-large-cased as the backbone encoder on ACE2004 and BioBERT-v1.1 on GENIA, respectively. By comparing (a) with (g), we observe significant performances drop (-0.87 on ACE2004, -1.87 on GENIA), which indicates that our proposed triaffine mechanism with multiple heterogeneous factors performs better than the biaffine baseline. Comparing (b) with (g), we find that the boundary information contributes to span classification. Comparing (c) and (d) with (g) supports that either label or boundary in the triaffine attention improves the performance. The setting (g) performs better than (e) and (f), which shows the superiority of the triaffine transformation over the linear function. We observe that (h) performs better than (g) (+0.28 on ACE2004, +0.39 on GENIA), proving the strength of triaffine attention with interactions among related spans. The above studies support that our proposed triaffine mechanism with associated heterogeneous factors is effective for span representation and classification.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_79",
            "content": "p i,j,r = V r (h i \u2225 h j \u2225 h i,j,r ) + b r(22)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_80",
            "content": "Discussion",
            "ntype": "title",
            "meta": {
                "section": "4.6"
            }
        },
        {
            "ix": "178-ARR_v1_81",
            "content": "We compare the F 1 scores of GENIA between triaffine model (g) and biaffine model (a) grouped by entity lengths in Figure 4. In all columns, the F 1 score of our method is better than the baseline. Furthermore, the right columns show that the F 1 score of the baseline gradually decreases with the incremental entity lengths. However, our method based on the triaffine mechanism with heterogeneous factors takes advantage of the interaction from boundaries and related spans, which keeps consistent results and outperforms the baseline.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_82",
            "content": "The results grouped by flat or nested entities are shown in Table 6. Our method has consistent improvements than the baseline, especially for the nested setting. Based on the above observations, our method is good at solving long entities that are more likely to be nested, which supports our model is built upon the characteristics of nested NER.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_83",
            "content": "At the stage of cross-span interactions, we only select top-m spans in practice. In Figure 5, we analyze the number m in two aspects. Firstly, we check the recall of entity spans. We observe that taking top-30 spans achieves a recall of 99.89, which means it covers almost all entities. As the maximum number of entities is 25, we believe it is enough to select top-30 spans. Secondly, we check the model performance. With top-30 spans, the model achieves 81.23 scores in terms of F 1 and there is no obvious performance improvement with more candidates. Based on two above observations, we choose m = 30, which can well balance the performance and efficiency. Finally, we test the efficiency of the decomposition. Compared with the naive triaffine scoring that takes 638.1ms (509.4ms in GPU + 128.7ms in CPU), the decomposed triaffine scoring takes 432.7ms (330.5ms in GPU + 102.2ms in CPU) for 10 iterations, which leads to approximately 32% speedup (details are shown in Appendix B).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_84",
            "content": "Case Study",
            "ntype": "title",
            "meta": {
                "section": "4.7"
            }
        },
        {
            "ix": "178-ARR_v1_85",
            "content": "To analyze the effect of fusing information from related spans with the cross-span interaction, we show two examples from ACE2004 and GENIA datasets in Table 5. In the first example, the model first predicts \"the trading population\" as \"GPE\", however, it revises to \"PER\" correctly by considering span interactions with the outer span \"the rest of the trading population\". In the second example, it first predicts \"MnlI-AluI\" as \"protein\". By interacting with surrounding entities \"MnlI-AluI fragment\", the model corrects its label to None.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_86",
            "content": "Conclusion",
            "ntype": "title",
            "meta": {
                "section": "5"
            }
        },
        {
            "ix": "178-ARR_v1_87",
            "content": "In this paper, we propose a span-based method for nested NER. Heterogeneous factors including tokens, boundaries, labels, and related spans are introduced to improve span classification with a novel triaffine mechanism. Experiments show our method outperforms all span-based methods and achieves state-of-the-art performance on four nested NER datasets. Ablation studies show the introduced heterogeneous factors and triaffine mechanism are helpful for nested setting. Despite that large-scale pretrained language models have shown consistent improvement over many NLP tasks, we argue that the well-designed features and model structures are still useful for complex tasks like nested NER. Furthermore, although we only verify our triaffine mechanism in nested NER, we believe it can also be useful in tasks requiring high order interactions like parsing and semantic role labeling.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "178-ARR_v1_88",
            "content": "Beatrice Alex, Barry Haddow, Claire Grover, Recognising nested named entities in biomedical text, 2007, Biological, translational, and clinical language processing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b0",
                "authors": [
                    "Beatrice Alex",
                    "Barry Haddow",
                    "Claire Grover"
                ],
                "title": "Recognising nested named entities in biomedical text",
                "pub_date": "2007",
                "pub_title": "Biological, translational, and clinical language processing",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_89",
            "content": "Piotr Bojanowski, Edouard Grave, Armand Joulin, Tomas Mikolov, Enriching word vectors with subword information, 2017, Transactions of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b1",
                "authors": [
                    "Piotr Bojanowski",
                    "Edouard Grave",
                    "Armand Joulin",
                    "Tomas Mikolov"
                ],
                "title": "Enriching word vectors with subword information",
                "pub_date": "2017",
                "pub_title": "Transactions of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_90",
            "content": "Jacob Devlin, Ming-Wei Chang, Kenton Lee, Kristina Toutanova, BERT: Pre-training of deep bidirectional transformers for language understanding, 2019, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b2",
                "authors": [
                    "Jacob Devlin",
                    "Ming-Wei Chang",
                    "Kenton Lee",
                    "Kristina Toutanova"
                ],
                "title": "BERT: Pre-training of deep bidirectional transformers for language understanding",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_91",
            "content": "Alexis George R Doddington,  Mitchell, A Mark,  Przybocki, A Lance, Stephanie Ramshaw, Ralph Strassel,  Weischedel, The automatic content extraction (ace) program-tasks, data, and evaluation, 2004, Lrec, .",
            "ntype": "ref",
            "meta": {
                "xid": "b3",
                "authors": [
                    "Alexis George R Doddington",
                    " Mitchell",
                    "A Mark",
                    " Przybocki",
                    "A Lance",
                    "Stephanie Ramshaw",
                    "Ralph Strassel",
                    " Weischedel"
                ],
                "title": "The automatic content extraction (ace) program-tasks, data, and evaluation",
                "pub_date": "2004",
                "pub_title": "Lrec",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_92",
            "content": "Timothy Dozat, Christopher Manning, Deep biaffine attention for neural dependency parsing, 2017-04-24, 5th International Conference on Learning Representations, .",
            "ntype": "ref",
            "meta": {
                "xid": "b4",
                "authors": [
                    "Timothy Dozat",
                    "Christopher Manning"
                ],
                "title": "Deep biaffine attention for neural dependency parsing",
                "pub_date": "2017-04-24",
                "pub_title": "5th International Conference on Learning Representations",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_93",
            "content": "Jenny Finkel, Christopher D Manning, Nested named entity recognition, 2009, Proceedings of the 2009 conference on empirical methods in natural language processing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b5",
                "authors": [
                    "Jenny Finkel",
                    "Christopher D Manning"
                ],
                "title": "Nested named entity recognition",
                "pub_date": "2009",
                "pub_title": "Proceedings of the 2009 conference on empirical methods in natural language processing",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_94",
            "content": "Joseph Fisher, Andreas Vlachos, Merge and label: A novel neural network architecture for nested NER, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b6",
                "authors": [
                    "Joseph Fisher",
                    "Andreas Vlachos"
                ],
                "title": "Merge and label: A novel neural network architecture for nested NER",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_95",
            "content": "Yao Fu, Chuanqi Tan, Mosha Chen, Songfang Huang, Fei Huang, Nested named entity recognition with partially-observed treecrfs, 2021, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "ref",
            "meta": {
                "xid": "b7",
                "authors": [
                    "Yao Fu",
                    "Chuanqi Tan",
                    "Mosha Chen",
                    "Songfang Huang",
                    "Fei Huang"
                ],
                "title": "Nested named entity recognition with partially-observed treecrfs",
                "pub_date": "2021",
                "pub_title": "Proceedings of the AAAI Conference on Artificial Intelligence",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_96",
            "content": "Sepp Hochreiter, J\u00fcrgen Schmidhuber, Long short-term memory, 1997, Neural computation, .",
            "ntype": "ref",
            "meta": {
                "xid": "b8",
                "authors": [
                    "Sepp Hochreiter",
                    "J\u00fcrgen Schmidhuber"
                ],
                "title": "Long short-term memory",
                "pub_date": "1997",
                "pub_title": "Neural computation",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_97",
            "content": "Heng Ji, Xiaoman Pan, Boliang Zhang, Joel Nothman, James Mayfield, Paul Mcnamee, Cash Costello, Overview of tac-kbp2017 13 languages entity discovery and linking, 2017, Theory and Applications of Categories, .",
            "ntype": "ref",
            "meta": {
                "xid": "b9",
                "authors": [
                    "Heng Ji",
                    "Xiaoman Pan",
                    "Boliang Zhang",
                    "Joel Nothman",
                    "James Mayfield",
                    "Paul Mcnamee",
                    "Cash Costello"
                ],
                "title": "Overview of tac-kbp2017 13 languages entity discovery and linking",
                "pub_date": "2017",
                "pub_title": "Theory and Applications of Categories",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_98",
            "content": "Arzoo Katiyar, Claire Cardie, Nested named entity recognition revisited, 2018, Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, .",
            "ntype": "ref",
            "meta": {
                "xid": "b10",
                "authors": [
                    "Arzoo Katiyar",
                    "Claire Cardie"
                ],
                "title": "Nested named entity recognition revisited",
                "pub_date": "2018",
                "pub_title": "Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_99",
            "content": "J-D Kim, Tomoko Ohta, Yuka Tateisi, Jun'ichi Tsujii, Genia corpus-a semantically annotated corpus for bio-textmining, 2003, Bioinformatics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b11",
                "authors": [
                    "J-D Kim",
                    "Tomoko Ohta",
                    "Yuka Tateisi",
                    "Jun'ichi Tsujii"
                ],
                "title": "Genia corpus-a semantically annotated corpus for bio-textmining",
                "pub_date": "2003",
                "pub_title": "Bioinformatics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_100",
            "content": "Guillaume Lample, Miguel Ballesteros, Sandeep Subramanian, Kazuya Kawakami, Chris Dyer, Neural architectures for named entity recognition, 2016, Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b12",
                "authors": [
                    "Guillaume Lample",
                    "Miguel Ballesteros",
                    "Sandeep Subramanian",
                    "Kazuya Kawakami",
                    "Chris Dyer"
                ],
                "title": "Neural architectures for named entity recognition",
                "pub_date": "2016",
                "pub_title": "Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_101",
            "content": "Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, Radu Soricut, ALBERT: A lite BERT for self-supervised learning of language representations, 2020-04-26, 8th International Conference on Learning Representations, .",
            "ntype": "ref",
            "meta": {
                "xid": "b13",
                "authors": [
                    "Zhenzhong Lan",
                    "Mingda Chen",
                    "Sebastian Goodman",
                    "Kevin Gimpel",
                    "Piyush Sharma",
                    "Radu Soricut"
                ],
                "title": "ALBERT: A lite BERT for self-supervised learning of language representations",
                "pub_date": "2020-04-26",
                "pub_title": "8th International Conference on Learning Representations",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_102",
            "content": "Jinhyuk Lee, Wonjin Yoon, Sungdong Kim, Donghyeon Kim, Sunkyu Kim, Chan Ho So, Jaewoo Kang, Biobert: a pre-trained biomedical language representation model for biomedical text mining, 2020, Bioinformatics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b14",
                "authors": [
                    "Jinhyuk Lee",
                    "Wonjin Yoon",
                    "Sungdong Kim",
                    "Donghyeon Kim",
                    "Sunkyu Kim",
                    "Chan Ho So",
                    "Jaewoo Kang"
                ],
                "title": "Biobert: a pre-trained biomedical language representation model for biomedical text mining",
                "pub_date": "2020",
                "pub_title": "Bioinformatics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_103",
            "content": "Xiaoya Li, Jingrong Feng, Yuxian Meng, Qinghong Han, Fei Wu, Jiwei Li, A unified MRC framework for named entity recognition, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b15",
                "authors": [
                    "Xiaoya Li",
                    "Jingrong Feng",
                    "Yuxian Meng",
                    "Qinghong Han",
                    "Fei Wu",
                    "Jiwei Li"
                ],
                "title": "A unified MRC framework for named entity recognition",
                "pub_date": "2020",
                "pub_title": "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_104",
            "content": "Zuchao Li, Shexia He, Hai Zhao, Yiqing Zhang, Zhuosheng Zhang, Xi Zhou, Xiang Zhou, Dependency or span, end-to-end uniform semantic role labeling, 2019, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "ref",
            "meta": {
                "xid": "b16",
                "authors": [
                    "Zuchao Li",
                    "Shexia He",
                    "Hai Zhao",
                    "Yiqing Zhang",
                    "Zhuosheng Zhang",
                    "Xi Zhou",
                    "Xiang Zhou"
                ],
                "title": "Dependency or span, end-to-end uniform semantic role labeling",
                "pub_date": "2019",
                "pub_title": "Proceedings of the AAAI Conference on Artificial Intelligence",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_105",
            "content": "Zuchao Li, Hai Zhao, Rui Wang, Kevin Parnow, High-order semantic role labeling, 2020, Findings of the Association for Computational Linguistics: EMNLP 2020, Online. Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b17",
                "authors": [
                    "Zuchao Li",
                    "Hai Zhao",
                    "Rui Wang",
                    "Kevin Parnow"
                ],
                "title": "High-order semantic role labeling",
                "pub_date": "2020",
                "pub_title": "Findings of the Association for Computational Linguistics: EMNLP 2020",
                "pub": "Online. Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_106",
            "content": "Hongyu Lin, Yaojie Lu, Xianpei Han, Le Sun, Sequence-to-nuggets: Nested entity mention detection via anchor-region networks, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b18",
                "authors": [
                    "Hongyu Lin",
                    "Yaojie Lu",
                    "Xianpei Han",
                    "Le Sun"
                ],
                "title": "Sequence-to-nuggets: Nested entity mention detection via anchor-region networks",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_107",
            "content": "Ilya Loshchilov, Frank Hutter, Decoupled weight decay regularization, 2019-05-06, 7th International Conference on Learning Representations, .",
            "ntype": "ref",
            "meta": {
                "xid": "b19",
                "authors": [
                    "Ilya Loshchilov",
                    "Frank Hutter"
                ],
                "title": "Decoupled weight decay regularization",
                "pub_date": "2019-05-06",
                "pub_title": "7th International Conference on Learning Representations",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_108",
            "content": "Wei Lu, Dan Roth, Joint mention extraction and classification with mention hypergraphs, 2015, Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b20",
                "authors": [
                    "Wei Lu",
                    "Dan Roth"
                ],
                "title": "Joint mention extraction and classification with mention hypergraphs",
                "pub_date": "2015",
                "pub_title": "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_109",
            "content": "Yi Luan, Dave Wadden, Luheng He, Amy Shah, Mari Ostendorf, Hannaneh Hajishirzi, A general framework for information extraction using dynamic span graphs, 2019, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b21",
                "authors": [
                    "Yi Luan",
                    "Dave Wadden",
                    "Luheng He",
                    "Amy Shah",
                    "Mari Ostendorf",
                    "Hannaneh Hajishirzi"
                ],
                "title": "A general framework for information extraction using dynamic span graphs",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_110",
            "content": "Ying Luo, Hai Zhao, Bipartite flat-graph network for nested named entity recognition, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b22",
                "authors": [
                    "Ying Luo",
                    "Hai Zhao"
                ],
                "title": "Bipartite flat-graph network for nested named entity recognition",
                "pub_date": "2020",
                "pub_title": "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_111",
            "content": "Yongliang Shen, Xinyin Ma, Zeqi Tan, Shuai Zhang, Wen Wang, Weiming Lu, Locate and label: A two-stage identifier for nested named entity recognition, 2021, Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b23",
                "authors": [
                    "Yongliang Shen",
                    "Xinyin Ma",
                    "Zeqi Tan",
                    "Shuai Zhang",
                    "Wen Wang",
                    "Weiming Lu"
                ],
                "title": "Locate and label: A two-stage identifier for nested named entity recognition",
                "pub_date": "2021",
                "pub_title": "Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_112",
            "content": "Takashi Shibuya, Eduard Hovy, Nested named entity recognition via second-best sequence learning and decoding, 2020, Transactions of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b24",
                "authors": [
                    "Takashi Shibuya",
                    "Eduard Hovy"
                ],
                "title": "Nested named entity recognition via second-best sequence learning and decoding",
                "pub_date": "2020",
                "pub_title": "Transactions of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_113",
            "content": "Jana Strakov\u00e1, Milan Straka, Neural architectures for nested NER through linearization, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b25",
                "authors": [
                    "Jana Strakov\u00e1",
                    "Milan Straka"
                ],
                "title": "Neural architectures for nested NER through linearization",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_114",
            "content": "Chuanqi Tan, Wei Qiu, Mosha Chen, Rui Wang, Fei Huang, Boundary enhanced neural span classification for nested named entity recognition, 2020, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "ref",
            "meta": {
                "xid": "b26",
                "authors": [
                    "Chuanqi Tan",
                    "Wei Qiu",
                    "Mosha Chen",
                    "Rui Wang",
                    "Fei Huang"
                ],
                "title": "Boundary enhanced neural span classification for nested named entity recognition",
                "pub_date": "2020",
                "pub_title": "Proceedings of the AAAI Conference on Artificial Intelligence",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_115",
            "content": "Zeqi Tan, Yongliang Shen, Shuai Zhang, Weiming Lu, Yueting Zhuang, A sequence-to-set network for nested named entity recognition, 2021, Proceedings of the 30th International Joint Conference on Artificial Intelligence, .",
            "ntype": "ref",
            "meta": {
                "xid": "b27",
                "authors": [
                    "Zeqi Tan",
                    "Yongliang Shen",
                    "Shuai Zhang",
                    "Weiming Lu",
                    "Yueting Zhuang"
                ],
                "title": "A sequence-to-set network for nested named entity recognition",
                "pub_date": "2021",
                "pub_title": "Proceedings of the 30th International Joint Conference on Artificial Intelligence",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_116",
            "content": "David Wadden, Ulme Wennberg, Yi Luan, Hannaneh Hajishirzi, Entity, relation, and event extraction with contextualized span representations, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), .",
            "ntype": "ref",
            "meta": {
                "xid": "b28",
                "authors": [
                    "David Wadden",
                    "Ulme Wennberg",
                    "Yi Luan",
                    "Hannaneh Hajishirzi"
                ],
                "title": "Entity, relation, and event extraction with contextualized span representations",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_117",
            "content": "Bailin Wang, Wei Lu, Neural segmental hypergraphs for overlapping mention recognition, 2018, Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b29",
                "authors": [
                    "Bailin Wang",
                    "Wei Lu"
                ],
                "title": "Neural segmental hypergraphs for overlapping mention recognition",
                "pub_date": "2018",
                "pub_title": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_118",
            "content": "Bailin Wang, Wei Lu, Yu Wang, Hongxia Jin, A neural transition-based model for nested mention recognition, 2018, Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b30",
                "authors": [
                    "Bailin Wang",
                    "Wei Lu",
                    "Yu Wang",
                    "Hongxia Jin"
                ],
                "title": "A neural transition-based model for nested mention recognition",
                "pub_date": "2018",
                "pub_title": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_119",
            "content": "Jue Wang, Lidan Shou, Ke Chen, Gang Chen, Pyramid: A layered model for nested named entity recognition, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b31",
                "authors": [
                    "Jue Wang",
                    "Lidan Shou",
                    "Ke Chen",
                    "Gang Chen"
                ],
                "title": "Pyramid: A layered model for nested named entity recognition",
                "pub_date": "2020",
                "pub_title": "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_120",
            "content": "Xinyu Wang, Jingxian Huang, Kewei Tu, Second-order semantic dependency parsing with endto-end neural networks, 2019, Proceedings of the 57th, .",
            "ntype": "ref",
            "meta": {
                "xid": "b32",
                "authors": [
                    "Xinyu Wang",
                    "Jingxian Huang",
                    "Kewei Tu"
                ],
                "title": "Second-order semantic dependency parsing with endto-end neural networks",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 57th",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_121",
            "content": "UNKNOWN, None, , Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b33",
                "authors": null,
                "title": null,
                "pub_date": null,
                "pub_title": "Annual Meeting of the Association for Computational Linguistics",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_122",
            "content": "Congying Xia, Chenwei Zhang, Tao Yang, Yaliang Li, Nan Du, Xian Wu, Wei Fan, Fenglong Ma, Philip Yu, Multi-grained named entity recognition, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b34",
                "authors": [
                    "Congying Xia",
                    "Chenwei Zhang",
                    "Tao Yang",
                    "Yaliang Li",
                    "Nan Du",
                    "Xian Wu",
                    "Wei Fan",
                    "Fenglong Ma",
                    "Philip Yu"
                ],
                "title": "Multi-grained named entity recognition",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_123",
            "content": "Hang Yan, Tao Gui, Junqi Dai, Qipeng Guo, Zheng Zhang, Xipeng Qiu, A unified generative framework for various NER subtasks, 2021, Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing, Long Papers.",
            "ntype": "ref",
            "meta": {
                "xid": "b35",
                "authors": [
                    "Hang Yan",
                    "Tao Gui",
                    "Junqi Dai",
                    "Qipeng Guo",
                    "Zheng Zhang",
                    "Xipeng Qiu"
                ],
                "title": "A unified generative framework for various NER subtasks",
                "pub_date": "2021",
                "pub_title": "Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing",
                "pub": "Long Papers"
            }
        },
        {
            "ix": "178-ARR_v1_124",
            "content": "Juntao Yu, Bernd Bohnet, Massimo Poesio, Named entity recognition as dependency parsing, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b36",
                "authors": [
                    "Juntao Yu",
                    "Bernd Bohnet",
                    "Massimo Poesio"
                ],
                "title": "Named entity recognition as dependency parsing",
                "pub_date": "2020",
                "pub_title": "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_125",
            "content": "Zheng Yuan, Yuanhao Liu, Qiuyang Yin, Boyao Li, Xiaobin Feng, Guoming Zhang, Sheng Yu, Unsupervised multi-granular chinese word segmentation and term discovery via graph partition, 2020, Journal of Biomedical Informatics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b37",
                "authors": [
                    "Zheng Yuan",
                    "Yuanhao Liu",
                    "Qiuyang Yin",
                    "Boyao Li",
                    "Xiaobin Feng",
                    "Guoming Zhang",
                    "Sheng Yu"
                ],
                "title": "Unsupervised multi-granular chinese word segmentation and term discovery via graph partition",
                "pub_date": "2020",
                "pub_title": "Journal of Biomedical Informatics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_126",
            "content": "Jie Zhang, Dan Shen, Guodong Zhou, Jian Su, Chew-Lim Tan, Enhancing hmm-based biomedical named entity recognition by studying special phenomena, 2004, Journal of biomedical informatics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b38",
                "authors": [
                    "Jie Zhang",
                    "Dan Shen",
                    "Guodong Zhou",
                    "Jian Su",
                    "Chew-Lim Tan"
                ],
                "title": "Enhancing hmm-based biomedical named entity recognition by studying special phenomena",
                "pub_date": "2004",
                "pub_title": "Journal of biomedical informatics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_127",
            "content": "Yijia Zhang, Qingyu Chen, Zhihao Yang, Hongfei Lin, Zhiyong Lu, Biowordvec, improving biomedical word embeddings with subword information and mesh, 2019, Scientific data, .",
            "ntype": "ref",
            "meta": {
                "xid": "b39",
                "authors": [
                    "Yijia Zhang",
                    "Qingyu Chen",
                    "Zhihao Yang",
                    "Hongfei Lin",
                    "Zhiyong Lu"
                ],
                "title": "Biowordvec, improving biomedical word embeddings with subword information and mesh",
                "pub_date": "2019",
                "pub_title": "Scientific data",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_128",
            "content": "Yu Zhang, Zhenghua Li, Min Zhang, Efficient second-order TreeCRF for neural dependency parsing, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "ref",
            "meta": {
                "xid": "b40",
                "authors": [
                    "Yu Zhang",
                    "Zhenghua Li",
                    "Min Zhang"
                ],
                "title": "Efficient second-order TreeCRF for neural dependency parsing",
                "pub_date": "2020",
                "pub_title": "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics",
                "pub": null
            }
        },
        {
            "ix": "178-ARR_v1_129",
            "content": "Changmeng Zheng, Yi Cai, Jingyun Xu, Guandong Leung,  Xu, A boundary-aware neural model for nested named entity recognition, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b41",
                "authors": [
                    "Changmeng Zheng",
                    "Yi Cai",
                    "Jingyun Xu",
                    "Guandong Leung",
                    " Xu"
                ],
                "title": "A boundary-aware neural model for nested named entity recognition",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "178-ARR_v1_130",
            "content": "Zexuan Zhong, Danqi Chen, 2021. A frustratingly easy approach for entity and relation extraction, , North American Association for Computational Linguistics (NAACL), .",
            "ntype": "ref",
            "meta": {
                "xid": "b42",
                "authors": [
                    "Zexuan Zhong",
                    "Danqi Chen"
                ],
                "title": "2021. A frustratingly easy approach for entity and relation extraction",
                "pub_date": null,
                "pub_title": "North American Association for Computational Linguistics (NAACL)",
                "pub": null
            }
        }
    ],
    "span_nodes": [
        {
            "ix": "178-ARR_v1_0@0",
            "content": "Fusing Heterogeneous Factors with Triaffine Mechanism for Nested Named Entity Recognition",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_0",
            "start": 0,
            "end": 88,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_1@0",
            "content": "Abstract",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_1",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_2@0",
            "content": "Nested entities are observed in many domains due to their compositionality, which cannot be easily recognized by the widely-used sequence labeling framework.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_2",
            "start": 0,
            "end": 156,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_2@1",
            "content": "A natural solution is to treat the task as a span classification problem.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_2",
            "start": 158,
            "end": 230,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_2@2",
            "content": "To learn better span representation and increase classification performance, it is crucial to effectively integrate heterogeneous factors including inside tokens, boundaries, labels, and related spans which could be contributing to nested entities recognition.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_2",
            "start": 232,
            "end": 491,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_2@3",
            "content": "To fuse these heterogeneous factors, we propose a novel triaffine mechanism including triaffine attention and scoring.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_2",
            "start": 493,
            "end": 610,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_2@4",
            "content": "Triaffine attention uses boundaries and labels as queries, and uses inside tokens and related spans as keys and values for span representations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_2",
            "start": 612,
            "end": 755,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_2@5",
            "content": "Triaffine scoring interacts with boundaries and span representations for classification.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_2",
            "start": 757,
            "end": 844,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_2@6",
            "content": "Experiments show that our proposed method achieves the state-of-the-art F 1 scores on four nested NER datasets: ACE2004, ACE2005, GENIA, and KBP2017.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_2",
            "start": 846,
            "end": 994,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_3@0",
            "content": "Introduction",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_3",
            "start": 0,
            "end": 11,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_4@0",
            "content": "Named entity recognition (NER) is a fundamental natural language processing task that extracts entities from texts.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_4",
            "start": 0,
            "end": 114,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_4@1",
            "content": "Flat NER has been well studied and is usually viewed as a sequence labeling problem (Lample et al., 2016).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_4",
            "start": 116,
            "end": 221,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_4@2",
            "content": "However, nested entities also widely exist in real-world applications due to their multi-granularity semantic meaning (Alex et al., 2007;Yuan et al., 2020), which cannot be solved by the sequence labeling framework since tokens have multiple labels (Finkel and Manning, 2009).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_4",
            "start": 223,
            "end": 498,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@0",
            "content": "Various paradigms for nested NER have been proposed in recent years.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 0,
            "end": 67,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@1",
            "content": "A representative direction is the span-based approach that learns deep representation for every possible span and then classifies it to the corresponding type (Zheng et al., 2019;Xia et al., 2019;Tan et al., 2020;Yu et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 69,
            "end": 298,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@2",
            "content": "By leveraging the large-scale pretrained language a defective NF -chi B site was completely inactive in EBV -transformed B cells , \u2026 model, several works show that the simple model structure for span representation and classification can achieve satisfactory results Zhong and Chen, 2021).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 300,
            "end": 588,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@3",
            "content": "However, we still believe that explicit modeling of some relevant features will further benefit the span representation and classification under the complex nested setting.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 590,
            "end": 761,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@4",
            "content": "Taking Figure 1 as an example, we claim that the following factors are critical for recognizing whether a span is an entity.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 763,
            "end": 886,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@5",
            "content": "(1) Tokens: It is obvious that tokens of the given span contribute to the recognition.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 888,
            "end": 973,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@6",
            "content": "(2) Boundaries: We emphasize boundaries (or boundary tokens) because they are special tokens with rich semantics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 975,
            "end": 1087,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@7",
            "content": "Works with simple structure may just produce the span representation based on the concatenation or biaffine transformation of boundary representation (Yu et al., 2020;Fu et al., 2021).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 1089,
            "end": 1272,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@8",
            "content": "Some other works take boundary detection as additional supervision for better representation learning (Zheng et al., 2019;Tan et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 1274,
            "end": 1413,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@9",
            "content": "More importantly, a unilateral boundary cannot determine the entity type since it can exist in multiple entities with different labels (e.g., \"NF\", \"B\", and \"cells\") under the nested setting.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 1415,
            "end": 1605,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@10",
            "content": "(3) Labels: As mentioned above, tokens could belong to entities with different labels.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 1607,
            "end": 1692,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@11",
            "content": "Therefore, we propose that the model should learn label-aware span representation to take into consideration of the different token contributions at the label level.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 1694,
            "end": 1858,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@12",
            "content": "1 For exam-ple, \"NF\" may contribute more to \"protein\" type when classifying the span \"NF -chi B\", as well as \"chi B\" and \"site\" contribute more to \"DNA\" type when classifying the span \"NF -chi B site\".",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 1860,
            "end": 2060,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@13",
            "content": "(4) Related spans: Interactions among spans are important in nested entities (Luo and Zhao, 2020;Fu et al., 2021).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 2062,
            "end": 2175,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@14",
            "content": "The insider and outsider entities may hint at each other's types.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 2177,
            "end": 2241,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@15",
            "content": "For example, entities inside \"EBV-transformed B cells\" have more possibilities to be cell-related entities.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 2243,
            "end": 2349,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_5@16",
            "content": "Interactions can also help the non-entity span like \"transformed B cells\" to validate its partialness by looking at outer entity \"EBV -transformed B cells\".",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_5",
            "start": 2351,
            "end": 2506,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_6@0",
            "content": "Although some of the factors may be explored in previous works, to the best of our knowledge, it is the first work to fuse all these heterogeneous factors into a unified network.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_6",
            "start": 0,
            "end": 177,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_6@1",
            "content": "As the traditional additive, multiplicative attention, or biaffine transformation cannot interact with such multiple heterogeneous factors simultaneously, we propose a novel triaffine mechanism as the tensor multiplication with three rank-1 tensors (vectors) and a rank-3 tensor, which makes it possible to jointly consider high-order interactions among multiple factors.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_6",
            "start": 179,
            "end": 549,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_6@2",
            "content": "Specifically, our method follows the pipeline of span representation learning and classification.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_6",
            "start": 551,
            "end": 647,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_6@3",
            "content": "At the stage of span representation learning, we apply the triaffine attention to aggregate the label-wise span representations by considering boundaries and labels as queries as well as inside tokens as keys and values.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_6",
            "start": 649,
            "end": 868,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_6@4",
            "content": "Then, a similar triaffine attention is applied to produce the label-wise cross-span representations by querying boundaries and labels with related spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_6",
            "start": 870,
            "end": 1022,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_6@5",
            "content": "At the stage of span classification, we fuse the span representations and boundaries for label-wise classification with a triaffine score function.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_6",
            "start": 1024,
            "end": 1170,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_6@6",
            "content": "In practice, we add an auxiliary object function to classify spans without the cross-span interaction, which benefits learning robust span representation and can be used as a span filter to speed up both training and inference without performance degradation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_6",
            "start": 1172,
            "end": 1430,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_7@0",
            "content": "We conduct experiments on four nested NER datasets: ACE2004, ACE2005, GENIA, and KBP2017.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_7",
            "start": 0,
            "end": 88,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_7@1",
            "content": "Our model achieves 88.56, 88.83, 81.23, and 87.27 scores in terms of F 1 , respectively, outperforming state-of-the-art methods.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_7",
            "start": 90,
            "end": 217,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_7@2",
            "content": "Ablation studies show the effectiveness of each factor and the superiority of the triaffine mechanism.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_7",
            "start": 219,
            "end": 320,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_7@3",
            "content": "We will release our codes and models for further research.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_7",
            "start": 322,
            "end": 379,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_8@0",
            "content": "Our contributions are summarized as:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_8",
            "start": 0,
            "end": 35,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_9@0",
            "content": "\u2022 We propose that heterogeneous factors (i.e., tokens, boundaries, labels, related spans) should be taken into consideration in the spanbased methods for nested NER. \u2022 We propose a span-based method with a novel triaffine mechanism including triaffine attention and scoring to fuse the above-mentioned heterogeneous factors for span representations and classification. \u2022 Experiments show that our proposed method performs better than existing span-based methods and achieves state-of-the-arts performances on four nested NER datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_9",
            "start": 0,
            "end": 533,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_10@0",
            "content": "2 Related Work",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_10",
            "start": 0,
            "end": 13,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_11@0",
            "content": "Nested NER",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_11",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@0",
            "content": "Nested NER approaches do not have a unified paradigm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 0,
            "end": 52,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@1",
            "content": "Here we mainly focus on span-based methods since they are close to our work.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 54,
            "end": 129,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@2",
            "content": "The span-based methods are one of the most mainstream ways for the nested NER.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 131,
            "end": 208,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@3",
            "content": "With the development of pre-training, it is easy to obtain the span representation by the concatenation of boundary representation Zhong and Chen, 2021) or the aggregated representation of tokens (Zheng et al., 2019;, and then follow a linear layer (Xia et al., 2019) or biaffine transformation (Yu et al., 2020) for classification.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 210,
            "end": 541,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@4",
            "content": "Several works improve the span-based methods with additional features or supervision.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 543,
            "end": 627,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@5",
            "content": "Zheng et al. (2019); Tan et al. (2020) point out the importance of boundaries and therefore introduce the boundary detection task.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 629,
            "end": 758,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@6",
            "content": "propose Pyramid to allow interactions between spans from different layers.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 760,
            "end": 833,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@7",
            "content": "Fu et al. (2021) adopt TreeCRF to model interactions between nested spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 835,
            "end": 908,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_12@8",
            "content": "Compared with previous methods, our method can jointly fuse multiple heterogeneous factors with the proposed triaffine mechanism.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_12",
            "start": 910,
            "end": 1038,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_13@0",
            "content": "Other methods for nested NER vary greatly.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_13",
            "start": 0,
            "end": 41,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_13@1",
            "content": "Earlier research on nested NER is rule-based (Zhang et al., 2004).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_13",
            "start": 43,
            "end": 108,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_13@2",
            "content": "Lu and Roth (2015); Katiyar and Cardie (2018); leverage the hypergraph to represent all possible nested structures, which needs to be carefully designed to avoid spurious structures and structural ambiguities.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_13",
            "start": 110,
            "end": 318,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_13@3",
            "content": "; Fisher and Vlachos (2019) predict the transition actions to construct nested entities.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_13",
            "start": 320,
            "end": 407,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_13@4",
            "content": "propose an anchor-based method to recognize entities.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_13",
            "start": 409,
            "end": 461,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_13@5",
            "content": "There are other works that recognize entities in a generative fashion (Yan et al., 2021;.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_13",
            "start": 463,
            "end": 551,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_13@6",
            "content": "Generally, it is not a unified framework for nested NER, and we model it with a span-based method since it is most straightforward.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_13",
            "start": 553,
            "end": 683,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_14@0",
            "content": "Affine Transformations in NLP",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_14",
            "start": 0,
            "end": 28,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_15@0",
            "content": "Dozat and Manning (2017) introduce the biaffine transformation in the dependency parsing task for arc classification.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_15",
            "start": 0,
            "end": 116,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_15@1",
            "content": "Later, it is widely used in many tasks that need to model bilateral representations Yu et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_15",
            "start": 118,
            "end": 218,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_15@2",
            "content": "The triaffine transformation is further introduced to extend biaffine transformation for high-order interaction in the field of dependency parsing (Wang et al., 2019; and semantic role labeling (Li et al., 2020b).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_15",
            "start": 220,
            "end": 432,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_15@3",
            "content": "There are two key differences between our triaffine transformation and theirs.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_15",
            "start": 434,
            "end": 511,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_15@4",
            "content": "Firstly, they only model the homogeneous features such as three tokens, but our triaffine transformation can model heterogeneous factors.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_15",
            "start": 513,
            "end": 649,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_15@5",
            "content": "Secondly, they usually leverage triaffine transformation to obtain log potentials for CRFs, but we apply it for span representation and classification.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_15",
            "start": 651,
            "end": 801,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_16@0",
            "content": "Approach",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_16",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_17@0",
            "content": "Figure 2 shows an overview of our method.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_17",
            "start": 0,
            "end": 40,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_17@1",
            "content": "We will first introduce the triaffine transformations, which lie in the heart of our model to fuse heterogeneous factors.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_17",
            "start": 42,
            "end": 162,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_17@2",
            "content": "Then, we will introduce our model based on the proposed triaffine transformations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_17",
            "start": 164,
            "end": 245,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_18@0",
            "content": "Deep Triaffine Transformation",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_18",
            "start": 0,
            "end": 28,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_19@0",
            "content": "We define the deep triaffine transformation with vectors u, v, w \u2208 R d and a tensor W \u2208 R d+1 \u00d7 R d \u00d7 R d+1 which outputs a scalar by applying distinct MLP transformations on input vectors and calculating tensor vector multiplications.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_19",
            "start": 0,
            "end": 234,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_20@0",
            "content": "u \u2032 = MLP(u) 1 , v \u2032 = MLP(v) 1 (1) w \u2032 =MLP(w) (2) TriAff(u, v, w, W) =W \u00d7 1 u \u2032 \u00d7 2 w \u2032 \u00d7 3 v \u2032 (3)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_20",
            "start": 0,
            "end": 100,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_21@0",
            "content": "where \u00d7 n is the mode-n tensor vector multiplication.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_21",
            "start": 0,
            "end": 52,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_21@1",
            "content": "A constant 1 is concatenated with inputs to retain the biaffine transformation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_21",
            "start": 54,
            "end": 132,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_21@2",
            "content": "The tensor W is initialized using N (0, \u03c3 2 ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_21",
            "start": 134,
            "end": 179,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_21@3",
            "content": "In our approach, we use boundary representations as u and v. Inside tokens or span representations are used as w. We denote the tensors in the triaffine attention as {W r } and triaffine scoring as {V r }, which decouples attention weights and scores for different labels.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_21",
            "start": 181,
            "end": 452,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_22@0",
            "content": "Text Encoding",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_22",
            "start": 0,
            "end": 12,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_23@0",
            "content": "We follow and to encode the text.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_23",
            "start": 0,
            "end": 32,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_23@1",
            "content": "For text",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_23",
            "start": 34,
            "end": 41,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_24@0",
            "content": "X = [x 1 , x 2 , ..., x N ]",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_24",
            "start": 0,
            "end": 26,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_25@0",
            "content": "with N tokens, we first generate the contextual embedding x c i with the pre-trained language model,",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_25",
            "start": 0,
            "end": 99,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_26@0",
            "content": "x c 1 , x c 2 , ..., x c N = PLM(x 1 , x 2 , ..., x N )(4)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_26",
            "start": 0,
            "end": 57,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_27@0",
            "content": "Then, we concatenate x c i with word embedding x w i , part-of-speech embedding x p i and character embedding x ch i , and feed the concatenated embedding x i into a BiLSTM (Hochreiter and Schmidhuber, 1997) to obtain the token representations {h i }.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_27",
            "start": 0,
            "end": 250,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_28@0",
            "content": "Triaffine Attention for Span Representations",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_28",
            "start": 0,
            "end": 43,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_29@0",
            "content": "To fuse heterogeneous factors for better span representation, we propose a triaffine attention mechanism shown in Figure 3a.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_29",
            "start": 0,
            "end": 123,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_29@1",
            "content": "To interact tokens with labels and boundaries, we learn the label-wise span representation h i,j,r with the triaffine attention \u03b1 i,j,k,r for the span (i, j):",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_29",
            "start": 125,
            "end": 282,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_30@0",
            "content": "s i,j,k,r = TriAff(h i , h j , h k , W r ) (5) \u03b1 i,j,k,r = exp(s i,j,k,r ) j k \u2032 =i exp(s i,j,k \u2032 ,r )(6)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_30",
            "start": 0,
            "end": 104,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_31@0",
            "content": "h i,j,r = j k=i \u03b1 i,j,k,r MLP(h k )(7)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_31",
            "start": 0,
            "end": 37,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_32@0",
            "content": "Boundary representations (h i , h j ) and the labelwise parameters (W r ) can be viewed as attention queries, and tokens (h k ) can be viewed as keys and values.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_32",
            "start": 0,
            "end": 160,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_32@1",
            "content": "Compared with the general attention framework (additive or multiplicative attention), our triaffine attention permits all high-order interactions between heterogeneous queries and keys.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_32",
            "start": 162,
            "end": 346,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_33@0",
            "content": "Triaffine Attention for Cross-span Representations",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_33",
            "start": 0,
            "end": 49,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_34@0",
            "content": "Motivated by the span-level interactions in the nested setting, we fuse related spans information into cross-span representations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_34",
            "start": 0,
            "end": 129,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_34@1",
            "content": "We view the boundaries of the span and labels as attention queries, related spans (containing the span itself) as attention keys and values to obtain cross-span representations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_34",
            "start": 131,
            "end": 307,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_34@2",
            "content": "Similar to the Equation 7, we obtain label-wise cross-span representations h c i,j,r for the span (i, j) based on triaffine attention \u03b2 i,j,g,r .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_34",
            "start": 309,
            "end": 453,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_35@0",
            "content": "\u210e ! \u210e \" \u2026 \u210e ! ! ,$ ! ,% \u2026 \ud835\udcb2 % \ud835\udcb1 % \ud835\udc5e !$&% \ud835\udc61 !$&% \ud835\udefd !$&% softmax (a) Triaffine Attention (b) Triaffine Scoring 1,4 \u2297 1 2 3 4 5 \ud835\udcb1 % \u210e ! \u210e \" \u210e \",!,$ %(",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_35",
            "start": 0,
            "end": 146,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_36@0",
            "content": "q i,j,g,r = TriAff(h i , h j , h ig,jg,r , W r ) (8)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_36",
            "start": 0,
            "end": 51,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_37@0",
            "content": "\u03b2 i,j,g,r = exp(q i,j,g,r )",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_37",
            "start": 0,
            "end": 26,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_38@0",
            "content": "g \u2032 exp(q i,j,g \u2032 ,r )(9)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_38",
            "start": 0,
            "end": 24,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_39@0",
            "content": "h c i,j,r = g \u03b2 i,j,g,r MLP(h ig,jg,r )(10)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_39",
            "start": 0,
            "end": 42,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_40@0",
            "content": "where {(i g , j g )} are the related spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_40",
            "start": 0,
            "end": 42,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_40@1",
            "content": "One can treat all enumerated spans as related spans, and we will introduce how we select them in Section 3.6.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_40",
            "start": 44,
            "end": 152,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_41@0",
            "content": "Triaffine Scoring for Span Classification",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_41",
            "start": 0,
            "end": 40,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_42@0",
            "content": "To classify the entity type of the span, we calculate label-wise scores based on cross-span representations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_42",
            "start": 0,
            "end": 107,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_42@1",
            "content": "Since boundary information has been proved effective in previous works (Yu et al., 2020;Fu et al., 2021), we leverage the boundaries information and cross-span representations for span classification via triaffine scoring.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_42",
            "start": 109,
            "end": 330,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_42@2",
            "content": "Specifically, we estimate the log probabilities p c i,j,r of the span (i, j) for label r using boundaries h i , h j and cross-span representations h c i,j,r .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_42",
            "start": 332,
            "end": 489,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_43@0",
            "content": "p c i,j,r = TriAff(h i , h j , h c i,j,r , V r )(11)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_43",
            "start": 0,
            "end": 51,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_44@0",
            "content": "Since h c i,j,r are composed by h ig,jg,r , we can decompose Equation 11 into:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_44",
            "start": 0,
            "end": 77,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_45@0",
            "content": "t i,j,g,r = TriAff(h i , h j , h ig,jg,r , V r ) (12",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_45",
            "start": 0,
            "end": 51,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_46@0",
            "content": ")",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_46",
            "start": 0,
            "end": 0,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_47@0",
            "content": "p c i,j,r = g \u03b2 i,j,g,r t i,j,g,r(13)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_47",
            "start": 0,
            "end": 36,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_48@0",
            "content": "Figure 3b and 3c show the mechanism of triaffine scoring and the decomposition.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_48",
            "start": 0,
            "end": 78,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_48@1",
            "content": "We also apply the similar decomposition functions in the auxiliary span classification task, which applies the triaffine scoring on boundary representations and intermediate span representations h i,j,r to estimate log probabilities p i,j,r as intermediate predictions.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_48",
            "start": 80,
            "end": 348,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_49@0",
            "content": "Training and Inference",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_49",
            "start": 0,
            "end": 21,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_50@0",
            "content": "In practice, it is expensive and non-informative to consider interactions between all spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_50",
            "start": 0,
            "end": 91,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_50@1",
            "content": "Therefore, we propose an auxiliary task to classify spans with intermediate span representations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_50",
            "start": 93,
            "end": 189,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_50@2",
            "content": "Then, we can rank all spans based on the maximum of log probabilities (except None) from the intermediate predictions p i,j = max R r=1 p i,j,r , and retain top-m spans {(i l , j l )} m l=1 as candidates.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_50",
            "start": 191,
            "end": 394,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_50@3",
            "content": "We calculate cross-span representations h c i l ,j l ,r for retained spans by considering the full interactions among them, and estimate the classification logits p c i l ,j l ,r .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_50",
            "start": 396,
            "end": 575,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_50@4",
            "content": "Thus, we have two groups of predictions in our model {p i,j,r } 1\u2264i\u2264j\u2264N and {p c i l ,j l ,r } 1\u2264l\u2264m .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_50",
            "start": 577,
            "end": 678,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_50@5",
            "content": "{p i,j,r } are calculated for every possible span, and {p c i l ,j l ,r } are calculated only on top-m spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_50",
            "start": 680,
            "end": 788,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_51@0",
            "content": "In the training phase, we jointly minimize two groups of cross-entropy losses:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_51",
            "start": 0,
            "end": 77,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_52@0",
            "content": "L aux = \u2212 2 N (N + 1) i,j log exp(p i,j,r ij ) r exp(p i,j,r )(14)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_52",
            "start": 0,
            "end": 65,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_53@0",
            "content": "L main = \u2212 1 m 1\u2264l\u2264m log exp(p c i l ,j l ,r i l ,j l ) r exp(p c i l ,j l ,r )(15)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_53",
            "start": 0,
            "end": 82,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_54@0",
            "content": "L =\u00b5 aux L aux + L main (16)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_54",
            "start": 0,
            "end": 27,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_55@0",
            "content": "where r ij is the label of span (i, j).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_55",
            "start": 0,
            "end": 38,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_56@0",
            "content": "In both the training and inference phase, {p i,j,r } are used to select spans with high possibilities based on the supervision from L aux .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_56",
            "start": 0,
            "end": 138,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_56@1",
            "content": "We inference the labels of selected spans using {p c i l ,j l ,r } by assigning label ri l ,j l = arg r max p c i l ,j l ,r , and we assign None class for others.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_56",
            "start": 140,
            "end": 301,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_57@0",
            "content": "Experiments",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_57",
            "start": 0,
            "end": 10,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_58@0",
            "content": "Datasets",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_58",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_59@0",
            "content": "We conduct our experiments on the ACE2004 2 , ACE2005 3 (Doddington et al., 2004), GENIA (Kim et al., 2003) and KBP2017 4 (Ji et al., 2017) datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_59",
            "start": 0,
            "end": 148,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_59@1",
            "content": "To fairly compare with previous works, we follow the same dataset split with Lu and Roth (2015) for ACE2004 and ACE2005 datasets and use the split from for GENIA and KBP2017 datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_59",
            "start": 150,
            "end": 332,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_59@2",
            "content": "The statistics of all datasets are listed in Table 1.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_59",
            "start": 334,
            "end": 386,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_59@3",
            "content": "Following previous work, we measure the results using span-level precision, recall, and F 1 scores.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_59",
            "start": 388,
            "end": 486,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_60@0",
            "content": "Implementation Details",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_60",
            "start": 0,
            "end": 21,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_61@0",
            "content": "We use BERT-large-cased (Devlin et al., 2019) and albert-xxlarge-v2 (Lan et al., 2020) as the contextual embedding, fastText (Bojanowski et al., 2017) as the word embedding in ACE2004, ACE2005 and KBP2017 dataset.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_61",
            "start": 0,
            "end": 212,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_61@1",
            "content": "We use BioBERT-v1.1 (Lee et al., 2020) and",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_61",
            "start": 214,
            "end": 255,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@0",
            "content": "BioWordVec as the contextual and word embedding in the GENIA dataset respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 0,
            "end": 81,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@1",
            "content": "We truncate the input texts with context at length 192.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 83,
            "end": 137,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@2",
            "content": "The part-of-speech embeddings are initialized with dimension 50.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 139,
            "end": 202,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@3",
            "content": "The char embeddings are generated by a one-layer BiLSTM with hidden size 50.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 204,
            "end": 279,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@4",
            "content": "The two-layers BiLSTM with a hidden size of 1,024 is used for the token representations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 281,
            "end": 368,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@5",
            "content": "For triaffine transformations, we use d = 256 for the ACE2004, ACE2005, and KBP2017 dataset, and d = 320 for the GENIA dataset, respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 370,
            "end": 510,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@6",
            "content": "We set \u00b5 aux to 1.0, and select m = 30 in both training and inference.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 512,
            "end": 581,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@7",
            "content": "We use AdamW (Loshchilov and Hutter, 2019) to optimize our models with a linear learning rate decay.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 583,
            "end": 682,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_62@8",
            "content": "Detailed training parameters are presented in Appendix A.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_62",
            "start": 684,
            "end": 740,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_63@0",
            "content": "Baselines",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_63",
            "start": 0,
            "end": 8,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_64@0",
            "content": "DYGIE uses multi-task learning to extract entities, relations, and coreferences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_64",
            "start": 0,
            "end": 79,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_64@1",
            "content": "MGNER (Xia et al., 2019) uses a detector to find span candidates and a classifier for categorization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_64",
            "start": 81,
            "end": 181,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_64@2",
            "content": "BENSC (Tan et al., 2020) trains the boundary detection and span classification tasks jointly.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_64",
            "start": 183,
            "end": 275,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_64@3",
            "content": "TreeCRF (Fu et al., 2021) views entities as nodes in a constituency tree and decodes them with a Masked Inside algorithm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_64",
            "start": 277,
            "end": 397,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_64@4",
            "content": "Biaffine (Yu et al., 2020) classifies spans by a biaffine function between boundary representations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_64",
            "start": 399,
            "end": 498,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_64@5",
            "content": "Pyramid designs pyramid layer and inverse pyramid layer to decode nested entities.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_64",
            "start": 500,
            "end": 581,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_65@0",
            "content": "We also report the results of models with other paradigms, including hypergraph-based methods , transition-based methods (Fisher and Vlachos, 2019), generative methods (Yan et al., 2021;, and so on.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_65",
            "start": 0,
            "end": 197,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_65@1",
            "content": "We do not compare to BERT-MRC (Li et al., 2020a) since they use additional resources as queries.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_65",
            "start": 199,
            "end": 294,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_65@2",
            "content": "DYGIE++ and PURE (Zhong and Chen, 2021) use different splits of the ACE datasets which are not comparable.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_65",
            "start": 296,
            "end": 401,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_66@0",
            "content": "Results",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_66",
            "start": 0,
            "end": 6,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_67@0",
            "content": "We compare our method with baseline methods in Table 2 for the ACE2004, ACE2005, and GENIA datasets and Table 3 for the KBP2017 dataset, respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_67",
            "start": 0,
            "end": 149,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_67@1",
            "content": "With BERT as the encoder, our model achieves 87.40, 86.82, 81.23, and 85.05 paradigms, our model also achieves the state-of-theart results on the GENIA (+0.69 vs. Locate and Label) and KBP2017 dataset (+1.00 vs. Locate and Label) and shows comparable performances on ACE2004 (-0.01 vs. Locate and Label) and ACE2005 (-0.23 vs. Sequence to Set).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_67",
            "start": 151,
            "end": 494,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_67@2",
            "content": "With a stronger encoder ALBERT, our model achieves 88.56, 88.83, and 87.27 scores in terms of F 1 on ACE2004, ACE2005, and KBP2017 respectively, which exceeds all existing baselines including the Pyramid model with ALBERT (+0.82 on ACE2004, +2.49 on ACE2005) and the previous state-of-theart method on KBP2017 dataset (+3.22 vs. Locate and Label).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_67",
            "start": 496,
            "end": 842,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_68@0",
            "content": "Ablation Study",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_68",
            "start": 0,
            "end": 13,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_69@0",
            "content": "Considering we leverage multiple factors in multiple parts of the model, we design the following ablation settings to validate the effectiveness of each factor and the proposed triaffine mechanism.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_69",
            "start": 0,
            "end": 196,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_69@1",
            "content": "(a) To show the effectiveness of triaffine mechanism, we use a baseline biaffine model with the combination of boundary representations:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_69",
            "start": 198,
            "end": 333,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_70@0",
            "content": "p i,j,r = h i 1 T V r h j 1(17)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_70",
            "start": 0,
            "end": 30,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_71@0",
            "content": "(b) To show the effectiveness of boundaries in scoring, we remove boundaries factor from scoring:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_71",
            "start": 0,
            "end": 96,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_72@0",
            "content": "p i,j,r = V r h i,j,r + b r(18)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_72",
            "start": 0,
            "end": 30,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_73@0",
            "content": "(c) To show the effectiveness of labels in representation, we remove label factor in attention: (d) To show the effectiveness of boundaries in representation, we remove boundaries factor in attention:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_73",
            "start": 0,
            "end": 199,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_74@0",
            "content": "s i,j,k,r = TriAff(h i , h j , h k , W)(19)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_74",
            "start": 0,
            "end": 42,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_75@0",
            "content": "s i,j,k,r = s k,r = q r \u2022 h k(20)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_75",
            "start": 0,
            "end": 32,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_76@0",
            "content": "(e) To show the effectiveness of the triaffine mechanism in representations, we replace triaffine attention with linear attention:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_76",
            "start": 0,
            "end": 129,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_77@0",
            "content": "s i,j,k,r = W r (h i \u2225 h j \u2225 h k ) + c r(21)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_77",
            "start": 0,
            "end": 43,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@0",
            "content": "(f) To show the effectiveness of triaffine scoring, we replace triaffine scoring to linear scoring: (h) Our full model (i.e, use p c i l ,j l ,r as predictions).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 0,
            "end": 160,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@1",
            "content": "Table 4 shows the results of ablation studies on ACE2004 and GENIA datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 162,
            "end": 237,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@2",
            "content": "We use BERT-large-cased as the backbone encoder on ACE2004 and BioBERT-v1.1 on GENIA, respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 239,
            "end": 337,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@3",
            "content": "By comparing (a) with (g), we observe significant performances drop (-0.87 on ACE2004, -1.87 on GENIA), which indicates that our proposed triaffine mechanism with multiple heterogeneous factors performs better than the biaffine baseline.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 339,
            "end": 575,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@4",
            "content": "Comparing (b) with (g), we find that the boundary information contributes to span classification.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 577,
            "end": 673,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@5",
            "content": "Comparing (c) and (d) with (g) supports that either label or boundary in the triaffine attention improves the performance.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 675,
            "end": 796,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@6",
            "content": "The setting (g) performs better than (e) and (f), which shows the superiority of the triaffine transformation over the linear function.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 798,
            "end": 932,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@7",
            "content": "We observe that (h) performs better than (g) (+0.28 on ACE2004, +0.39 on GENIA), proving the strength of triaffine attention with interactions among related spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 934,
            "end": 1096,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_78@8",
            "content": "The above studies support that our proposed triaffine mechanism with associated heterogeneous factors is effective for span representation and classification.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_78",
            "start": 1098,
            "end": 1255,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_79@0",
            "content": "p i,j,r = V r (h i \u2225 h j \u2225 h i,j,r ) + b r(22)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_79",
            "start": 0,
            "end": 45,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_80@0",
            "content": "Discussion",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_80",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_81@0",
            "content": "We compare the F 1 scores of GENIA between triaffine model (g) and biaffine model (a) grouped by entity lengths in Figure 4.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_81",
            "start": 0,
            "end": 123,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_81@1",
            "content": "In all columns, the F 1 score of our method is better than the baseline.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_81",
            "start": 125,
            "end": 196,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_81@2",
            "content": "Furthermore, the right columns show that the F 1 score of the baseline gradually decreases with the incremental entity lengths.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_81",
            "start": 198,
            "end": 324,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_81@3",
            "content": "However, our method based on the triaffine mechanism with heterogeneous factors takes advantage of the interaction from boundaries and related spans, which keeps consistent results and outperforms the baseline.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_81",
            "start": 326,
            "end": 535,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_82@0",
            "content": "The results grouped by flat or nested entities are shown in Table 6.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_82",
            "start": 0,
            "end": 67,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_82@1",
            "content": "Our method has consistent improvements than the baseline, especially for the nested setting.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_82",
            "start": 69,
            "end": 160,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_82@2",
            "content": "Based on the above observations, our method is good at solving long entities that are more likely to be nested, which supports our model is built upon the characteristics of nested NER.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_82",
            "start": 162,
            "end": 346,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@0",
            "content": "At the stage of cross-span interactions, we only select top-m spans in practice.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 0,
            "end": 79,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@1",
            "content": "In Figure 5, we analyze the number m in two aspects.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 81,
            "end": 132,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@2",
            "content": "Firstly, we check the recall of entity spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 134,
            "end": 178,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@3",
            "content": "We observe that taking top-30 spans achieves a recall of 99.89, which means it covers almost all entities.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 180,
            "end": 285,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@4",
            "content": "As the maximum number of entities is 25, we believe it is enough to select top-30 spans.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 287,
            "end": 374,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@5",
            "content": "Secondly, we check the model performance.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 376,
            "end": 416,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@6",
            "content": "With top-30 spans, the model achieves 81.23 scores in terms of F 1 and there is no obvious performance improvement with more candidates.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 418,
            "end": 553,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@7",
            "content": "Based on two above observations, we choose m = 30, which can well balance the performance and efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 555,
            "end": 659,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@8",
            "content": "Finally, we test the efficiency of the decomposition.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 661,
            "end": 713,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_83@9",
            "content": "Compared with the naive triaffine scoring that takes 638.1ms (509.4ms in GPU + 128.7ms in CPU), the decomposed triaffine scoring takes 432.7ms (330.5ms in GPU + 102.2ms in CPU) for 10 iterations, which leads to approximately 32% speedup (details are shown in Appendix B).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_83",
            "start": 715,
            "end": 985,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_84@0",
            "content": "Case Study",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_84",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_85@0",
            "content": "To analyze the effect of fusing information from related spans with the cross-span interaction, we show two examples from ACE2004 and GENIA datasets in Table 5.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_85",
            "start": 0,
            "end": 159,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_85@1",
            "content": "In the first example, the model first predicts \"the trading population\" as \"GPE\", however, it revises to \"PER\" correctly by considering span interactions with the outer span \"the rest of the trading population\".",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_85",
            "start": 161,
            "end": 371,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_85@2",
            "content": "In the second example, it first predicts \"MnlI-AluI\" as \"protein\".",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_85",
            "start": 373,
            "end": 438,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_85@3",
            "content": "By interacting with surrounding entities \"MnlI-AluI fragment\", the model corrects its label to None.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_85",
            "start": 440,
            "end": 539,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_86@0",
            "content": "Conclusion",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_86",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_87@0",
            "content": "In this paper, we propose a span-based method for nested NER.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_87",
            "start": 0,
            "end": 60,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_87@1",
            "content": "Heterogeneous factors including tokens, boundaries, labels, and related spans are introduced to improve span classification with a novel triaffine mechanism.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_87",
            "start": 62,
            "end": 218,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_87@2",
            "content": "Experiments show our method outperforms all span-based methods and achieves state-of-the-art performance on four nested NER datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_87",
            "start": 220,
            "end": 352,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_87@3",
            "content": "Ablation studies show the introduced heterogeneous factors and triaffine mechanism are helpful for nested setting.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_87",
            "start": 354,
            "end": 467,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_87@4",
            "content": "Despite that large-scale pretrained language models have shown consistent improvement over many NLP tasks, we argue that the well-designed features and model structures are still useful for complex tasks like nested NER.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_87",
            "start": 469,
            "end": 688,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_87@5",
            "content": "Furthermore, although we only verify our triaffine mechanism in nested NER, we believe it can also be useful in tasks requiring high order interactions like parsing and semantic role labeling.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_87",
            "start": 690,
            "end": 881,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_88@0",
            "content": "Beatrice Alex, Barry Haddow, Claire Grover, Recognising nested named entities in biomedical text, 2007, Biological, translational, and clinical language processing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_88",
            "start": 0,
            "end": 165,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_89@0",
            "content": "Piotr Bojanowski, Edouard Grave, Armand Joulin, Tomas Mikolov, Enriching word vectors with subword information, 2017, Transactions of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_89",
            "start": 0,
            "end": 181,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_90@0",
            "content": "Jacob Devlin, Ming-Wei Chang, Kenton Lee, Kristina Toutanova, BERT: Pre-training of deep bidirectional transformers for language understanding, 2019, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_90",
            "start": 0,
            "end": 335,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_91@0",
            "content": "Alexis George R Doddington,  Mitchell, A Mark,  Przybocki, A Lance, Stephanie Ramshaw, Ralph Strassel,  Weischedel, The automatic content extraction (ace) program-tasks, data, and evaluation, 2004, Lrec, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_91",
            "start": 0,
            "end": 204,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_92@0",
            "content": "Timothy Dozat, Christopher Manning, Deep biaffine attention for neural dependency parsing, 2017-04-24, 5th International Conference on Learning Representations, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_92",
            "start": 0,
            "end": 161,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_93@0",
            "content": "Jenny Finkel, Christopher D Manning, Nested named entity recognition, 2009, Proceedings of the 2009 conference on empirical methods in natural language processing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_93",
            "start": 0,
            "end": 164,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_94@0",
            "content": "Joseph Fisher, Andreas Vlachos, Merge and label: A novel neural network architecture for nested NER, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_94",
            "start": 0,
            "end": 196,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_95@0",
            "content": "Yao Fu, Chuanqi Tan, Mosha Chen, Songfang Huang, Fei Huang, Nested named entity recognition with partially-observed treecrfs, 2021, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_95",
            "start": 0,
            "end": 195,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_96@0",
            "content": "Sepp Hochreiter, J\u00fcrgen Schmidhuber, Long short-term memory, 1997, Neural computation, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_96",
            "start": 0,
            "end": 87,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_97@0",
            "content": "Heng Ji, Xiaoman Pan, Boliang Zhang, Joel Nothman, James Mayfield, Paul Mcnamee, Cash Costello, Overview of tac-kbp2017 13 languages entity discovery and linking, 2017, Theory and Applications of Categories, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_97",
            "start": 0,
            "end": 208,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_98@0",
            "content": "Arzoo Katiyar, Claire Cardie, Nested named entity recognition revisited, 2018, Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_98",
            "start": 0,
            "end": 223,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_99@0",
            "content": "J-D Kim, Tomoko Ohta, Yuka Tateisi, Jun'ichi Tsujii, Genia corpus-a semantically annotated corpus for bio-textmining, 2003, Bioinformatics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_99",
            "start": 0,
            "end": 140,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_100@0",
            "content": "Guillaume Lample, Miguel Ballesteros, Sandeep Subramanian, Kazuya Kawakami, Chris Dyer, Neural architectures for named entity recognition, 2016, Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_100",
            "start": 0,
            "end": 330,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_101@0",
            "content": "Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, Radu Soricut, ALBERT: A lite BERT for self-supervised learning of language representations, 2020-04-26, 8th International Conference on Learning Representations, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_101",
            "start": 0,
            "end": 238,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_102@0",
            "content": "Jinhyuk Lee, Wonjin Yoon, Sungdong Kim, Donghyeon Kim, Sunkyu Kim, Chan Ho So, Jaewoo Kang, Biobert: a pre-trained biomedical language representation model for biomedical text mining, 2020, Bioinformatics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_102",
            "start": 0,
            "end": 206,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_103@0",
            "content": "Xiaoya Li, Jingrong Feng, Yuxian Meng, Qinghong Han, Fei Wu, Jiwei Li, A unified MRC framework for named entity recognition, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_103",
            "start": 0,
            "end": 261,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_104@0",
            "content": "Zuchao Li, Shexia He, Hai Zhao, Yiqing Zhang, Zhuosheng Zhang, Xi Zhou, Xiang Zhou, Dependency or span, end-to-end uniform semantic role labeling, 2019, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_104",
            "start": 0,
            "end": 216,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_105@0",
            "content": "Zuchao Li, Hai Zhao, Rui Wang, Kevin Parnow, High-order semantic role labeling, 2020, Findings of the Association for Computational Linguistics: EMNLP 2020, Online. Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_105",
            "start": 0,
            "end": 206,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_106@0",
            "content": "Hongyu Lin, Yaojie Lu, Xianpei Han, Le Sun, Sequence-to-nuggets: Nested entity mention detection via anchor-region networks, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_106",
            "start": 0,
            "end": 261,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_107@0",
            "content": "Ilya Loshchilov, Frank Hutter, Decoupled weight decay regularization, 2019-05-06, 7th International Conference on Learning Representations, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_107",
            "start": 0,
            "end": 140,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_108@0",
            "content": "Wei Lu, Dan Roth, Joint mention extraction and classification with mention hypergraphs, 2015, Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_108",
            "start": 0,
            "end": 182,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_109@0",
            "content": "Yi Luan, Dave Wadden, Luheng He, Amy Shah, Mari Ostendorf, Hannaneh Hajishirzi, A general framework for information extraction using dynamic span graphs, 2019, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_109",
            "start": 0,
            "end": 345,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_110@0",
            "content": "Ying Luo, Hai Zhao, Bipartite flat-graph network for nested named entity recognition, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_110",
            "start": 0,
            "end": 181,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_111@0",
            "content": "Yongliang Shen, Xinyin Ma, Zeqi Tan, Shuai Zhang, Wen Wang, Weiming Lu, Locate and label: A two-stage identifier for nested named entity recognition, 2021, Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_111",
            "start": 0,
            "end": 245,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_112@0",
            "content": "Takashi Shibuya, Eduard Hovy, Nested named entity recognition via second-best sequence learning and decoding, 2020, Transactions of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_112",
            "start": 0,
            "end": 179,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_113@0",
            "content": "Jana Strakov\u00e1, Milan Straka, Neural architectures for nested NER through linearization, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_113",
            "start": 0,
            "end": 183,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_114@0",
            "content": "Chuanqi Tan, Wei Qiu, Mosha Chen, Rui Wang, Fei Huang, Boundary enhanced neural span classification for nested named entity recognition, 2020, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_114",
            "start": 0,
            "end": 206,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_115@0",
            "content": "Zeqi Tan, Yongliang Shen, Shuai Zhang, Weiming Lu, Yueting Zhuang, A sequence-to-set network for nested named entity recognition, 2021, Proceedings of the 30th International Joint Conference on Artificial Intelligence, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_115",
            "start": 0,
            "end": 219,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_116@0",
            "content": "David Wadden, Ulme Wennberg, Yi Luan, Hannaneh Hajishirzi, Entity, relation, and event extraction with contextualized span representations, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_116",
            "start": 0,
            "end": 323,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_117@0",
            "content": "Bailin Wang, Wei Lu, Neural segmental hypergraphs for overlapping mention recognition, 2018, Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_117",
            "start": 0,
            "end": 181,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_118@0",
            "content": "Bailin Wang, Wei Lu, Yu Wang, Hongxia Jin, A neural transition-based model for nested mention recognition, 2018, Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_118",
            "start": 0,
            "end": 201,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_119@0",
            "content": "Jue Wang, Lidan Shou, Ke Chen, Gang Chen, Pyramid: A layered model for nested named entity recognition, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_119",
            "start": 0,
            "end": 199,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_120@0",
            "content": "Xinyu Wang, Jingxian Huang, Kewei Tu, Second-order semantic dependency parsing with endto-end neural networks, 2019, Proceedings of the 57th, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_120",
            "start": 0,
            "end": 142,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_121@0",
            "content": "UNKNOWN, None, , Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_121",
            "start": 0,
            "end": 123,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_122@0",
            "content": "Congying Xia, Chenwei Zhang, Tao Yang, Yaliang Li, Nan Du, Xian Wu, Wei Fan, Fenglong Ma, Philip Yu, Multi-grained named entity recognition, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_122",
            "start": 0,
            "end": 277,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_123@0",
            "content": "Hang Yan, Tao Gui, Junqi Dai, Qipeng Guo, Zheng Zhang, Xipeng Qiu, A unified generative framework for various NER subtasks, 2021, Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing, Long Papers.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_123",
            "start": 0,
            "end": 305,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_124@0",
            "content": "Juntao Yu, Bernd Bohnet, Massimo Poesio, Named entity recognition as dependency parsing, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_124",
            "start": 0,
            "end": 184,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_125@0",
            "content": "Zheng Yuan, Yuanhao Liu, Qiuyang Yin, Boyao Li, Xiaobin Feng, Guoming Zhang, Sheng Yu, Unsupervised multi-granular chinese word segmentation and term discovery via graph partition, 2020, Journal of Biomedical Informatics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_125",
            "start": 0,
            "end": 222,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_126@0",
            "content": "Jie Zhang, Dan Shen, Guodong Zhou, Jian Su, Chew-Lim Tan, Enhancing hmm-based biomedical named entity recognition by studying special phenomena, 2004, Journal of biomedical informatics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_126",
            "start": 0,
            "end": 186,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_127@0",
            "content": "Yijia Zhang, Qingyu Chen, Zhihao Yang, Hongfei Lin, Zhiyong Lu, Biowordvec, improving biomedical word embeddings with subword information and mesh, 2019, Scientific data, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_127",
            "start": 0,
            "end": 171,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_128@0",
            "content": "Yu Zhang, Zhenghua Li, Min Zhang, Efficient second-order TreeCRF for neural dependency parsing, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_128",
            "start": 0,
            "end": 191,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_129@0",
            "content": "Changmeng Zheng, Yi Cai, Jingyun Xu, Guandong Leung,  Xu, A boundary-aware neural model for nested named entity recognition, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_129",
            "start": 0,
            "end": 334,
            "label": {}
        },
        {
            "ix": "178-ARR_v1_130@0",
            "content": "Zexuan Zhong, Danqi Chen, 2021. A frustratingly easy approach for entity and relation extraction, , North American Association for Computational Linguistics (NAACL), .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "178-ARR_v1_130",
            "start": 0,
            "end": 166,
            "label": {}
        }
    ],
    "edges": [
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_1",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_1",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_1",
            "tgt_ix": "178-ARR_v1_2",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_1",
            "tgt_ix": "178-ARR_v1_2",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_3",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_3",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_4",
            "tgt_ix": "178-ARR_v1_5",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_6",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_7",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_7",
            "tgt_ix": "178-ARR_v1_8",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_8",
            "tgt_ix": "178-ARR_v1_9",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_4",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_5",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_6",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_7",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_8",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_9",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_10",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_4",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_11",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_10",
            "tgt_ix": "178-ARR_v1_11",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_13",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_11",
            "tgt_ix": "178-ARR_v1_12",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_11",
            "tgt_ix": "178-ARR_v1_13",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_11",
            "tgt_ix": "178-ARR_v1_12",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_14",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_14",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_14",
            "tgt_ix": "178-ARR_v1_15",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_14",
            "tgt_ix": "178-ARR_v1_15",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_16",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_15",
            "tgt_ix": "178-ARR_v1_16",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_17",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_17",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_18",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_17",
            "tgt_ix": "178-ARR_v1_18",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_19",
            "tgt_ix": "178-ARR_v1_20",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_20",
            "tgt_ix": "178-ARR_v1_21",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_18",
            "tgt_ix": "178-ARR_v1_19",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_18",
            "tgt_ix": "178-ARR_v1_20",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_18",
            "tgt_ix": "178-ARR_v1_21",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_18",
            "tgt_ix": "178-ARR_v1_19",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_22",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_21",
            "tgt_ix": "178-ARR_v1_22",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_23",
            "tgt_ix": "178-ARR_v1_24",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_24",
            "tgt_ix": "178-ARR_v1_25",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_25",
            "tgt_ix": "178-ARR_v1_26",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_26",
            "tgt_ix": "178-ARR_v1_27",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_22",
            "tgt_ix": "178-ARR_v1_23",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_22",
            "tgt_ix": "178-ARR_v1_24",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_22",
            "tgt_ix": "178-ARR_v1_25",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_22",
            "tgt_ix": "178-ARR_v1_26",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_22",
            "tgt_ix": "178-ARR_v1_27",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_22",
            "tgt_ix": "178-ARR_v1_23",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_28",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_27",
            "tgt_ix": "178-ARR_v1_28",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_29",
            "tgt_ix": "178-ARR_v1_30",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_30",
            "tgt_ix": "178-ARR_v1_31",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_31",
            "tgt_ix": "178-ARR_v1_32",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_28",
            "tgt_ix": "178-ARR_v1_29",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_28",
            "tgt_ix": "178-ARR_v1_30",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_28",
            "tgt_ix": "178-ARR_v1_31",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_28",
            "tgt_ix": "178-ARR_v1_32",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_28",
            "tgt_ix": "178-ARR_v1_29",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_33",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_32",
            "tgt_ix": "178-ARR_v1_33",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_34",
            "tgt_ix": "178-ARR_v1_35",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_35",
            "tgt_ix": "178-ARR_v1_36",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_36",
            "tgt_ix": "178-ARR_v1_37",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_37",
            "tgt_ix": "178-ARR_v1_38",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_38",
            "tgt_ix": "178-ARR_v1_39",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_39",
            "tgt_ix": "178-ARR_v1_40",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_34",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_35",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_36",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_37",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_38",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_39",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_40",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_34",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_41",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_40",
            "tgt_ix": "178-ARR_v1_41",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_42",
            "tgt_ix": "178-ARR_v1_43",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_43",
            "tgt_ix": "178-ARR_v1_44",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_44",
            "tgt_ix": "178-ARR_v1_45",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_45",
            "tgt_ix": "178-ARR_v1_46",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_46",
            "tgt_ix": "178-ARR_v1_47",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_47",
            "tgt_ix": "178-ARR_v1_48",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_42",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_43",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_44",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_45",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_46",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_47",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_48",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_42",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_49",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_48",
            "tgt_ix": "178-ARR_v1_49",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_50",
            "tgt_ix": "178-ARR_v1_51",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_51",
            "tgt_ix": "178-ARR_v1_52",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_52",
            "tgt_ix": "178-ARR_v1_53",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_53",
            "tgt_ix": "178-ARR_v1_54",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_54",
            "tgt_ix": "178-ARR_v1_55",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_55",
            "tgt_ix": "178-ARR_v1_56",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_50",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_51",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_52",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_53",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_54",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_55",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_56",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_50",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_57",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_56",
            "tgt_ix": "178-ARR_v1_57",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_58",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_58",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_58",
            "tgt_ix": "178-ARR_v1_59",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_58",
            "tgt_ix": "178-ARR_v1_59",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_60",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_59",
            "tgt_ix": "178-ARR_v1_60",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_60",
            "tgt_ix": "178-ARR_v1_61",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_60",
            "tgt_ix": "178-ARR_v1_62",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_60",
            "tgt_ix": "178-ARR_v1_61",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_63",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_63",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_64",
            "tgt_ix": "178-ARR_v1_65",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_63",
            "tgt_ix": "178-ARR_v1_64",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_63",
            "tgt_ix": "178-ARR_v1_65",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_63",
            "tgt_ix": "178-ARR_v1_64",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_66",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_65",
            "tgt_ix": "178-ARR_v1_66",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_66",
            "tgt_ix": "178-ARR_v1_67",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_66",
            "tgt_ix": "178-ARR_v1_67",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_68",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_67",
            "tgt_ix": "178-ARR_v1_68",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_69",
            "tgt_ix": "178-ARR_v1_70",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_70",
            "tgt_ix": "178-ARR_v1_71",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_71",
            "tgt_ix": "178-ARR_v1_72",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_72",
            "tgt_ix": "178-ARR_v1_73",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_73",
            "tgt_ix": "178-ARR_v1_74",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_74",
            "tgt_ix": "178-ARR_v1_75",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_75",
            "tgt_ix": "178-ARR_v1_76",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_76",
            "tgt_ix": "178-ARR_v1_77",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_77",
            "tgt_ix": "178-ARR_v1_78",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_79",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_69",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_70",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_71",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_72",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_73",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_74",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_75",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_76",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_77",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_78",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_79",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_69",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_80",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_79",
            "tgt_ix": "178-ARR_v1_80",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_81",
            "tgt_ix": "178-ARR_v1_82",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_82",
            "tgt_ix": "178-ARR_v1_83",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_80",
            "tgt_ix": "178-ARR_v1_81",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_80",
            "tgt_ix": "178-ARR_v1_82",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_80",
            "tgt_ix": "178-ARR_v1_83",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_80",
            "tgt_ix": "178-ARR_v1_81",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_84",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_84",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_84",
            "tgt_ix": "178-ARR_v1_85",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_84",
            "tgt_ix": "178-ARR_v1_85",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_86",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_85",
            "tgt_ix": "178-ARR_v1_86",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_86",
            "tgt_ix": "178-ARR_v1_87",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_86",
            "tgt_ix": "178-ARR_v1_87",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "178-ARR_v1_0",
            "tgt_ix": "178-ARR_v1_0@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_1",
            "tgt_ix": "178-ARR_v1_1@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_2@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_2@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_2@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_2@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_2@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_2@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_2",
            "tgt_ix": "178-ARR_v1_2@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_3",
            "tgt_ix": "178-ARR_v1_3@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_4",
            "tgt_ix": "178-ARR_v1_4@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_4",
            "tgt_ix": "178-ARR_v1_4@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_4",
            "tgt_ix": "178-ARR_v1_4@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@7",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@8",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@9",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@10",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@11",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@12",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@13",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@14",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@15",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_5",
            "tgt_ix": "178-ARR_v1_5@16",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_6@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_6@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_6@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_6@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_6@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_6@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_6",
            "tgt_ix": "178-ARR_v1_6@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_7",
            "tgt_ix": "178-ARR_v1_7@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_7",
            "tgt_ix": "178-ARR_v1_7@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_7",
            "tgt_ix": "178-ARR_v1_7@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_7",
            "tgt_ix": "178-ARR_v1_7@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_8",
            "tgt_ix": "178-ARR_v1_8@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_9",
            "tgt_ix": "178-ARR_v1_9@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_10",
            "tgt_ix": "178-ARR_v1_10@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_11",
            "tgt_ix": "178-ARR_v1_11@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@7",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_12",
            "tgt_ix": "178-ARR_v1_12@8",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_13@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_13@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_13@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_13@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_13@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_13@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_13",
            "tgt_ix": "178-ARR_v1_13@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_14",
            "tgt_ix": "178-ARR_v1_14@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_15",
            "tgt_ix": "178-ARR_v1_15@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_15",
            "tgt_ix": "178-ARR_v1_15@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_15",
            "tgt_ix": "178-ARR_v1_15@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_15",
            "tgt_ix": "178-ARR_v1_15@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_15",
            "tgt_ix": "178-ARR_v1_15@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_15",
            "tgt_ix": "178-ARR_v1_15@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_16",
            "tgt_ix": "178-ARR_v1_16@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_17",
            "tgt_ix": "178-ARR_v1_17@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_17",
            "tgt_ix": "178-ARR_v1_17@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_17",
            "tgt_ix": "178-ARR_v1_17@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_18",
            "tgt_ix": "178-ARR_v1_18@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_19",
            "tgt_ix": "178-ARR_v1_19@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_20",
            "tgt_ix": "178-ARR_v1_20@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_21",
            "tgt_ix": "178-ARR_v1_21@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_21",
            "tgt_ix": "178-ARR_v1_21@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_21",
            "tgt_ix": "178-ARR_v1_21@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_21",
            "tgt_ix": "178-ARR_v1_21@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_22",
            "tgt_ix": "178-ARR_v1_22@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_23",
            "tgt_ix": "178-ARR_v1_23@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_23",
            "tgt_ix": "178-ARR_v1_23@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_24",
            "tgt_ix": "178-ARR_v1_24@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_25",
            "tgt_ix": "178-ARR_v1_25@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_26",
            "tgt_ix": "178-ARR_v1_26@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_27",
            "tgt_ix": "178-ARR_v1_27@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_28",
            "tgt_ix": "178-ARR_v1_28@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_29",
            "tgt_ix": "178-ARR_v1_29@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_29",
            "tgt_ix": "178-ARR_v1_29@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_30",
            "tgt_ix": "178-ARR_v1_30@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_31",
            "tgt_ix": "178-ARR_v1_31@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_32",
            "tgt_ix": "178-ARR_v1_32@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_32",
            "tgt_ix": "178-ARR_v1_32@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_33",
            "tgt_ix": "178-ARR_v1_33@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_34",
            "tgt_ix": "178-ARR_v1_34@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_34",
            "tgt_ix": "178-ARR_v1_34@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_34",
            "tgt_ix": "178-ARR_v1_34@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_35",
            "tgt_ix": "178-ARR_v1_35@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_36",
            "tgt_ix": "178-ARR_v1_36@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_37",
            "tgt_ix": "178-ARR_v1_37@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_38",
            "tgt_ix": "178-ARR_v1_38@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_39",
            "tgt_ix": "178-ARR_v1_39@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_40",
            "tgt_ix": "178-ARR_v1_40@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_40",
            "tgt_ix": "178-ARR_v1_40@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_41",
            "tgt_ix": "178-ARR_v1_41@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_42",
            "tgt_ix": "178-ARR_v1_42@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_42",
            "tgt_ix": "178-ARR_v1_42@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_42",
            "tgt_ix": "178-ARR_v1_42@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_43",
            "tgt_ix": "178-ARR_v1_43@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_44",
            "tgt_ix": "178-ARR_v1_44@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_45",
            "tgt_ix": "178-ARR_v1_45@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_46",
            "tgt_ix": "178-ARR_v1_46@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_47",
            "tgt_ix": "178-ARR_v1_47@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_48",
            "tgt_ix": "178-ARR_v1_48@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_48",
            "tgt_ix": "178-ARR_v1_48@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_49",
            "tgt_ix": "178-ARR_v1_49@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_50",
            "tgt_ix": "178-ARR_v1_50@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_50",
            "tgt_ix": "178-ARR_v1_50@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_50",
            "tgt_ix": "178-ARR_v1_50@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_50",
            "tgt_ix": "178-ARR_v1_50@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_50",
            "tgt_ix": "178-ARR_v1_50@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_50",
            "tgt_ix": "178-ARR_v1_50@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_51",
            "tgt_ix": "178-ARR_v1_51@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_52",
            "tgt_ix": "178-ARR_v1_52@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_53",
            "tgt_ix": "178-ARR_v1_53@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_54",
            "tgt_ix": "178-ARR_v1_54@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_55",
            "tgt_ix": "178-ARR_v1_55@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_56",
            "tgt_ix": "178-ARR_v1_56@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_56",
            "tgt_ix": "178-ARR_v1_56@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_57",
            "tgt_ix": "178-ARR_v1_57@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_58",
            "tgt_ix": "178-ARR_v1_58@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_59",
            "tgt_ix": "178-ARR_v1_59@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_59",
            "tgt_ix": "178-ARR_v1_59@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_59",
            "tgt_ix": "178-ARR_v1_59@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_59",
            "tgt_ix": "178-ARR_v1_59@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_60",
            "tgt_ix": "178-ARR_v1_60@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_61",
            "tgt_ix": "178-ARR_v1_61@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_61",
            "tgt_ix": "178-ARR_v1_61@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@7",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_62",
            "tgt_ix": "178-ARR_v1_62@8",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_63",
            "tgt_ix": "178-ARR_v1_63@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_64",
            "tgt_ix": "178-ARR_v1_64@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_64",
            "tgt_ix": "178-ARR_v1_64@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_64",
            "tgt_ix": "178-ARR_v1_64@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_64",
            "tgt_ix": "178-ARR_v1_64@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_64",
            "tgt_ix": "178-ARR_v1_64@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_64",
            "tgt_ix": "178-ARR_v1_64@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_65",
            "tgt_ix": "178-ARR_v1_65@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_65",
            "tgt_ix": "178-ARR_v1_65@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_65",
            "tgt_ix": "178-ARR_v1_65@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_66",
            "tgt_ix": "178-ARR_v1_66@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_67",
            "tgt_ix": "178-ARR_v1_67@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_67",
            "tgt_ix": "178-ARR_v1_67@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_67",
            "tgt_ix": "178-ARR_v1_67@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_68",
            "tgt_ix": "178-ARR_v1_68@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_69",
            "tgt_ix": "178-ARR_v1_69@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_69",
            "tgt_ix": "178-ARR_v1_69@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_70",
            "tgt_ix": "178-ARR_v1_70@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_71",
            "tgt_ix": "178-ARR_v1_71@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_72",
            "tgt_ix": "178-ARR_v1_72@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_73",
            "tgt_ix": "178-ARR_v1_73@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_74",
            "tgt_ix": "178-ARR_v1_74@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_75",
            "tgt_ix": "178-ARR_v1_75@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_76",
            "tgt_ix": "178-ARR_v1_76@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_77",
            "tgt_ix": "178-ARR_v1_77@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@7",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_78",
            "tgt_ix": "178-ARR_v1_78@8",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_79",
            "tgt_ix": "178-ARR_v1_79@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_80",
            "tgt_ix": "178-ARR_v1_80@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_81",
            "tgt_ix": "178-ARR_v1_81@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_81",
            "tgt_ix": "178-ARR_v1_81@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_81",
            "tgt_ix": "178-ARR_v1_81@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_81",
            "tgt_ix": "178-ARR_v1_81@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_82",
            "tgt_ix": "178-ARR_v1_82@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_82",
            "tgt_ix": "178-ARR_v1_82@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_82",
            "tgt_ix": "178-ARR_v1_82@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@7",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@8",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_83",
            "tgt_ix": "178-ARR_v1_83@9",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_84",
            "tgt_ix": "178-ARR_v1_84@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_85",
            "tgt_ix": "178-ARR_v1_85@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_85",
            "tgt_ix": "178-ARR_v1_85@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_85",
            "tgt_ix": "178-ARR_v1_85@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_85",
            "tgt_ix": "178-ARR_v1_85@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_86",
            "tgt_ix": "178-ARR_v1_86@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_87",
            "tgt_ix": "178-ARR_v1_87@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_87",
            "tgt_ix": "178-ARR_v1_87@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_87",
            "tgt_ix": "178-ARR_v1_87@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_87",
            "tgt_ix": "178-ARR_v1_87@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_87",
            "tgt_ix": "178-ARR_v1_87@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_87",
            "tgt_ix": "178-ARR_v1_87@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_88",
            "tgt_ix": "178-ARR_v1_88@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_89",
            "tgt_ix": "178-ARR_v1_89@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_90",
            "tgt_ix": "178-ARR_v1_90@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_91",
            "tgt_ix": "178-ARR_v1_91@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_92",
            "tgt_ix": "178-ARR_v1_92@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_93",
            "tgt_ix": "178-ARR_v1_93@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_94",
            "tgt_ix": "178-ARR_v1_94@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_95",
            "tgt_ix": "178-ARR_v1_95@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_96",
            "tgt_ix": "178-ARR_v1_96@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_97",
            "tgt_ix": "178-ARR_v1_97@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_98",
            "tgt_ix": "178-ARR_v1_98@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_99",
            "tgt_ix": "178-ARR_v1_99@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_100",
            "tgt_ix": "178-ARR_v1_100@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_101",
            "tgt_ix": "178-ARR_v1_101@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_102",
            "tgt_ix": "178-ARR_v1_102@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_103",
            "tgt_ix": "178-ARR_v1_103@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_104",
            "tgt_ix": "178-ARR_v1_104@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_105",
            "tgt_ix": "178-ARR_v1_105@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_106",
            "tgt_ix": "178-ARR_v1_106@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_107",
            "tgt_ix": "178-ARR_v1_107@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_108",
            "tgt_ix": "178-ARR_v1_108@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_109",
            "tgt_ix": "178-ARR_v1_109@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_110",
            "tgt_ix": "178-ARR_v1_110@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_111",
            "tgt_ix": "178-ARR_v1_111@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_112",
            "tgt_ix": "178-ARR_v1_112@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_113",
            "tgt_ix": "178-ARR_v1_113@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_114",
            "tgt_ix": "178-ARR_v1_114@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_115",
            "tgt_ix": "178-ARR_v1_115@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_116",
            "tgt_ix": "178-ARR_v1_116@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_117",
            "tgt_ix": "178-ARR_v1_117@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_118",
            "tgt_ix": "178-ARR_v1_118@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_119",
            "tgt_ix": "178-ARR_v1_119@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_120",
            "tgt_ix": "178-ARR_v1_120@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_121",
            "tgt_ix": "178-ARR_v1_121@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_122",
            "tgt_ix": "178-ARR_v1_122@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_123",
            "tgt_ix": "178-ARR_v1_123@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_124",
            "tgt_ix": "178-ARR_v1_124@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_125",
            "tgt_ix": "178-ARR_v1_125@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_126",
            "tgt_ix": "178-ARR_v1_126@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_127",
            "tgt_ix": "178-ARR_v1_127@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_128",
            "tgt_ix": "178-ARR_v1_128@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_129",
            "tgt_ix": "178-ARR_v1_129@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "178-ARR_v1_130",
            "tgt_ix": "178-ARR_v1_130@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        }
    ],
    "prefix": "paper.tei",
    "meta": {
        "ix_counter": 1151,
        "sentence_split_type": "HybridSplitterLessAndLong",
        "sentence_split_model": "HybridSplitterLessAndLong_SciSpacy+Spacy",
        "position_tag_type": "from_draft",
        "doc_id": "178-ARR",
        "version": 1
    }
}