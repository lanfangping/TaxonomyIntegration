{
    "nodes": [
        {
            "ix": "24-ARR_v2_0",
            "content": "latent-GLAT: Glancing at Latent Variables for Parallel Text Generation",
            "ntype": "article-title",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_1",
            "content": "Abstract",
            "ntype": "abstract",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_2",
            "content": "Recently, parallel text generation has received widespread attention due to its success in generation efficiency. Although many advanced techniques are proposed to improve its generation quality, they still need the help of an autoregressive model for training to overcome the one-to-many multi-modal phenomenon in the dataset, limiting their applications. In this paper, we propose latent-GLAT, which employs the discrete latent variables to capture word categorical information and invoke an advanced curriculum learning technique, alleviating the multi-modality problem. Experiment results show that our method outperforms strong baselines without the help of an autoregressive model, which further broadens the application scenarios of the parallel decoding paradigm. \u2021",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_3",
            "content": "Introduction",
            "ntype": "title",
            "meta": {
                "section": "1"
            }
        },
        {
            "ix": "24-ARR_v2_4",
            "content": "Non-autoregressive Transformer (NAT, Gu et al., 2018) introduce a parallel decoding paradigm with higher decoding efficiency (> 10\u00d7) than autoregressive models (Bahdanau et al., 2015;Gehring et al., 2017;Vaswani et al., 2017). Unlike autoregressive models, NAT models impose conditional independence assumptions in words to support parallel decoding of sentences during inference. It attracts many researchers to explore NAT in machine translation (Gu et al., 2018;Lee et al., 2018;Kaiser et al., 2018) and text-to-speech tasks Peng et al., 2020).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_5",
            "content": "Amount of researchers devoted themselves to improve the NATs' inferior generation quality. Such as modeling word inter-dependencies by curriculum learning (Guo et al., 2020a;Liu et al., 2020) or iterative refinements mechanism (Ghazvininejad et al., 2019;Guo et al., 2020b), introducing latent variables to decompose target sentences and serve as the springboard for decoding (Shu et al., 2019;Ma et al., 2019;Bao et al., 2021), and introduce inductive bias for models' training (Wei et al., 2019;. The most successful method is the glancing transformer (GLAT, Qian et al., 2021a), which trains the NAT model by sampling partial target words as inputs to predict the remaining target words, explicitly building dependencies between the observed and unobserved words. Qian et al. (2021b) employ GLAT to achieve impressive results on the translation task of WMT21 1 , even outperforming many strong autoregressive translation systems in BLEU score (Papineni et al., 2002).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_6",
            "content": "Although existing NAT models achieve competitive results compared to autoregressive models in translation tasks, it is not negligible that they still need the help of an autoregressive Transformer (AT, Vaswani et al., 2017) as a teacher for training, i.e., sequence-level knowledge distillation (Kim and Rush, 2016). A well-recognized explanation is a multi-modality problem Sun and Yang, 2020): each input may have multiple valid outputs in datasets, which will prevent NAT models from learning to organize consistent outputs. Training with the outputs of an AT can directly bypass the multi-modal phenomenon in the dataset, effectively improving the models' performances.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_7",
            "content": "However, training NAT models by knowledge distillation are limited. First, it needs to train an extra AT model, which inevitably enlarges the training cost. Second, it is hard to promise that the teacher (or AT) model can be accurate enough in all text generation settings, which will become the bottleneck for its student NAT model. Therefore, training a model from scratch without the help of an AT model is still an open and interesting problem.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_8",
            "content": "In this paper, we propose latent-GLAT, which can directly learn from the raw dataset. It alleviates the multi-modality problem following a divide-andconquer spirit, introducing a small set of discrete latent variables to capture the target word categorical information and divide the origin goal into latent variables modeling and sentence reconstruction. First, the categorical information may have fewer multi-modality phenomena than the original words, thus can be learned directly without the help of knowledge distillation. Second, the word categorical information is informativeness to the sentence reconstruction. We can extend glancing training with these discrete latent variables for modeling the sentence, encouraging the model to build dependencies on word categorical information rather than words, which works more robustly.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_9",
            "content": "Experiment results on WMT14, Quora, and Dai-lyDialog datasets show that latent-GLAT achieves remarkable improvements over several strong baselines, verifying the effectiveness of latent-GLAT. More impressively, latent-GLAT even outperforms autoregressive models in Quora and DailyDialog datasets, further validating our motivation for removing knowledge distillation. In-depth analyses indicate that the introduced discrete latent variables are helpful to alleviate the multi-modality problem and are necessary for performance improvement.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_10",
            "content": "Background",
            "ntype": "title",
            "meta": {
                "section": "2"
            }
        },
        {
            "ix": "24-ARR_v2_11",
            "content": "For a sequence-to-sequence task of predicting sequence Y = (y 1 , y 2 , \u2022 \u2022 \u2022 , y m ) given its input sequence X = (x 1 , x 2 , \u2022 \u2022 \u2022 , x n ), the classical autoregressively factorization decomposes the p(Y |X) with a series of conditional probability:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_12",
            "content": "p AT (Y |X) = m t=1 p(y t |y <t , X),(1)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_13",
            "content": "where",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_14",
            "content": "y <t = (y 1 , y 2 , \u2022 \u2022 \u2022 , y t\u22121 ).",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_15",
            "content": "Although such factorization achieved great success in previous studies (Bahdanau et al., 2015;Gehring et al., 2017;Vaswani et al., 2017), they predict each word 2 based on the prefix words, which may suffer from the issues of error accumulation and slow decoding during inference.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_16",
            "content": "Non-autoregressive Transformer. To tackle the above problems, Gu et al. (2018) firstly propose non-autoregressive Transformer (NAT), introducing a non-autoregressive factorization as:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_17",
            "content": "p NAT (Y |X) = m t=1 p(y t |X),(2)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_18",
            "content": "where each word y t are modeled independently.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_19",
            "content": "During inference, the NAT model can decode the word simultaneously by arg max yt p(y t |X) for each y t , remarkably improving the efficiency (15\u00d7 speedups to an autoregressive Transformer). However, the independence assumption may prevent the NAT model from leveraging the inherent word dependencies to organize consistent outputs. Due to this,the efficiency improvements of NAT are at the cost of its quality, e.g., the performance degradation by more than 10.0 BLEU (Papineni et al., 2002) points in machine translation tasks (Gu et al., 2018). Besides, recent studies Sun and Yang, 2020) point out that the multimodality phenomenon in the dataset aggravates the challenge of NAT models.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_20",
            "content": "Glancing Transformer. To mitigate the issue of missing word dependency in NAT models, Qian et al. (2021a) propose Glancing Transformer (GLAT), introducing glancing training (GLT) and sampling partial target tokens for training NAT:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_21",
            "content": "L GLAT = \u2212 log p(Y obs |Y obs , X) = \u2212 y i \u2208Y obs log p(y i |Y obs , X),(3)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_22",
            "content": "where Y obs is the partial target tokens, and Y obs is its complements set. It progressively decreases the sampling ratio and obtains better performances in machine translation tasks. Nevertheless, we find that GLAT in experiments still has a multi-modality problem 3 : First, its sampling rate cannot be decreased to zero during training, which exists the issue of exposure bias. Second, it still heavily relies on a teacher model for further improvements (Qian et al., 2021a).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_23",
            "content": "Latent Transformer. To alleviate the multimodality problem, Kaiser et al. (2018); Shu et al. (2019); Ma et al. (2019); Bao et al. (2021) propose Latent Transformer (LT), introducing latent variables z for NAT predictions as:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_24",
            "content": "p LT (Y |X) = z p(z|X) \u2022 p(Y |z, X). (4)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_25",
            "content": "where p LT (Y |X) is always trained by variational inference (Ma et al., 2019) or discretization techniques (Kaiser et al., 2018). Such latent variables are decomposed from the target sentence, which is informative to determine the mode of the sentence and alleviates the multi-modality problems.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_26",
            "content": "Although Latent Transformer models improve performance in terms of BLEU score, their used autoregressive predictor (Kaiser et al., 2018;Bao et al., 2021) or deep iterative transformation (Shu et al., 2019;Ma et al., 2019) for predicting latent variables unavoidable sacrifice the overall decoding efficiency. Besides, they do not explicitly build the interdependencies among the outputs.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_27",
            "content": "3 Proposed Method: latent-GLAT",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_28",
            "content": "In this section, we present latent-GLAT. latent-GLAT follows Latent Transformer models (Kaiser et al., 2018;Bao et al., 2021) but introduces glancing training (Qian et al., 2021a) with the discrete latent variables. Our intuitions are as follows:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_29",
            "content": "First, compared to the words, the introduced discrete latent variables may have fewer modes than words and be informative to determine the modes of the sentences. In such a case, we can directly learn the discrete latent variables by the Glancing Transformer (Qian et al., 2021a), keeping competitive inference efficiency. More importantly, we can employ the latent variables to invoke glancing training for modeling the target sentences, which is informative enough to reduce the multi-modality problem of original sentences. Besides, glancing at latent variables also works robustly due we can obtain the latent variables during inference.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_30",
            "content": "Introducing Discrete Latent Variables for Modeling Target Categorical Information",
            "ntype": "title",
            "meta": {
                "section": "3.1"
            }
        },
        {
            "ix": "24-ARR_v2_31",
            "content": "In this part, we state the structure of latent-GLAT, which introduces a small set of discrete latent variables for a NAT model, basically following Kaiser et al. (2018); ; Bao et al. (2021).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_32",
            "content": "Let K be the size of the discrete latent space and let",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_33",
            "content": "[K] denote the set {1, 2, \u2022 \u2022 \u2022 , K}. For each target sentence Y = (y 1 , y 2 , \u2022 \u2022 \u2022 , y m )",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_34",
            "content": ", we use a same-length latent variable sequence for modeling it as: Discretization. For discretizing target sentences to latent variables, we use vector quantization , which works by dividing a large set of origin vector representations into small groups. We assign each token y i with a group j \u2208 [K] that has the nearest distance to its representation:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_35",
            "content": "p(Y |X) = z p \u03b8 (z|X) \u2022 m t=1 p \u03b8 (y t |z, X), (5) where z = (z 1 , z 2 , \u2022 \u2022 \u2022 , z m ) and z i \u2208 [K], \u03b8 is the model parameters.",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_36",
            "content": "z i = arg min j\u2208[K] || repr(y i ) \u2212 q j || 2 ,(6)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_37",
            "content": "where q \u2208 R K\u00d7d model is the maintained representations and d model is its dimension. We use the embedding as repr(y i ), refer to Bao et al. (2021).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_38",
            "content": "Finally, the model is trained to minimize",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_39",
            "content": "L LT = L LP + L WP ,(7)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_40",
            "content": "where L WP and L LP are the prediction loss for words Y and latent variables z, respectively. The maintained representations q are updated with an exponential moving average over a minibatch of target tokens",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_41",
            "content": "{y 1 , \u2022 \u2022 \u2022 , y i , \u2022 \u2022 \u2022 }: c j \u2190 \u03bbc j + (1 \u2212 \u03bb) i 1[z i = j], q j \u2190 \u03bbq j + (1 \u2212 \u03bb) i 1[z i = j] repr(y i ) c j (8)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_42",
            "content": "where c j is assigned count for group j, and we set decay parameter \u03bb = 0.999 in our experiments.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_43",
            "content": "Architecture. As shown in Figure 1, latent-GLAT mainly consists of an encoder F ENC (NAT Encoder), a latent predictor F LP (NAT Predictor), and a decoder F DEC (Mix. Decoder). We parameterize them with the multi-head attention-based encoder or decoder, similar to Transformer (Vaswani et al., 2017). Their functions can be formalized as:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_44",
            "content": "(e 1 , e 2 , \u2022 \u2022 \u2022 , e n ) \u2190 F ENC (x 1 , x 2 , \u2022 \u2022 \u2022 , x n ), (h 1 , h 2 , \u2022 \u2022 \u2022 , h m ) \u2190 softcopy(e 1:n ), p \u03b8 (z|X) \u2190 F LP (h 1:m , e 1:n ), p \u03b8 (Y |z, X) \u2190 F DEC (z 1:m , h 1:m , e 1:n ),",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_45",
            "content": "where we use an extra module F LEN to predict the target length m and initialize the decoder inputs",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_46",
            "content": "H = (h 1 , h 2 , \u2022 \u2022 \u2022 , h m )",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_47",
            "content": "with the softcopy (Wei et al., 2019) mechanism.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_48",
            "content": "Glancing at Discrete Latent Variables for Parallel Sequence Decoding",
            "ntype": "title",
            "meta": {
                "section": "3.2"
            }
        },
        {
            "ix": "24-ARR_v2_49",
            "content": "The small number (K < 128) of discrete latent variables can capture high-level categorical information of the target words, supporting better learning design for parallel sequence decoding.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_50",
            "content": "Our first insight is that we can learn to nonautoregressively predict the discretized latent variables directly without the help of distillation. Specifically, we parameterize the F LP in a nonautoregressive fashion and use a glancing training technique (GLT, Qian et al., 2021a) for optimizing it, as shown in Figure 2a:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_51",
            "content": "L GLT LP = \u2212 log p \u03b8 (z obs |z obs , X)(9)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_52",
            "content": "where z obs is uniformly sampled from z, refer to Qian et al. (2021a). We provide more training details of latent-GLAT in Appendix B. Our next insight is modeling the sentence based on the sampled latent variables z obs rather than z, namely, glancing at z obs for optimizing F DEC :",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_53",
            "content": "L WP = \u2212 log p \u03b8 (Y |z obs , X).(10)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_54",
            "content": "We find Eqn. (10) works robustly in experiments and analyze it in Section ( \u00a7 4.3).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_55",
            "content": "As shown in Figure 2b, we eventually employ words to invoke glancing training for minimizing L WP , namely we optimize the F DEC by minimizing",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_56",
            "content": "L GLT WP = \u2212 log p \u03b8 (Y obs |z obs , Y obs , X),(11)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_57",
            "content": "where Y obs and z obs are the sampled target tokens and discrete latent variables.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_58",
            "content": "Overall Training Loss. Our full-fledged loss includes latent variable prediction, sentence reconstruction, and length prediction losses:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_59",
            "content": "L = L GLT WP + L GLT LP + \u03b1L LEN ,(12)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_60",
            "content": "where \u03b1 = 0.1 are the hyperparameters to adjust the importance of length prediction loss L LEN .",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_61",
            "content": "Inference",
            "ntype": "title",
            "meta": {
                "section": "3.3"
            }
        },
        {
            "ix": "24-ARR_v2_62",
            "content": "In inference phase, latent-GLAT predicts the target length, latent variables, and sentence in turn.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_63",
            "content": "For the target length, latent-GLAT first predicts the target length m with the length predictor F LEN . To avoid the length prediction errors during inference, latent-GLAT expands the length m to a ranges (we use",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_64",
            "content": "[m \u2212 3, \u2022 \u2022 \u2022 , m + 2], total six can- didates in our experiments).",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_65",
            "content": "Then, latent-GLAT predicts the latent variables \u1e91 with arg max z p \u03b8 (z|X) and sentence \u0176 with arg max Y p \u03b8 (Y | \u1e91, X) for each candidate.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_66",
            "content": "Similar to Ma et al. (2019), latent-GLAT also ranks the candidates by itself (self-reranking) and chooses the highest score output with:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_67",
            "content": "\u0176 = arg max Y p \u03b8 (Y | \u1e91, X) \u2022 \u03b3 |Y | (13",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_68",
            "content": ")",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_69",
            "content": "where \u03b3 is the length penalty ratio to avoid the length bias, and |Y | denotes the length of Y .",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_70",
            "content": "Experiments",
            "ntype": "title",
            "meta": {
                "section": "4"
            }
        },
        {
            "ix": "24-ARR_v2_71",
            "content": "We conduct experiments on several generation tasks, including machine translation, paraphrase generation, and dialog generation.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_72",
            "content": "Experimental Setup",
            "ntype": "title",
            "meta": {
                "section": "4.1"
            }
        },
        {
            "ix": "24-ARR_v2_73",
            "content": "Dataset. We chose the most popular benchmarks for each task:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_74",
            "content": "\u2022 Machine Translation (MT): We follow previous practices in NAT models and use the WMT14 English (EN) \u2194 German (DE) corpus (4.5M sentence pairs) and the IWSLT14 German (DE) \u2192 English (EN) corpus (160K sentence pairs) to validate our proposed model. We obtain the datasets following the instruction open-sourced in fairseq 4 . In detail, we first tokenize the datasets with Moses script. Then, we use 37,000 and 10,000 operations to split the words into byte-pair encodings (BPE, Sennrich et al., 2016) in WMT14 and IWSLT14 datasets, respectively. We also share subword embeddings between the source and target language for each dataset. \u2022 Paraphrase Generation (PG): We use the Quora 5 dataset to evaluate the paraphrase generation task. The Quora dataset contains around 135K labeled paraphrases pairs. Following the standard dataset split, we sample 100K sentence pairs from the labeled paraphrases as training data and hold out 30K pairs for testing, the remaining about 5K pairs for validation. Like the MT tasks, we tokenize the corpus with Moses scripts and split the words into BPE units with total 32K operations. \u2022 Dialog Generation (DG): We conduct the dialog generation experiments on the DailyDialog dataset (Li et al., 2017). We obtain the processed DailyDialog dataset from Bao et al.",
            "ntype": "list",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_75",
            "content": "(2020) 6 . The training set contains 87,170 sentence pairs (11,118 dialogues). The validation and testing set in the dataset contain 8069 pairs (1000 dialogues) and 7740 pairs (1000 dialogues), respectively. Note that these tasks emphasize different aspects. The task of MT aims to transfer bilingual sentences with semantically invariant conditions. The PG task differs from machine translation and works on mode transformation in the same language, whose goal is to synthesize a sentence different from the original input but conveys the same meaning. The DG task is most challenging due to the complex generation goal.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_76",
            "content": "Implementations. We compare latent-GLAT with Transformer (Vaswani et al., 2017), NAT (Gu et al., 2018), and GLAT (Qian et al., 2021a) models. We implement them based on the open-source framework fairseq (Ott et al., 2019).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_77",
            "content": "For machine translation tasks, we use the base setting (d model = 512, d hidden = 2048, dropout = 0.1, n head = 8, and n layer = 6) of Transformer (Vaswani et al., 2017) for WMT14 dataset and a smaller setting (d model = 512, d hidden = 1024, dropout = 0.3, n head = 4, and n layer = 6) for IWSLT14 dataset. The number of layers in latent-GLAT decoder and latent predictor are both set to 4 in experiments. We use inverse square root learning rate scheduling for WMT14 and a linear annealing learning rate from 3.0 \u00d7 10 \u22124 to 1.0\u00d710 \u22125 in 250K steps for IWSLT14. The models are optimized with Adam (Kingma and Ba, 2015) optimizer (\u03b2 1 = 0.9, \u03b2 2 = 0.999) in 300K steps for WMT14 and 250K steps for IWSLT14. As for the ratio \u03c4 that used in glancing sampling, we linear anneal the ratio from 0.5 to 0.3 in whole training steps. The mini-batch in each step consists of 2K tokens for IWSLT14 and 64K tokens for WMT14.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_78",
            "content": "Since the scale of the Quora and DailyDialog datasets are close to the IWSLT14, we keep the same setting to the IWSLT14, such as the Adam, learning rate (linear annealing from 3.0 \u00d7 10 \u22124 to 1.0 \u00d7 10 \u22125 ), and batch size (2K tokens).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_79",
            "content": "Evaluation. To validate the effectiveness of our proposed method, we evaluate it in terms of quality and efficiency. We use tokenized and cased BLEU scores (Papineni et al., 2002) 7 to evaluate the generation quality of MT and PG tasks. For dialog generation, we also include BLEU-1 and BLEU-2 scores for analysis. Following the common practices (Gu et al., 2018;Qian et al., 2021a), we measure the decoding latency of each model by decoding sentence by sentence and compute the speedup compared with the autoregressive Transformer (AT) model to reflect its decoding efficiency. We highlight the best NAT result.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_80",
            "content": "Main Results",
            "ntype": "title",
            "meta": {
                "section": "4.2"
            }
        },
        {
            "ix": "24-ARR_v2_81",
            "content": "We can see from results in this unusual phenomenon. Specifically, the weak connection may encourage the AT model to predict the tokens by paying more attention to their history outputs, which degenerate to a targetside language model. In contrast, the NAT models do not have this fast track, pushing them to pay more attention to the inputs and recall more target tokens. We further find that there are so-called safe response (Li et al., 2016) in AT's outputs, which verify our conjecture.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_82",
            "content": "More Comparisons. we further compare the advanced NAT models that builds upon latent variables or iterative refinement in machine translation tasks:",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_83",
            "content": "\u2022 NATs w/ latent variables: LV-NAR (Shu et al., 2019), SynST (Akoury et al., 2019), Flowseq (Ma et al., 2019), and CNAT (Bao et al., 2021). \u2022 Iterative NATs: CMLM (Ghazvininejad et al., 2019) and LevT (Gu et al., 2019). Table 2 shows that introducing latent variables Figure 3: BLEU scores and their relative decoding speedups of different models on WMT14 EN\u2192DE test set. Note that we evaluate the speedups with a single GTX 1080-Ti GPU and include the results with the same evaluating hardware for fair comparisons.",
            "ntype": "list",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_84",
            "content": "(LV-NAR, Flowseq, and CNAT) or decoding with multiple iterations (CMLM and LevT) both improve non-autoregressive decoding in translation quality. However, iterative refinements or deep transformations always sacrifice decoding efficiency. In contrast, the proposed latent-GLAT outperforms all NAT models with a relatively low cost, keeping a competitive speedup over autoregressive Transformer (AT). Specifically, latent-GLAT with one-pass decoding narrows the performance gap to the AT from 5.87 BLEU points to 2.34 BLEU points on the WMT14 EN\u2192DE test set.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_85",
            "content": "Decoding efficiency. We can see there is a tradeoff between the translation quality and decoding efficiency in Table 2. We thus present the scatter plot of different models in Figure 3, showing the trend of translation quality and decoding efficiency.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_86",
            "content": "As seen, latent-GLAT is located on the top-right of the baselines. It outperforms the baselines in the BLEU score if decoding speedup is fixed and in decoding speedup if the BLEU score is fixed.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_87",
            "content": "Analysis",
            "ntype": "title",
            "meta": {
                "section": "4.3"
            }
        },
        {
            "ix": "24-ARR_v2_88",
            "content": "We now turn to verify our intuition that latent-GLAT can alleviate the multi-modality problem. latent-GLAT largely alleviates the sentencelevel multi-modal problem. Previous researches (Gu et al., 2018;Ma et al., 2019;Qian et al., 2021a;Bao et al., 2021) always utilize a Transformer model as a teacher for training NAT models, namely sequence-level knowledge distillation (Kim and Rush, 2016) directly reduces the sentence-level multi-modal phenomenon in datasets. Therefore, we use the average gains from the knowledge distillation to reflect the ability of the NAT models to overcome this issue.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_89",
            "content": "As seen in Table 3, the pure NAT models heavily rely on knowledge distillation. By introducing the target information with the latent variables (Flowseq and CNAT) or sampled tokens (GLAT), the NAT models improve its' ability to overcome the multi-modality issue. Our proposed latent-GLAT well combines the above two techniques. It obtains only 0.95 BLEU points average gains and validates our motivation.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_90",
            "content": "Discrete latent variables have fewer modes than raw sentences. To validate our intuition that the introduced latent variables are easier to predict than tokens, we refer to to compute the complexity metrics on each dataset according to alignment relations. Specifically, we use the fast_align 8 toolkit to align source input X and target outputs Y or discretized latent variable sequences z. Then, we compute the token-level complexity C TOK (d) and the sentence-level complexity C SEN (d) according to . These metrics can trivially understand as the number of valid candidates for each input.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_91",
            "content": "As shown in Table 4, the latent variables have the lowest complexity in both token-level complexity and sentence-level complexity. In other words, predicting the latent variable sequences is effortless than predicting others, which is consistent with our intuition. Although we obtain a lower complexity dataset by filtering the datasets with an autoregressive model (AT outputs versus Raw outputs), they may introduce model error and need extra training for AT model. In contrast, the discrete latent variables are simple and informative enough to serve as a springboard for modeling target sentences.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_92",
            "content": "Glancing with latent variables improves the performance with a large margin. We can see in Table 5 that introducing latent variables both obtain performance gains to their counterpart (L#2 vs. L#1, +0.83 points, and L#4 vs. L#3, +1.69 points). As expected, the gains are largely improved while adopting the glancing training with discrete latent variables (L#5 vs. L#1, +9.75 points), which already outperforms glancing training with the reference token (L#5 vs. L#4, +3.55 points). Finally, we jointly perform glancing training with the reference tokens and discrete latent variables, achieving the best result (L#6 vs. L#1, +11.04 points). Figure 4: BLEU scores of latent-GLAT using different length penalty ratios on the WMT14 EN\u2192DE valid set. We search the length penalty ratio \u03b3 for latent-GLAT while fixing the K = 64.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_93",
            "content": "Effects of K and \u03b3. As shown in Figure 4 and Table 6, we search the hyper-parameter of latent-GLAT that the number of discrete latent variables and the length penalty ratio \u03b3 according to the validation performance. We notice that using more latent codes causes performance degradation during inference, in which the latent variables may degenerate to tokens and contains more prediction error during inference. The latent-GLAT implemented with 64 latent variables and \u03b3 = 1.1 obtains the best result on WMT14 EN\u2192DE valid set.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_94",
            "content": "5 Related Work Gu et al. (2018) first propose a non-autoregressive Transformer (NAT) model for neural machine translation (NMT) and begin to explore parallel decoding. It abandons explicitly modeling word interdependencies to decode the tokens in parallel, significantly improving the inference speed. However, its translation quality is inferior to the Transformer (Vaswani et al., 2017).",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_95",
            "content": "To alleviate this performance degradation, many researchers work to enhance word dependency modeling, including imitation learning (Wei et al., 2019;, curriculum learning (Guo et al., 2020a;Liu et al., 2020), iterative refinements (Lee et al., 2018;Ghazvininejad et al., 2019;Gu et al., 2019;Guo et al., 2020b;Huang et al., 2022), and a simplified autoregressive process . The most representative method is the glancing transformer model (Qian et al., 2021a), which adaptively and progressively samples partial tokens as inputs and predicts the remaining tokens, effectively establishing the dependencies between the sampled tokens and the remaining tokens. However, these models still rely on a teacher for training, which cannot directly learn the raw dataset that contains one-to-many multi-modality phenomenon.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_96",
            "content": "Introducing latent variables (Bao et al., 2019(Bao et al., , 2021 to organize the target sentence is also a helpful route. Among them, our method is close to Kaiser et al. (2018); Shu et al. (2019); Ma et al. (2019); Akoury et al. (2019); Bao et al. (2021). These methods decompose the latent variables (hints) from the target sentence and divide the origin goal into two parts: modeling latent variables and modeling the target sentences based on latent variables. It implicitly overcomes the multimodality phenomenon of target sentences because the latent variables can largely determine the mode of the sentence. However, these methods always model the latent variables with an autoregressive predictor, which naturally sacrifices the decoding efficiency.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_97",
            "content": "Unlike them, our approach models the discrete latent variables in a non-autoregressive fashion and extends glancing training with the discrete latent variables. As a result, latent-GLAT accomplishes a competitive performance both in decoding efficiency and quality.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_98",
            "content": "Conclusion",
            "ntype": "title",
            "meta": {
                "section": "6"
            }
        },
        {
            "ix": "24-ARR_v2_99",
            "content": "We propose latent-GLAT, which can be directly trained without the help of knowledge distillation. Specifically, we employ discrete latent variables to capture the word categorical information and divide the original goal into the latent variables modeling and word prediction tasks. Then, we learn each task with the glancing training and encourage the model to build dependencies on the latent variables, which have fewer modes than the words and are also informative for modeling the target sentences. Experiments results on machine translation, paraphrase generation, and dialogue generation tasks validate the effectiveness of our latent-GLAT.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_100",
            "content": "According to the performance shown in Figure 5a, we can see a GLAT model will degenerate to a NAT model while using a small sampling ratio. In such a case, introducing an autoregressive Transformer as a teacher for training the GLAT model alleviates this issue (Figure 5b), indicating that the GLAT model still needs the help of knowledge distillation for alleviating multi-modality problems. B Model Details of latent-GLAT Decoder Inputs. Following the most common in NAT models (Wei et al., 2019;, we use Softcopy mechanism for initializing the decoder inputs H = (h 1 , h 2 , \u2022 \u2022 \u2022 , h m ):",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_101",
            "content": "h i = n i \u03b1 ij \u2022 e i , \u03b1 ij \u221d exp [\u2212(i \u2212 j \u2022 n m ) 2 ],(14)",
            "ntype": "formula",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_102",
            "content": "where E = (e 1 , e 2 , \u2022 \u2022 \u2022 , e n ) is the encoded representation of X = (x 1 , x 2 , \u2022 \u2022 \u2022 , x n ), n and m are the length of source and target sentences, respectively.",
            "ntype": "p",
            "meta": null
        },
        {
            "ix": "24-ARR_v2_103",
            "content": "Nader Akoury, Kalpesh Krishna, Mohit Iyyer, Syntactically supervised transformers for faster neural machine translation, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b0",
                "authors": [
                    "Nader Akoury",
                    "Kalpesh Krishna",
                    "Mohit Iyyer"
                ],
                "title": "Syntactically supervised transformers for faster neural machine translation",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_104",
            "content": "Dzmitry Bahdanau, Kyunghyun Cho, Yoshua Bengio, Neural machine translation by jointly learning to align and translate, 2015-05-07, 3rd International Conference on Learning Representations, .",
            "ntype": "ref",
            "meta": {
                "xid": "b1",
                "authors": [
                    "Dzmitry Bahdanau",
                    "Kyunghyun Cho",
                    "Yoshua Bengio"
                ],
                "title": "Neural machine translation by jointly learning to align and translate",
                "pub_date": "2015-05-07",
                "pub_title": "3rd International Conference on Learning Representations",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_105",
            "content": "Siqi Bao, Huang He, Fan Wang, Hua Wu, Haifeng Wang, PLATO: Pre-trained dialogue generation model with discrete latent variable, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, Online. Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b2",
                "authors": [
                    "Siqi Bao",
                    "Huang He",
                    "Fan Wang",
                    "Hua Wu",
                    "Haifeng Wang"
                ],
                "title": "PLATO: Pre-trained dialogue generation model with discrete latent variable",
                "pub_date": "2020",
                "pub_title": "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Online. Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_106",
            "content": "Yu Bao, Shujian Huang, Tong Xiao, Dongqi Wang, Xinyu Dai, Jiajun Chen, Nonautoregressive translation by learning target categorical codes, 2021, Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Online. Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b3",
                "authors": [
                    "Yu Bao",
                    "Shujian Huang",
                    "Tong Xiao",
                    "Dongqi Wang",
                    "Xinyu Dai",
                    "Jiajun Chen"
                ],
                "title": "Nonautoregressive translation by learning target categorical codes",
                "pub_date": "2021",
                "pub_title": "Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies",
                "pub": "Online. Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_107",
            "content": "UNKNOWN, None, 2019, Non-autoregressive transformer by position learning, .",
            "ntype": "ref",
            "meta": {
                "xid": "b4",
                "authors": null,
                "title": null,
                "pub_date": "2019",
                "pub_title": "Non-autoregressive transformer by position learning",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_108",
            "content": "UNKNOWN, None, 2019, Listen and fill in the missing letters: Non-autoregressive transformer for speech recognition, .",
            "ntype": "ref",
            "meta": {
                "xid": "b5",
                "authors": null,
                "title": null,
                "pub_date": "2019",
                "pub_title": "Listen and fill in the missing letters: Non-autoregressive transformer for speech recognition",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_109",
            "content": "Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, Yann Dauphin, Convolutional sequence to sequence learning, 2017-08-11, Proceedings of the 34th International Conference on Machine Learning, PMLR.",
            "ntype": "ref",
            "meta": {
                "xid": "b6",
                "authors": [
                    "Jonas Gehring",
                    "Michael Auli",
                    "David Grangier",
                    "Denis Yarats",
                    "Yann Dauphin"
                ],
                "title": "Convolutional sequence to sequence learning",
                "pub_date": "2017-08-11",
                "pub_title": "Proceedings of the 34th International Conference on Machine Learning",
                "pub": "PMLR"
            }
        },
        {
            "ix": "24-ARR_v2_110",
            "content": "Marjan Ghazvininejad, Omer Levy, Yinhan Liu, Luke Zettlemoyer, Mask-predict: Parallel decoding of conditional masked language models, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), .",
            "ntype": "ref",
            "meta": {
                "xid": "b7",
                "authors": [
                    "Marjan Ghazvininejad",
                    "Omer Levy",
                    "Yinhan Liu",
                    "Luke Zettlemoyer"
                ],
                "title": "Mask-predict: Parallel decoding of conditional masked language models",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_111",
            "content": "Jiatao Gu, James Bradbury, Caiming Xiong, O Victor, Richard Li,  Socher, Nonautoregressive neural machine translation, 2018-04-30, 6th International Conference on Learning Representations, .",
            "ntype": "ref",
            "meta": {
                "xid": "b8",
                "authors": [
                    "Jiatao Gu",
                    "James Bradbury",
                    "Caiming Xiong",
                    "O Victor",
                    "Richard Li",
                    " Socher"
                ],
                "title": "Nonautoregressive neural machine translation",
                "pub_date": "2018-04-30",
                "pub_title": "6th International Conference on Learning Representations",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_112",
            "content": "Jiatao Gu, Changhan Wang, Junbo Zhao, Levenshtein transformer, 2019-12-08, Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems, Vancouver.",
            "ntype": "ref",
            "meta": {
                "xid": "b9",
                "authors": [
                    "Jiatao Gu",
                    "Changhan Wang",
                    "Junbo Zhao"
                ],
                "title": "Levenshtein transformer",
                "pub_date": "2019-12-08",
                "pub_title": "Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems",
                "pub": "Vancouver"
            }
        },
        {
            "ix": "24-ARR_v2_113",
            "content": "Junliang Guo, Xu Tan, Linli Xu, Tao Qin, Enhong Chen, Tie-Yan Liu, Fine-tuning by curriculum learning for non-autoregressive neural machine translation, 2020, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "ref",
            "meta": {
                "xid": "b10",
                "authors": [
                    "Junliang Guo",
                    "Xu Tan",
                    "Linli Xu",
                    "Tao Qin",
                    "Enhong Chen",
                    "Tie-Yan Liu"
                ],
                "title": "Fine-tuning by curriculum learning for non-autoregressive neural machine translation",
                "pub_date": "2020",
                "pub_title": "Proceedings of the AAAI Conference on Artificial Intelligence",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_114",
            "content": "Junliang Guo, Linli Xu, Enhong Chen, Jointly masked sequence-to-sequence model for nonautoregressive neural machine translation, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, Online. Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b11",
                "authors": [
                    "Junliang Guo",
                    "Linli Xu",
                    "Enhong Chen"
                ],
                "title": "Jointly masked sequence-to-sequence model for nonautoregressive neural machine translation",
                "pub_date": "2020",
                "pub_title": "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Online. Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_115",
            "content": "UNKNOWN, None, 1950, Error detecting and error correcting codes. The Bell system technical journal, .",
            "ntype": "ref",
            "meta": {
                "xid": "b12",
                "authors": null,
                "title": null,
                "pub_date": "1950",
                "pub_title": "Error detecting and error correcting codes. The Bell system technical journal",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_116",
            "content": "Chenyang Huang, Hao Zhou, Lili Osmar R Za\u00efane, Lei Mou,  Li, Non-autoregressive translation with layer-wise prediction and deep supervision, 2022, AAAI, .",
            "ntype": "ref",
            "meta": {
                "xid": "b13",
                "authors": [
                    "Chenyang Huang",
                    "Hao Zhou",
                    "Lili Osmar R Za\u00efane",
                    "Lei Mou",
                    " Li"
                ],
                "title": "Non-autoregressive translation with layer-wise prediction and deep supervision",
                "pub_date": "2022",
                "pub_title": "AAAI",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_117",
            "content": "Lukasz Kaiser, Samy Bengio, Aurko Roy, Ashish Vaswani, Niki Parmar, Jakob Uszkoreit, Noam Shazeer, Fast decoding in sequence models using discrete latent variables, 2018-07-10, Proceedings of the 35th International Conference on Machine Learning, PMLR.",
            "ntype": "ref",
            "meta": {
                "xid": "b14",
                "authors": [
                    "Lukasz Kaiser",
                    "Samy Bengio",
                    "Aurko Roy",
                    "Ashish Vaswani",
                    "Niki Parmar",
                    "Jakob Uszkoreit",
                    "Noam Shazeer"
                ],
                "title": "Fast decoding in sequence models using discrete latent variables",
                "pub_date": "2018-07-10",
                "pub_title": "Proceedings of the 35th International Conference on Machine Learning",
                "pub": "PMLR"
            }
        },
        {
            "ix": "24-ARR_v2_118",
            "content": "Yoon Kim, Alexander Rush, Sequencelevel knowledge distillation, 2016, Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b15",
                "authors": [
                    "Yoon Kim",
                    "Alexander Rush"
                ],
                "title": "Sequencelevel knowledge distillation",
                "pub_date": "2016",
                "pub_title": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_119",
            "content": "P Diederik, Jimmy Kingma,  Ba, Adam: A method for stochastic optimization, 2015-05-07, 3rd International Conference on Learning Representations, .",
            "ntype": "ref",
            "meta": {
                "xid": "b16",
                "authors": [
                    "P Diederik",
                    "Jimmy Kingma",
                    " Ba"
                ],
                "title": "Adam: A method for stochastic optimization",
                "pub_date": "2015-05-07",
                "pub_title": "3rd International Conference on Learning Representations",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_120",
            "content": "Jason Lee, Elman Mansimov, Kyunghyun Cho, Deterministic non-autoregressive neural sequence modeling by iterative refinement, 2018, Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b17",
                "authors": [
                    "Jason Lee",
                    "Elman Mansimov",
                    "Kyunghyun Cho"
                ],
                "title": "Deterministic non-autoregressive neural sequence modeling by iterative refinement",
                "pub_date": "2018",
                "pub_title": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_121",
            "content": "Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao, William B Dolan, A diversity-promoting objective function for neural conversation models, 2016, Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, .",
            "ntype": "ref",
            "meta": {
                "xid": "b18",
                "authors": [
                    "Jiwei Li",
                    "Michel Galley",
                    "Chris Brockett",
                    "Jianfeng Gao",
                    "William B Dolan"
                ],
                "title": "A diversity-promoting objective function for neural conversation models",
                "pub_date": "2016",
                "pub_title": "Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_122",
            "content": "Yanran Li, Hui Su, Xiaoyu Shen, Wenjie Li, Ziqiang Cao, Shuzi Niu, DailyDialog: A manually labelled multi-turn dialogue dataset, 2017, Proceedings of the Eighth International Joint Conference on Natural Language Processing, .",
            "ntype": "ref",
            "meta": {
                "xid": "b19",
                "authors": [
                    "Yanran Li",
                    "Hui Su",
                    "Xiaoyu Shen",
                    "Wenjie Li",
                    "Ziqiang Cao",
                    "Shuzi Niu"
                ],
                "title": "DailyDialog: A manually labelled multi-turn dialogue dataset",
                "pub_date": "2017",
                "pub_title": "Proceedings of the Eighth International Joint Conference on Natural Language Processing",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_123",
            "content": "Zhuohan Li, Di He, Fei Tian, Tao Qin, Liwei Wang, Tie-Yan Liu, Hint-based training for non-autoregressive translation, 2019, NeuralIPS, .",
            "ntype": "ref",
            "meta": {
                "xid": "b20",
                "authors": [
                    "Zhuohan Li",
                    "Di He",
                    "Fei Tian",
                    "Tao Qin",
                    "Liwei Wang",
                    "Tie-Yan Liu"
                ],
                "title": "Hint-based training for non-autoregressive translation",
                "pub_date": "2019",
                "pub_title": "NeuralIPS",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_124",
            "content": "UNKNOWN, None, 2020, Task-level curriculum learning for non-autoregressive neural machine translation, AAAI.",
            "ntype": "ref",
            "meta": {
                "xid": "b21",
                "authors": null,
                "title": null,
                "pub_date": "2020",
                "pub_title": "Task-level curriculum learning for non-autoregressive neural machine translation",
                "pub": "AAAI"
            }
        },
        {
            "ix": "24-ARR_v2_125",
            "content": "Xuezhe Ma, Chunting Zhou, Xian Li, Graham Neubig, Eduard Hovy, FlowSeq: Nonautoregressive conditional sequence generation with generative flow, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), .",
            "ntype": "ref",
            "meta": {
                "xid": "b22",
                "authors": [
                    "Xuezhe Ma",
                    "Chunting Zhou",
                    "Xian Li",
                    "Graham Neubig",
                    "Eduard Hovy"
                ],
                "title": "FlowSeq: Nonautoregressive conditional sequence generation with generative flow",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_126",
            "content": "Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier, Michael Auli, fairseq: A fast, extensible toolkit for sequence modeling, 2019, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics (Demonstrations), Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b23",
                "authors": [
                    "Myle Ott",
                    "Sergey Edunov",
                    "Alexei Baevski",
                    "Angela Fan",
                    "Sam Gross",
                    "Nathan Ng",
                    "David Grangier",
                    "Michael Auli"
                ],
                "title": "fairseq: A fast, extensible toolkit for sequence modeling",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics (Demonstrations)",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_127",
            "content": "Kishore Papineni, Salim Roukos, Todd Ward, Wei-Jing Zhu, Bleu: a method for automatic evaluation of machine translation, 2002, Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b24",
                "authors": [
                    "Kishore Papineni",
                    "Salim Roukos",
                    "Todd Ward",
                    "Wei-Jing Zhu"
                ],
                "title": "Bleu: a method for automatic evaluation of machine translation",
                "pub_date": "2002",
                "pub_title": "Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_128",
            "content": "Kainan Peng, Wei Ping, Zhao Song, Kexin Zhao, Non-autoregressive neural text-to-speech, 2020-07, Proceedings of the 37th International Conference on Machine Learning, PMLR.",
            "ntype": "ref",
            "meta": {
                "xid": "b25",
                "authors": [
                    "Kainan Peng",
                    "Wei Ping",
                    "Zhao Song",
                    "Kexin Zhao"
                ],
                "title": "Non-autoregressive neural text-to-speech",
                "pub_date": "2020-07",
                "pub_title": "Proceedings of the 37th International Conference on Machine Learning",
                "pub": "PMLR"
            }
        },
        {
            "ix": "24-ARR_v2_129",
            "content": "Lihua Qian, Hao Zhou, Yu Bao, Mingxuan Wang, Lin Qiu, Weinan Zhang, Yong Yu, Lei Li, Glancing transformer for non-autoregressive neural machine translation, 2021, ACL, .",
            "ntype": "ref",
            "meta": {
                "xid": "b26",
                "authors": [
                    "Lihua Qian",
                    "Hao Zhou",
                    "Yu Bao",
                    "Mingxuan Wang",
                    "Lin Qiu",
                    "Weinan Zhang",
                    "Yong Yu",
                    "Lei Li"
                ],
                "title": "Glancing transformer for non-autoregressive neural machine translation",
                "pub_date": "2021",
                "pub_title": "ACL",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_130",
            "content": "UNKNOWN, None, 2021, The volctrans glat system: Nonautoregressive translation meets wmt21, .",
            "ntype": "ref",
            "meta": {
                "xid": "b27",
                "authors": null,
                "title": null,
                "pub_date": "2021",
                "pub_title": "The volctrans glat system: Nonautoregressive translation meets wmt21",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_131",
            "content": "UNKNOWN, None, 2018, Towards a better understanding of vector quantized autoencoders. arXiv, .",
            "ntype": "ref",
            "meta": {
                "xid": "b28",
                "authors": null,
                "title": null,
                "pub_date": "2018",
                "pub_title": "Towards a better understanding of vector quantized autoencoders. arXiv",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_132",
            "content": "Rico Sennrich, Barry Haddow, Alexandra Birch, Neural machine translation of rare words with subword units, 2016, Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, Long Papers.",
            "ntype": "ref",
            "meta": {
                "xid": "b29",
                "authors": [
                    "Rico Sennrich",
                    "Barry Haddow",
                    "Alexandra Birch"
                ],
                "title": "Neural machine translation of rare words with subword units",
                "pub_date": "2016",
                "pub_title": "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Long Papers"
            }
        },
        {
            "ix": "24-ARR_v2_133",
            "content": "UNKNOWN, None, 2019, Latent-variable nonautoregressive neural machine translation with deterministic inference using a delta posterior, .",
            "ntype": "ref",
            "meta": {
                "xid": "b30",
                "authors": null,
                "title": null,
                "pub_date": "2019",
                "pub_title": "Latent-variable nonautoregressive neural machine translation with deterministic inference using a delta posterior",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_134",
            "content": "Zhiqing Sun, Zhuohan Li, Haoqing Wang, Di He, Zi Lin, Zhi-Hong Deng, Fast structured decoding for sequence models, 2019-12-08, Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems, .",
            "ntype": "ref",
            "meta": {
                "xid": "b31",
                "authors": [
                    "Zhiqing Sun",
                    "Zhuohan Li",
                    "Haoqing Wang",
                    "Di He",
                    "Zi Lin",
                    "Zhi-Hong Deng"
                ],
                "title": "Fast structured decoding for sequence models",
                "pub_date": "2019-12-08",
                "pub_title": "Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_135",
            "content": "Zhiqing Sun, Yiming Yang, An em approach to non-autoregressive conditional sequence generation, 2020, International Conference on Machine Learning, PMLR.",
            "ntype": "ref",
            "meta": {
                "xid": "b32",
                "authors": [
                    "Zhiqing Sun",
                    "Yiming Yang"
                ],
                "title": "An em approach to non-autoregressive conditional sequence generation",
                "pub_date": "2020",
                "pub_title": "International Conference on Machine Learning",
                "pub": "PMLR"
            }
        },
        {
            "ix": "24-ARR_v2_136",
            "content": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan Gomez, Lukasz Kaiser, Illia Polosukhin, Attention is all you need, 2017-12-04, Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems, .",
            "ntype": "ref",
            "meta": {
                "xid": "b33",
                "authors": [
                    "Ashish Vaswani",
                    "Noam Shazeer",
                    "Niki Parmar",
                    "Jakob Uszkoreit",
                    "Llion Jones",
                    "Aidan Gomez",
                    "Lukasz Kaiser",
                    "Illia Polosukhin"
                ],
                "title": "Attention is all you need",
                "pub_date": "2017-12-04",
                "pub_title": "Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems",
                "pub": null
            }
        },
        {
            "ix": "24-ARR_v2_137",
            "content": "Bingzhen Wei, Mingxuan Wang, Hao Zhou, Junyang Lin, Xu Sun, Imitation learning for nonautoregressive neural machine translation, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "ref",
            "meta": {
                "xid": "b34",
                "authors": [
                    "Bingzhen Wei",
                    "Mingxuan Wang",
                    "Hao Zhou",
                    "Junyang Lin",
                    "Xu Sun"
                ],
                "title": "Imitation learning for nonautoregressive neural machine translation",
                "pub_date": "2019",
                "pub_title": "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics",
                "pub": "Association for Computational Linguistics"
            }
        },
        {
            "ix": "24-ARR_v2_138",
            "content": "Chunting Zhou, Jiatao Gu, Graham Neubig, Understanding knowledge distillation in nonautoregressive machine translation, 2020-04-26, 8th International Conference on Learning Representations, .",
            "ntype": "ref",
            "meta": {
                "xid": "b35",
                "authors": [
                    "Chunting Zhou",
                    "Jiatao Gu",
                    "Graham Neubig"
                ],
                "title": "Understanding knowledge distillation in nonautoregressive machine translation",
                "pub_date": "2020-04-26",
                "pub_title": "8th International Conference on Learning Representations",
                "pub": null
            }
        }
    ],
    "span_nodes": [
        {
            "ix": "24-ARR_v2_0@0",
            "content": "latent-GLAT: Glancing at Latent Variables for Parallel Text Generation",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_0",
            "start": 0,
            "end": 69,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_1@0",
            "content": "Abstract",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_1",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_2@0",
            "content": "Recently, parallel text generation has received widespread attention due to its success in generation efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_2",
            "start": 0,
            "end": 112,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_2@1",
            "content": "Although many advanced techniques are proposed to improve its generation quality, they still need the help of an autoregressive model for training to overcome the one-to-many multi-modal phenomenon in the dataset, limiting their applications.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_2",
            "start": 114,
            "end": 355,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_2@2",
            "content": "In this paper, we propose latent-GLAT, which employs the discrete latent variables to capture word categorical information and invoke an advanced curriculum learning technique, alleviating the multi-modality problem.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_2",
            "start": 357,
            "end": 572,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_2@3",
            "content": "Experiment results show that our method outperforms strong baselines without the help of an autoregressive model, which further broadens the application scenarios of the parallel decoding paradigm.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_2",
            "start": 574,
            "end": 770,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_2@4",
            "content": "\u2021",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_2",
            "start": 772,
            "end": 772,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_3@0",
            "content": "Introduction",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_3",
            "start": 0,
            "end": 11,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_4@0",
            "content": "Non-autoregressive Transformer (NAT, Gu et al., 2018) introduce a parallel decoding paradigm with higher decoding efficiency (> 10\u00d7) than autoregressive models (Bahdanau et al., 2015;Gehring et al., 2017;Vaswani et al., 2017).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_4",
            "start": 0,
            "end": 225,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_4@1",
            "content": "Unlike autoregressive models, NAT models impose conditional independence assumptions in words to support parallel decoding of sentences during inference.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_4",
            "start": 227,
            "end": 379,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_4@2",
            "content": "It attracts many researchers to explore NAT in machine translation (Gu et al., 2018;Lee et al., 2018;Kaiser et al., 2018) and text-to-speech tasks Peng et al., 2020).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_4",
            "start": 381,
            "end": 546,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_5@0",
            "content": "Amount of researchers devoted themselves to improve the NATs' inferior generation quality.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_5",
            "start": 0,
            "end": 89,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_5@1",
            "content": "Such as modeling word inter-dependencies by curriculum learning (Guo et al., 2020a;Liu et al., 2020) or iterative refinements mechanism (Ghazvininejad et al., 2019;Guo et al., 2020b), introducing latent variables to decompose target sentences and serve as the springboard for decoding (Shu et al., 2019;Ma et al., 2019;Bao et al., 2021), and introduce inductive bias for models' training (Wei et al., 2019;.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_5",
            "start": 91,
            "end": 497,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_5@2",
            "content": "The most successful method is the glancing transformer (GLAT, Qian et al., 2021a), which trains the NAT model by sampling partial target words as inputs to predict the remaining target words, explicitly building dependencies between the observed and unobserved words.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_5",
            "start": 499,
            "end": 765,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_5@3",
            "content": "Qian et al. (2021b) employ GLAT to achieve impressive results on the translation task of WMT21 1 , even outperforming many strong autoregressive translation systems in BLEU score (Papineni et al., 2002).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_5",
            "start": 767,
            "end": 969,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_6@0",
            "content": "Although existing NAT models achieve competitive results compared to autoregressive models in translation tasks, it is not negligible that they still need the help of an autoregressive Transformer (AT, Vaswani et al., 2017) as a teacher for training, i.e., sequence-level knowledge distillation (Kim and Rush, 2016).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_6",
            "start": 0,
            "end": 315,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_6@1",
            "content": "A well-recognized explanation is a multi-modality problem Sun and Yang, 2020): each input may have multiple valid outputs in datasets, which will prevent NAT models from learning to organize consistent outputs.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_6",
            "start": 317,
            "end": 526,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_6@2",
            "content": "Training with the outputs of an AT can directly bypass the multi-modal phenomenon in the dataset, effectively improving the models' performances.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_6",
            "start": 528,
            "end": 672,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_7@0",
            "content": "However, training NAT models by knowledge distillation are limited.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_7",
            "start": 0,
            "end": 66,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_7@1",
            "content": "First, it needs to train an extra AT model, which inevitably enlarges the training cost.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_7",
            "start": 68,
            "end": 155,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_7@2",
            "content": "Second, it is hard to promise that the teacher (or AT) model can be accurate enough in all text generation settings, which will become the bottleneck for its student NAT model.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_7",
            "start": 157,
            "end": 332,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_7@3",
            "content": "Therefore, training a model from scratch without the help of an AT model is still an open and interesting problem.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_7",
            "start": 334,
            "end": 447,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_8@0",
            "content": "In this paper, we propose latent-GLAT, which can directly learn from the raw dataset.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_8",
            "start": 0,
            "end": 84,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_8@1",
            "content": "It alleviates the multi-modality problem following a divide-andconquer spirit, introducing a small set of discrete latent variables to capture the target word categorical information and divide the origin goal into latent variables modeling and sentence reconstruction.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_8",
            "start": 86,
            "end": 354,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_8@2",
            "content": "First, the categorical information may have fewer multi-modality phenomena than the original words, thus can be learned directly without the help of knowledge distillation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_8",
            "start": 356,
            "end": 527,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_8@3",
            "content": "Second, the word categorical information is informativeness to the sentence reconstruction.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_8",
            "start": 529,
            "end": 619,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_8@4",
            "content": "We can extend glancing training with these discrete latent variables for modeling the sentence, encouraging the model to build dependencies on word categorical information rather than words, which works more robustly.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_8",
            "start": 621,
            "end": 837,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_9@0",
            "content": "Experiment results on WMT14, Quora, and Dai-lyDialog datasets show that latent-GLAT achieves remarkable improvements over several strong baselines, verifying the effectiveness of latent-GLAT.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_9",
            "start": 0,
            "end": 190,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_9@1",
            "content": "More impressively, latent-GLAT even outperforms autoregressive models in Quora and DailyDialog datasets, further validating our motivation for removing knowledge distillation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_9",
            "start": 192,
            "end": 366,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_9@2",
            "content": "In-depth analyses indicate that the introduced discrete latent variables are helpful to alleviate the multi-modality problem and are necessary for performance improvement.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_9",
            "start": 368,
            "end": 538,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_10@0",
            "content": "Background",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_10",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_11@0",
            "content": "For a sequence-to-sequence task of predicting sequence Y = (y 1 , y 2 , \u2022 \u2022 \u2022 , y m ) given its input sequence X = (x 1 , x 2 , \u2022 \u2022 \u2022 , x n ), the classical autoregressively factorization decomposes the p(Y |X) with a series of conditional probability:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_11",
            "start": 0,
            "end": 251,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_12@0",
            "content": "p AT (Y |X) = m t=1 p(y t |y <t , X),(1)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_12",
            "start": 0,
            "end": 39,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_13@0",
            "content": "where",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_13",
            "start": 0,
            "end": 4,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_14@0",
            "content": "y <t = (y 1 , y 2 , \u2022 \u2022 \u2022 , y t\u22121 ).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_14",
            "start": 0,
            "end": 35,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_15@0",
            "content": "Although such factorization achieved great success in previous studies (Bahdanau et al., 2015;Gehring et al., 2017;Vaswani et al., 2017), they predict each word 2 based on the prefix words, which may suffer from the issues of error accumulation and slow decoding during inference.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_15",
            "start": 0,
            "end": 279,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_16@0",
            "content": "Non-autoregressive Transformer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_16",
            "start": 0,
            "end": 30,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_16@1",
            "content": "To tackle the above problems, Gu et al. (2018) firstly propose non-autoregressive Transformer (NAT), introducing a non-autoregressive factorization as:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_16",
            "start": 32,
            "end": 182,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_17@0",
            "content": "p NAT (Y |X) = m t=1 p(y t |X),(2)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_17",
            "start": 0,
            "end": 33,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_18@0",
            "content": "where each word y t are modeled independently.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_18",
            "start": 0,
            "end": 45,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_19@0",
            "content": "During inference, the NAT model can decode the word simultaneously by arg max yt p(y t |X) for each y t , remarkably improving the efficiency (15\u00d7 speedups to an autoregressive Transformer).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_19",
            "start": 0,
            "end": 189,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_19@1",
            "content": "However, the independence assumption may prevent the NAT model from leveraging the inherent word dependencies to organize consistent outputs.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_19",
            "start": 191,
            "end": 331,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_19@2",
            "content": "Due to this,the efficiency improvements of NAT are at the cost of its quality, e.g., the performance degradation by more than 10.0 BLEU (Papineni et al., 2002) points in machine translation tasks (Gu et al., 2018).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_19",
            "start": 333,
            "end": 546,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_19@3",
            "content": "Besides, recent studies Sun and Yang, 2020) point out that the multimodality phenomenon in the dataset aggravates the challenge of NAT models.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_19",
            "start": 548,
            "end": 689,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_20@0",
            "content": "Glancing Transformer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_20",
            "start": 0,
            "end": 20,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_20@1",
            "content": "To mitigate the issue of missing word dependency in NAT models, Qian et al. (2021a) propose Glancing Transformer (GLAT), introducing glancing training (GLT) and sampling partial target tokens for training NAT:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_20",
            "start": 22,
            "end": 230,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_21@0",
            "content": "L GLAT = \u2212 log p(Y obs |Y obs , X) = \u2212 y i \u2208Y obs log p(y i |Y obs , X),(3)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_21",
            "start": 0,
            "end": 74,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_22@0",
            "content": "where Y obs is the partial target tokens, and Y obs is its complements set.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_22",
            "start": 0,
            "end": 74,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_22@1",
            "content": "It progressively decreases the sampling ratio and obtains better performances in machine translation tasks.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_22",
            "start": 76,
            "end": 182,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_22@2",
            "content": "Nevertheless, we find that GLAT in experiments still has a multi-modality problem 3 : First, its sampling rate cannot be decreased to zero during training, which exists the issue of exposure bias.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_22",
            "start": 184,
            "end": 379,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_22@3",
            "content": "Second, it still heavily relies on a teacher model for further improvements (Qian et al., 2021a).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_22",
            "start": 381,
            "end": 477,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_23@0",
            "content": "Latent Transformer.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_23",
            "start": 0,
            "end": 18,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_23@1",
            "content": "To alleviate the multimodality problem, Kaiser et al. (2018); Shu et al. (2019); Ma et al. (2019); Bao et al. (2021) propose Latent Transformer (LT), introducing latent variables z for NAT predictions as:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_23",
            "start": 20,
            "end": 223,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_24@0",
            "content": "p LT (Y |X) = z p(z|X) \u2022 p(Y |z, X). (4)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_24",
            "start": 0,
            "end": 39,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_25@0",
            "content": "where p LT (Y |X) is always trained by variational inference (Ma et al., 2019) or discretization techniques (Kaiser et al., 2018).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_25",
            "start": 0,
            "end": 129,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_25@1",
            "content": "Such latent variables are decomposed from the target sentence, which is informative to determine the mode of the sentence and alleviates the multi-modality problems.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_25",
            "start": 131,
            "end": 295,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_26@0",
            "content": "Although Latent Transformer models improve performance in terms of BLEU score, their used autoregressive predictor (Kaiser et al., 2018;Bao et al., 2021) or deep iterative transformation (Shu et al., 2019;Ma et al., 2019) for predicting latent variables unavoidable sacrifice the overall decoding efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_26",
            "start": 0,
            "end": 307,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_26@1",
            "content": "Besides, they do not explicitly build the interdependencies among the outputs.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_26",
            "start": 309,
            "end": 386,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_27@0",
            "content": "3 Proposed Method: latent-GLAT",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_27",
            "start": 0,
            "end": 29,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_28@0",
            "content": "In this section, we present latent-GLAT.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_28",
            "start": 0,
            "end": 39,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_28@1",
            "content": "latent-GLAT follows Latent Transformer models (Kaiser et al., 2018;Bao et al., 2021) but introduces glancing training (Qian et al., 2021a) with the discrete latent variables.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_28",
            "start": 41,
            "end": 214,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_28@2",
            "content": "Our intuitions are as follows:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_28",
            "start": 216,
            "end": 245,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_29@0",
            "content": "First, compared to the words, the introduced discrete latent variables may have fewer modes than words and be informative to determine the modes of the sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_29",
            "start": 0,
            "end": 161,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_29@1",
            "content": "In such a case, we can directly learn the discrete latent variables by the Glancing Transformer (Qian et al., 2021a), keeping competitive inference efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_29",
            "start": 163,
            "end": 321,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_29@2",
            "content": "More importantly, we can employ the latent variables to invoke glancing training for modeling the target sentences, which is informative enough to reduce the multi-modality problem of original sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_29",
            "start": 323,
            "end": 525,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_29@3",
            "content": "Besides, glancing at latent variables also works robustly due we can obtain the latent variables during inference.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_29",
            "start": 527,
            "end": 640,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_30@0",
            "content": "Introducing Discrete Latent Variables for Modeling Target Categorical Information",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_30",
            "start": 0,
            "end": 80,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_31@0",
            "content": "In this part, we state the structure of latent-GLAT, which introduces a small set of discrete latent variables for a NAT model, basically following Kaiser et al. (2018); ; Bao et al. (2021).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_31",
            "start": 0,
            "end": 189,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_32@0",
            "content": "Let K be the size of the discrete latent space and let",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_32",
            "start": 0,
            "end": 53,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_33@0",
            "content": "[K] denote the set {1, 2, \u2022 \u2022 \u2022 , K}. For each target sentence Y = (y 1 , y 2 , \u2022 \u2022 \u2022 , y m )",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_33",
            "start": 0,
            "end": 92,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_34@0",
            "content": ", we use a same-length latent variable sequence for modeling it as: Discretization.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_34",
            "start": 0,
            "end": 82,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_34@1",
            "content": "For discretizing target sentences to latent variables, we use vector quantization , which works by dividing a large set of origin vector representations into small groups.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_34",
            "start": 84,
            "end": 254,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_34@2",
            "content": "We assign each token y i with a group j \u2208 [K] that has the nearest distance to its representation:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_34",
            "start": 256,
            "end": 353,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_35@0",
            "content": "p(Y |X) = z p \u03b8 (z|X) \u2022 m t=1 p \u03b8 (y t |z, X), (5) where z = (z 1 , z 2 , \u2022 \u2022 \u2022 , z m ) and z i \u2208 [K], \u03b8 is the model parameters.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_35",
            "start": 0,
            "end": 128,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_36@0",
            "content": "z i = arg min j\u2208[K] || repr(y i ) \u2212 q j || 2 ,(6)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_36",
            "start": 0,
            "end": 48,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_37@0",
            "content": "where q \u2208 R K\u00d7d model is the maintained representations and d model is its dimension.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_37",
            "start": 0,
            "end": 84,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_37@1",
            "content": "We use the embedding as repr(y i ), refer to Bao et al. (2021).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_37",
            "start": 86,
            "end": 148,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_38@0",
            "content": "Finally, the model is trained to minimize",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_38",
            "start": 0,
            "end": 40,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_39@0",
            "content": "L LT = L LP + L WP ,(7)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_39",
            "start": 0,
            "end": 22,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_40@0",
            "content": "where L WP and L LP are the prediction loss for words Y and latent variables z, respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_40",
            "start": 0,
            "end": 92,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_40@1",
            "content": "The maintained representations q are updated with an exponential moving average over a minibatch of target tokens",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_40",
            "start": 94,
            "end": 206,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_41@0",
            "content": "{y 1 , \u2022 \u2022 \u2022 , y i , \u2022 \u2022 \u2022 }: c j \u2190 \u03bbc j + (1 \u2212 \u03bb) i 1[z i = j], q j \u2190 \u03bbq j + (1 \u2212 \u03bb) i 1[z i = j] repr(y i ) c j (8)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_41",
            "start": 0,
            "end": 116,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_42@0",
            "content": "where c j is assigned count for group j, and we set decay parameter \u03bb = 0.999 in our experiments.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_42",
            "start": 0,
            "end": 96,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_43@0",
            "content": "Architecture.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_43",
            "start": 0,
            "end": 12,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_43@1",
            "content": "As shown in Figure 1, latent-GLAT mainly consists of an encoder F ENC (NAT Encoder), a latent predictor F LP (NAT Predictor), and a decoder F DEC (Mix. Decoder).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_43",
            "start": 14,
            "end": 174,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_43@2",
            "content": "We parameterize them with the multi-head attention-based encoder or decoder, similar to Transformer (Vaswani et al., 2017).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_43",
            "start": 176,
            "end": 298,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_43@3",
            "content": "Their functions can be formalized as:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_43",
            "start": 300,
            "end": 336,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_44@0",
            "content": "(e 1 , e 2 , \u2022 \u2022 \u2022 , e n ) \u2190 F ENC (x 1 , x 2 , \u2022 \u2022 \u2022 , x n ), (h 1 , h 2 , \u2022 \u2022 \u2022 , h m ) \u2190 softcopy(e 1:n ), p \u03b8 (z|X) \u2190 F LP (h 1:m , e 1:n ), p \u03b8 (Y |z, X) \u2190 F DEC (z 1:m , h 1:m , e 1:n ),",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_44",
            "start": 0,
            "end": 191,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_45@0",
            "content": "where we use an extra module F LEN to predict the target length m and initialize the decoder inputs",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_45",
            "start": 0,
            "end": 98,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_46@0",
            "content": "H = (h 1 , h 2 , \u2022 \u2022 \u2022 , h m )",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_46",
            "start": 0,
            "end": 29,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_47@0",
            "content": "with the softcopy (Wei et al., 2019) mechanism.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_47",
            "start": 0,
            "end": 46,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_48@0",
            "content": "Glancing at Discrete Latent Variables for Parallel Sequence Decoding",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_48",
            "start": 0,
            "end": 67,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_49@0",
            "content": "The small number (K < 128) of discrete latent variables can capture high-level categorical information of the target words, supporting better learning design for parallel sequence decoding.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_49",
            "start": 0,
            "end": 188,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_50@0",
            "content": "Our first insight is that we can learn to nonautoregressively predict the discretized latent variables directly without the help of distillation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_50",
            "start": 0,
            "end": 144,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_50@1",
            "content": "Specifically, we parameterize the F LP in a nonautoregressive fashion and use a glancing training technique (GLT, Qian et al., 2021a) for optimizing it, as shown in Figure 2a:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_50",
            "start": 146,
            "end": 320,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_51@0",
            "content": "L GLT LP = \u2212 log p \u03b8 (z obs |z obs , X)(9)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_51",
            "start": 0,
            "end": 41,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_52@0",
            "content": "where z obs is uniformly sampled from z, refer to Qian et al. (2021a).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_52",
            "start": 0,
            "end": 69,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_52@1",
            "content": "We provide more training details of latent-GLAT in Appendix B. Our next insight is modeling the sentence based on the sampled latent variables z obs rather than z, namely, glancing at z obs for optimizing F DEC :",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_52",
            "start": 71,
            "end": 282,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_53@0",
            "content": "L WP = \u2212 log p \u03b8 (Y |z obs , X).(10)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_53",
            "start": 0,
            "end": 35,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_54@0",
            "content": "We find Eqn. (10) works robustly in experiments and analyze it in Section ( \u00a7 4.3).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_54",
            "start": 0,
            "end": 82,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_55@0",
            "content": "As shown in Figure 2b, we eventually employ words to invoke glancing training for minimizing L WP , namely we optimize the F DEC by minimizing",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_55",
            "start": 0,
            "end": 141,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_56@0",
            "content": "L GLT WP = \u2212 log p \u03b8 (Y obs |z obs , Y obs , X),(11)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_56",
            "start": 0,
            "end": 51,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_57@0",
            "content": "where Y obs and z obs are the sampled target tokens and discrete latent variables.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_57",
            "start": 0,
            "end": 81,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_58@0",
            "content": "Overall Training Loss.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_58",
            "start": 0,
            "end": 21,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_58@1",
            "content": "Our full-fledged loss includes latent variable prediction, sentence reconstruction, and length prediction losses:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_58",
            "start": 23,
            "end": 135,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_59@0",
            "content": "L = L GLT WP + L GLT LP + \u03b1L LEN ,(12)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_59",
            "start": 0,
            "end": 37,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_60@0",
            "content": "where \u03b1 = 0.1 are the hyperparameters to adjust the importance of length prediction loss L LEN .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_60",
            "start": 0,
            "end": 95,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_61@0",
            "content": "Inference",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_61",
            "start": 0,
            "end": 8,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_62@0",
            "content": "In inference phase, latent-GLAT predicts the target length, latent variables, and sentence in turn.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_62",
            "start": 0,
            "end": 98,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_63@0",
            "content": "For the target length, latent-GLAT first predicts the target length m with the length predictor F LEN .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_63",
            "start": 0,
            "end": 102,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_63@1",
            "content": "To avoid the length prediction errors during inference, latent-GLAT expands the length m to a ranges (we use",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_63",
            "start": 104,
            "end": 211,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_64@0",
            "content": "[m \u2212 3, \u2022 \u2022 \u2022 , m + 2], total six can- didates in our experiments).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_64",
            "start": 0,
            "end": 66,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_65@0",
            "content": "Then, latent-GLAT predicts the latent variables \u1e91 with arg max z p \u03b8 (z|X) and sentence \u0176 with arg max Y p \u03b8 (Y | \u1e91, X) for each candidate.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_65",
            "start": 0,
            "end": 138,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_66@0",
            "content": "Similar to Ma et al. (2019), latent-GLAT also ranks the candidates by itself (self-reranking) and chooses the highest score output with:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_66",
            "start": 0,
            "end": 135,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_67@0",
            "content": "\u0176 = arg max Y p \u03b8 (Y | \u1e91, X) \u2022 \u03b3 |Y | (13",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_67",
            "start": 0,
            "end": 40,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_68@0",
            "content": ")",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_68",
            "start": 0,
            "end": 0,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_69@0",
            "content": "where \u03b3 is the length penalty ratio to avoid the length bias, and |Y | denotes the length of Y .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_69",
            "start": 0,
            "end": 95,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_70@0",
            "content": "Experiments",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_70",
            "start": 0,
            "end": 10,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_71@0",
            "content": "We conduct experiments on several generation tasks, including machine translation, paraphrase generation, and dialog generation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_71",
            "start": 0,
            "end": 127,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_72@0",
            "content": "Experimental Setup",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_72",
            "start": 0,
            "end": 17,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_73@0",
            "content": "Dataset.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_73",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_73@1",
            "content": "We chose the most popular benchmarks for each task:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_73",
            "start": 9,
            "end": 59,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_74@0",
            "content": "\u2022 Machine Translation (MT): We follow previous practices in NAT models and use the WMT14 English (EN) \u2194 German (DE) corpus (4.5M sentence pairs) and the IWSLT14 German (DE) \u2192 English (EN) corpus (160K sentence pairs) to validate our proposed model. We obtain the datasets following the instruction open-sourced in fairseq 4 . In detail, we first tokenize the datasets with Moses script. Then, we use 37,000 and 10,000 operations to split the words into byte-pair encodings (BPE, Sennrich et al., 2016) in WMT14 and IWSLT14 datasets, respectively. We also share subword embeddings between the source and target language for each dataset. \u2022 Paraphrase Generation (PG): We use the Quora 5 dataset to evaluate the paraphrase generation task. The Quora dataset contains around 135K labeled paraphrases pairs. Following the standard dataset split, we sample 100K sentence pairs from the labeled paraphrases as training data and hold out 30K pairs for testing, the remaining about 5K pairs for validation. Like the MT tasks, we tokenize the corpus with Moses scripts and split the words into BPE units with total 32K operations. \u2022 Dialog Generation (DG): We conduct the dialog generation experiments on the DailyDialog dataset (Li et al., 2017). We obtain the processed DailyDialog dataset from Bao et al.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_74",
            "start": 0,
            "end": 1297,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_75@0",
            "content": "(2020) 6 .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_75",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_75@1",
            "content": "The training set contains 87,170 sentence pairs (11,118 dialogues).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_75",
            "start": 11,
            "end": 77,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_75@2",
            "content": "The validation and testing set in the dataset contain 8069 pairs (1000 dialogues) and 7740 pairs (1000 dialogues), respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_75",
            "start": 79,
            "end": 206,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_75@3",
            "content": "Note that these tasks emphasize different aspects.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_75",
            "start": 208,
            "end": 257,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_75@4",
            "content": "The task of MT aims to transfer bilingual sentences with semantically invariant conditions.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_75",
            "start": 259,
            "end": 349,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_75@5",
            "content": "The PG task differs from machine translation and works on mode transformation in the same language, whose goal is to synthesize a sentence different from the original input but conveys the same meaning.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_75",
            "start": 351,
            "end": 552,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_75@6",
            "content": "The DG task is most challenging due to the complex generation goal.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_75",
            "start": 554,
            "end": 620,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_76@0",
            "content": "Implementations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_76",
            "start": 0,
            "end": 15,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_76@1",
            "content": "We compare latent-GLAT with Transformer (Vaswani et al., 2017), NAT (Gu et al., 2018), and GLAT (Qian et al., 2021a) models.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_76",
            "start": 17,
            "end": 140,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_76@2",
            "content": "We implement them based on the open-source framework fairseq (Ott et al., 2019).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_76",
            "start": 142,
            "end": 221,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_77@0",
            "content": "For machine translation tasks, we use the base setting (d model = 512, d hidden = 2048, dropout = 0.1, n head = 8, and n layer = 6) of Transformer (Vaswani et al., 2017) for WMT14 dataset and a smaller setting (d model = 512, d hidden = 1024, dropout = 0.3, n head = 4, and n layer = 6) for IWSLT14 dataset.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_77",
            "start": 0,
            "end": 306,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_77@1",
            "content": "The number of layers in latent-GLAT decoder and latent predictor are both set to 4 in experiments.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_77",
            "start": 308,
            "end": 405,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_77@2",
            "content": "We use inverse square root learning rate scheduling for WMT14 and a linear annealing learning rate from 3.0 \u00d7 10 \u22124 to 1.0\u00d710 \u22125 in 250K steps for IWSLT14.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_77",
            "start": 407,
            "end": 561,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_77@3",
            "content": "The models are optimized with Adam (Kingma and Ba, 2015) optimizer (\u03b2 1 = 0.9, \u03b2 2 = 0.999) in 300K steps for WMT14 and 250K steps for IWSLT14.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_77",
            "start": 563,
            "end": 705,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_77@4",
            "content": "As for the ratio \u03c4 that used in glancing sampling, we linear anneal the ratio from 0.5 to 0.3 in whole training steps.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_77",
            "start": 707,
            "end": 824,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_77@5",
            "content": "The mini-batch in each step consists of 2K tokens for IWSLT14 and 64K tokens for WMT14.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_77",
            "start": 826,
            "end": 912,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_78@0",
            "content": "Since the scale of the Quora and DailyDialog datasets are close to the IWSLT14, we keep the same setting to the IWSLT14, such as the Adam, learning rate (linear annealing from 3.0 \u00d7 10 \u22124 to 1.0 \u00d7 10 \u22125 ), and batch size (2K tokens).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_78",
            "start": 0,
            "end": 232,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_79@0",
            "content": "Evaluation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_79",
            "start": 0,
            "end": 10,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_79@1",
            "content": "To validate the effectiveness of our proposed method, we evaluate it in terms of quality and efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_79",
            "start": 12,
            "end": 115,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_79@2",
            "content": "We use tokenized and cased BLEU scores (Papineni et al., 2002) 7 to evaluate the generation quality of MT and PG tasks.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_79",
            "start": 117,
            "end": 235,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_79@3",
            "content": "For dialog generation, we also include BLEU-1 and BLEU-2 scores for analysis.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_79",
            "start": 237,
            "end": 313,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_79@4",
            "content": "Following the common practices (Gu et al., 2018;Qian et al., 2021a), we measure the decoding latency of each model by decoding sentence by sentence and compute the speedup compared with the autoregressive Transformer (AT) model to reflect its decoding efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_79",
            "start": 315,
            "end": 577,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_79@5",
            "content": "We highlight the best NAT result.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_79",
            "start": 579,
            "end": 611,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_80@0",
            "content": "Main Results",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_80",
            "start": 0,
            "end": 11,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_81@0",
            "content": "We can see from results in this unusual phenomenon.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_81",
            "start": 0,
            "end": 50,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_81@1",
            "content": "Specifically, the weak connection may encourage the AT model to predict the tokens by paying more attention to their history outputs, which degenerate to a targetside language model.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_81",
            "start": 52,
            "end": 233,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_81@2",
            "content": "In contrast, the NAT models do not have this fast track, pushing them to pay more attention to the inputs and recall more target tokens.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_81",
            "start": 235,
            "end": 370,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_81@3",
            "content": "We further find that there are so-called safe response (Li et al., 2016) in AT's outputs, which verify our conjecture.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_81",
            "start": 372,
            "end": 489,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_82@0",
            "content": "More Comparisons.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_82",
            "start": 0,
            "end": 16,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_82@1",
            "content": "we further compare the advanced NAT models that builds upon latent variables or iterative refinement in machine translation tasks:",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_82",
            "start": 18,
            "end": 147,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_83@0",
            "content": "\u2022 NATs w/ latent variables: LV-NAR (Shu et al., 2019), SynST (Akoury et al., 2019), Flowseq (Ma et al., 2019), and CNAT (Bao et al., 2021). \u2022 Iterative NATs: CMLM (Ghazvininejad et al., 2019) and LevT (Gu et al., 2019). Table 2 shows that introducing latent variables Figure 3: BLEU scores and their relative decoding speedups of different models on WMT14 EN\u2192DE test set. Note that we evaluate the speedups with a single GTX 1080-Ti GPU and include the results with the same evaluating hardware for fair comparisons.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_83",
            "start": 0,
            "end": 515,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_84@0",
            "content": "(LV-NAR, Flowseq, and CNAT) or decoding with multiple iterations (CMLM and LevT) both improve non-autoregressive decoding in translation quality.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_84",
            "start": 0,
            "end": 144,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_84@1",
            "content": "However, iterative refinements or deep transformations always sacrifice decoding efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_84",
            "start": 146,
            "end": 237,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_84@2",
            "content": "In contrast, the proposed latent-GLAT outperforms all NAT models with a relatively low cost, keeping a competitive speedup over autoregressive Transformer (AT).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_84",
            "start": 239,
            "end": 398,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_84@3",
            "content": "Specifically, latent-GLAT with one-pass decoding narrows the performance gap to the AT from 5.87 BLEU points to 2.34 BLEU points on the WMT14 EN\u2192DE test set.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_84",
            "start": 400,
            "end": 556,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_85@0",
            "content": "Decoding efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_85",
            "start": 0,
            "end": 19,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_85@1",
            "content": "We can see there is a tradeoff between the translation quality and decoding efficiency in Table 2.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_85",
            "start": 21,
            "end": 118,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_85@2",
            "content": "We thus present the scatter plot of different models in Figure 3, showing the trend of translation quality and decoding efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_85",
            "start": 120,
            "end": 250,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_86@0",
            "content": "As seen, latent-GLAT is located on the top-right of the baselines.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_86",
            "start": 0,
            "end": 65,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_86@1",
            "content": "It outperforms the baselines in the BLEU score if decoding speedup is fixed and in decoding speedup if the BLEU score is fixed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_86",
            "start": 67,
            "end": 193,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_87@0",
            "content": "Analysis",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_87",
            "start": 0,
            "end": 7,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_88@0",
            "content": "We now turn to verify our intuition that latent-GLAT can alleviate the multi-modality problem.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_88",
            "start": 0,
            "end": 93,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_88@1",
            "content": "latent-GLAT largely alleviates the sentencelevel multi-modal problem.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_88",
            "start": 95,
            "end": 163,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_88@2",
            "content": "Previous researches (Gu et al., 2018;Ma et al., 2019;Qian et al., 2021a;Bao et al., 2021) always utilize a Transformer model as a teacher for training NAT models, namely sequence-level knowledge distillation (Kim and Rush, 2016) directly reduces the sentence-level multi-modal phenomenon in datasets.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_88",
            "start": 165,
            "end": 464,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_88@3",
            "content": "Therefore, we use the average gains from the knowledge distillation to reflect the ability of the NAT models to overcome this issue.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_88",
            "start": 466,
            "end": 597,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_89@0",
            "content": "As seen in Table 3, the pure NAT models heavily rely on knowledge distillation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_89",
            "start": 0,
            "end": 78,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_89@1",
            "content": "By introducing the target information with the latent variables (Flowseq and CNAT) or sampled tokens (GLAT), the NAT models improve its' ability to overcome the multi-modality issue.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_89",
            "start": 80,
            "end": 261,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_89@2",
            "content": "Our proposed latent-GLAT well combines the above two techniques.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_89",
            "start": 263,
            "end": 326,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_89@3",
            "content": "It obtains only 0.95 BLEU points average gains and validates our motivation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_89",
            "start": 328,
            "end": 403,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_90@0",
            "content": "Discrete latent variables have fewer modes than raw sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_90",
            "start": 0,
            "end": 61,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_90@1",
            "content": "To validate our intuition that the introduced latent variables are easier to predict than tokens, we refer to to compute the complexity metrics on each dataset according to alignment relations.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_90",
            "start": 63,
            "end": 255,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_90@2",
            "content": "Specifically, we use the fast_align 8 toolkit to align source input X and target outputs Y or discretized latent variable sequences z.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_90",
            "start": 257,
            "end": 390,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_90@3",
            "content": "Then, we compute the token-level complexity C TOK (d) and the sentence-level complexity C SEN (d) according to .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_90",
            "start": 392,
            "end": 503,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_90@4",
            "content": "These metrics can trivially understand as the number of valid candidates for each input.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_90",
            "start": 505,
            "end": 592,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_91@0",
            "content": "As shown in Table 4, the latent variables have the lowest complexity in both token-level complexity and sentence-level complexity.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_91",
            "start": 0,
            "end": 129,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_91@1",
            "content": "In other words, predicting the latent variable sequences is effortless than predicting others, which is consistent with our intuition.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_91",
            "start": 131,
            "end": 264,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_91@2",
            "content": "Although we obtain a lower complexity dataset by filtering the datasets with an autoregressive model (AT outputs versus Raw outputs), they may introduce model error and need extra training for AT model.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_91",
            "start": 266,
            "end": 467,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_91@3",
            "content": "In contrast, the discrete latent variables are simple and informative enough to serve as a springboard for modeling target sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_91",
            "start": 469,
            "end": 601,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_92@0",
            "content": "Glancing with latent variables improves the performance with a large margin.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_92",
            "start": 0,
            "end": 75,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_92@1",
            "content": "We can see in Table 5 that introducing latent variables both obtain performance gains to their counterpart (L#2 vs. L#1, +0.83 points, and L#4 vs. L#3, +1.69 points).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_92",
            "start": 77,
            "end": 242,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_92@2",
            "content": "As expected, the gains are largely improved while adopting the glancing training with discrete latent variables (L#5 vs. L#1, +9.75 points), which already outperforms glancing training with the reference token (L#5 vs. L#4, +3.55 points).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_92",
            "start": 244,
            "end": 481,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_92@3",
            "content": "Finally, we jointly perform glancing training with the reference tokens and discrete latent variables, achieving the best result (L#6 vs. L#1, +11.04 points).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_92",
            "start": 483,
            "end": 640,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_92@4",
            "content": "Figure 4: BLEU scores of latent-GLAT using different length penalty ratios on the WMT14 EN\u2192DE valid set.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_92",
            "start": 642,
            "end": 745,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_92@5",
            "content": "We search the length penalty ratio \u03b3 for latent-GLAT while fixing the K = 64.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_92",
            "start": 747,
            "end": 823,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_93@0",
            "content": "Effects of K and \u03b3.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_93",
            "start": 0,
            "end": 18,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_93@1",
            "content": "As shown in Figure 4 and Table 6, we search the hyper-parameter of latent-GLAT that the number of discrete latent variables and the length penalty ratio \u03b3 according to the validation performance.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_93",
            "start": 20,
            "end": 214,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_93@2",
            "content": "We notice that using more latent codes causes performance degradation during inference, in which the latent variables may degenerate to tokens and contains more prediction error during inference.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_93",
            "start": 216,
            "end": 410,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_93@3",
            "content": "The latent-GLAT implemented with 64 latent variables and \u03b3 = 1.1 obtains the best result on WMT14 EN\u2192DE valid set.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_93",
            "start": 412,
            "end": 525,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_94@0",
            "content": "5 Related Work Gu et al. (2018) first propose a non-autoregressive Transformer (NAT) model for neural machine translation (NMT) and begin to explore parallel decoding.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_94",
            "start": 0,
            "end": 166,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_94@1",
            "content": "It abandons explicitly modeling word interdependencies to decode the tokens in parallel, significantly improving the inference speed.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_94",
            "start": 168,
            "end": 300,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_94@2",
            "content": "However, its translation quality is inferior to the Transformer (Vaswani et al., 2017).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_94",
            "start": 302,
            "end": 388,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_95@0",
            "content": "To alleviate this performance degradation, many researchers work to enhance word dependency modeling, including imitation learning (Wei et al., 2019;, curriculum learning (Guo et al., 2020a;Liu et al., 2020), iterative refinements (Lee et al., 2018;Ghazvininejad et al., 2019;Gu et al., 2019;Guo et al., 2020b;Huang et al., 2022), and a simplified autoregressive process .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_95",
            "start": 0,
            "end": 371,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_95@1",
            "content": "The most representative method is the glancing transformer model (Qian et al., 2021a), which adaptively and progressively samples partial tokens as inputs and predicts the remaining tokens, effectively establishing the dependencies between the sampled tokens and the remaining tokens.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_95",
            "start": 373,
            "end": 656,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_95@2",
            "content": "However, these models still rely on a teacher for training, which cannot directly learn the raw dataset that contains one-to-many multi-modality phenomenon.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_95",
            "start": 658,
            "end": 813,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_96@0",
            "content": "Introducing latent variables (Bao et al., 2019(Bao et al., , 2021 to organize the target sentence is also a helpful route.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_96",
            "start": 0,
            "end": 121,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_96@1",
            "content": "Among them, our method is close to Kaiser et al. (2018); Shu et al. (2019); Ma et al. (2019); Akoury et al. (2019); Bao et al. (2021).",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_96",
            "start": 123,
            "end": 256,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_96@2",
            "content": "These methods decompose the latent variables (hints) from the target sentence and divide the origin goal into two parts: modeling latent variables and modeling the target sentences based on latent variables.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_96",
            "start": 258,
            "end": 464,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_96@3",
            "content": "It implicitly overcomes the multimodality phenomenon of target sentences because the latent variables can largely determine the mode of the sentence.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_96",
            "start": 466,
            "end": 614,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_96@4",
            "content": "However, these methods always model the latent variables with an autoregressive predictor, which naturally sacrifices the decoding efficiency.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_96",
            "start": 616,
            "end": 757,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_97@0",
            "content": "Unlike them, our approach models the discrete latent variables in a non-autoregressive fashion and extends glancing training with the discrete latent variables.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_97",
            "start": 0,
            "end": 159,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_97@1",
            "content": "As a result, latent-GLAT accomplishes a competitive performance both in decoding efficiency and quality.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_97",
            "start": 161,
            "end": 264,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_98@0",
            "content": "Conclusion",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_98",
            "start": 0,
            "end": 9,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_99@0",
            "content": "We propose latent-GLAT, which can be directly trained without the help of knowledge distillation.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_99",
            "start": 0,
            "end": 96,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_99@1",
            "content": "Specifically, we employ discrete latent variables to capture the word categorical information and divide the original goal into the latent variables modeling and word prediction tasks.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_99",
            "start": 98,
            "end": 281,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_99@2",
            "content": "Then, we learn each task with the glancing training and encourage the model to build dependencies on the latent variables, which have fewer modes than the words and are also informative for modeling the target sentences.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_99",
            "start": 283,
            "end": 502,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_99@3",
            "content": "Experiments results on machine translation, paraphrase generation, and dialogue generation tasks validate the effectiveness of our latent-GLAT.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_99",
            "start": 504,
            "end": 646,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_100@0",
            "content": "According to the performance shown in Figure 5a, we can see a GLAT model will degenerate to a NAT model while using a small sampling ratio.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_100",
            "start": 0,
            "end": 138,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_100@1",
            "content": "In such a case, introducing an autoregressive Transformer as a teacher for training the GLAT model alleviates this issue (Figure 5b), indicating that the GLAT model still needs the help of knowledge distillation for alleviating multi-modality problems.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_100",
            "start": 140,
            "end": 391,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_100@2",
            "content": "B Model Details of latent-GLAT Decoder Inputs.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_100",
            "start": 393,
            "end": 438,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_100@3",
            "content": "Following the most common in NAT models (Wei et al., 2019;, we use Softcopy mechanism for initializing the decoder inputs H = (h 1 , h 2 , \u2022 \u2022 \u2022 , h m ):",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_100",
            "start": 440,
            "end": 592,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_101@0",
            "content": "h i = n i \u03b1 ij \u2022 e i , \u03b1 ij \u221d exp [\u2212(i \u2212 j \u2022 n m ) 2 ],(14)",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_101",
            "start": 0,
            "end": 58,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_102@0",
            "content": "where E = (e 1 , e 2 , \u2022 \u2022 \u2022 , e n ) is the encoded representation of X = (x 1 , x 2 , \u2022 \u2022 \u2022 , x n ), n and m are the length of source and target sentences, respectively.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_102",
            "start": 0,
            "end": 169,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_103@0",
            "content": "Nader Akoury, Kalpesh Krishna, Mohit Iyyer, Syntactically supervised transformers for faster neural machine translation, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_103",
            "start": 0,
            "end": 257,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_104@0",
            "content": "Dzmitry Bahdanau, Kyunghyun Cho, Yoshua Bengio, Neural machine translation by jointly learning to align and translate, 2015-05-07, 3rd International Conference on Learning Representations, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_104",
            "start": 0,
            "end": 189,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_105@0",
            "content": "Siqi Bao, Huang He, Fan Wang, Hua Wu, Haifeng Wang, PLATO: Pre-trained dialogue generation model with discrete latent variable, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, Online. Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_105",
            "start": 0,
            "end": 272,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_106@0",
            "content": "Yu Bao, Shujian Huang, Tong Xiao, Dongqi Wang, Xinyu Dai, Jiajun Chen, Nonautoregressive translation by learning target categorical codes, 2021, Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Online. Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_106",
            "start": 0,
            "end": 338,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_107@0",
            "content": "UNKNOWN, None, 2019, Non-autoregressive transformer by position learning, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_107",
            "start": 0,
            "end": 74,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_108@0",
            "content": "UNKNOWN, None, 2019, Listen and fill in the missing letters: Non-autoregressive transformer for speech recognition, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_108",
            "start": 0,
            "end": 116,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_109@0",
            "content": "Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, Yann Dauphin, Convolutional sequence to sequence learning, 2017-08-11, Proceedings of the 34th International Conference on Machine Learning, PMLR.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_109",
            "start": 0,
            "end": 204,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_110@0",
            "content": "Marjan Ghazvininejad, Omer Levy, Yinhan Liu, Luke Zettlemoyer, Mask-predict: Parallel decoding of conditional masked language models, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_110",
            "start": 0,
            "end": 317,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_111@0",
            "content": "Jiatao Gu, James Bradbury, Caiming Xiong, O Victor, Richard Li,  Socher, Nonautoregressive neural machine translation, 2018-04-30, 6th International Conference on Learning Representations, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_111",
            "start": 0,
            "end": 189,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_112@0",
            "content": "Jiatao Gu, Changhan Wang, Junbo Zhao, Levenshtein transformer, 2019-12-08, Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems, Vancouver.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_112",
            "start": 0,
            "end": 198,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_113@0",
            "content": "Junliang Guo, Xu Tan, Linli Xu, Tao Qin, Enhong Chen, Tie-Yan Liu, Fine-tuning by curriculum learning for non-autoregressive neural machine translation, 2020, Proceedings of the AAAI Conference on Artificial Intelligence, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_113",
            "start": 0,
            "end": 222,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_114@0",
            "content": "Junliang Guo, Linli Xu, Enhong Chen, Jointly masked sequence-to-sequence model for nonautoregressive neural machine translation, 2020, Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, Online. Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_114",
            "start": 0,
            "end": 273,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_115@0",
            "content": "UNKNOWN, None, 1950, Error detecting and error correcting codes. The Bell system technical journal, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_115",
            "start": 0,
            "end": 100,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_116@0",
            "content": "Chenyang Huang, Hao Zhou, Lili Osmar R Za\u00efane, Lei Mou,  Li, Non-autoregressive translation with layer-wise prediction and deep supervision, 2022, AAAI, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_116",
            "start": 0,
            "end": 153,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_117@0",
            "content": "Lukasz Kaiser, Samy Bengio, Aurko Roy, Ashish Vaswani, Niki Parmar, Jakob Uszkoreit, Noam Shazeer, Fast decoding in sequence models using discrete latent variables, 2018-07-10, Proceedings of the 35th International Conference on Machine Learning, PMLR.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_117",
            "start": 0,
            "end": 251,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_118@0",
            "content": "Yoon Kim, Alexander Rush, Sequencelevel knowledge distillation, 2016, Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_118",
            "start": 0,
            "end": 199,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_119@0",
            "content": "P Diederik, Jimmy Kingma,  Ba, Adam: A method for stochastic optimization, 2015-05-07, 3rd International Conference on Learning Representations, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_119",
            "start": 0,
            "end": 145,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_120@0",
            "content": "Jason Lee, Elman Mansimov, Kyunghyun Cho, Deterministic non-autoregressive neural sequence modeling by iterative refinement, 2018, Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_120",
            "start": 0,
            "end": 219,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_121@0",
            "content": "Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao, William B Dolan, A diversity-promoting objective function for neural conversation models, 2016, Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_121",
            "start": 0,
            "end": 295,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_122@0",
            "content": "Yanran Li, Hui Su, Xiaoyu Shen, Wenjie Li, Ziqiang Cao, Shuzi Niu, DailyDialog: A manually labelled multi-turn dialogue dataset, 2017, Proceedings of the Eighth International Joint Conference on Natural Language Processing, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_122",
            "start": 0,
            "end": 224,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_123@0",
            "content": "Zhuohan Li, Di He, Fei Tian, Tao Qin, Liwei Wang, Tie-Yan Liu, Hint-based training for non-autoregressive translation, 2019, NeuralIPS, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_123",
            "start": 0,
            "end": 136,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_124@0",
            "content": "UNKNOWN, None, 2020, Task-level curriculum learning for non-autoregressive neural machine translation, AAAI.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_124",
            "start": 0,
            "end": 107,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_125@0",
            "content": "Xuezhe Ma, Chunting Zhou, Xian Li, Graham Neubig, Eduard Hovy, FlowSeq: Nonautoregressive conditional sequence generation with generative flow, 2019, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_125",
            "start": 0,
            "end": 327,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_126@0",
            "content": "Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier, Michael Auli, fairseq: A fast, extensible toolkit for sequence modeling, 2019, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics (Demonstrations), Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_126",
            "start": 0,
            "end": 343,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_127@0",
            "content": "Kishore Papineni, Salim Roukos, Todd Ward, Wei-Jing Zhu, Bleu: a method for automatic evaluation of machine translation, 2002, Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_127",
            "start": 0,
            "end": 257,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_128@0",
            "content": "Kainan Peng, Wei Ping, Zhao Song, Kexin Zhao, Non-autoregressive neural text-to-speech, 2020-07, Proceedings of the 37th International Conference on Machine Learning, PMLR.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_128",
            "start": 0,
            "end": 171,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_129@0",
            "content": "Lihua Qian, Hao Zhou, Yu Bao, Mingxuan Wang, Lin Qiu, Weinan Zhang, Yong Yu, Lei Li, Glancing transformer for non-autoregressive neural machine translation, 2021, ACL, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_129",
            "start": 0,
            "end": 168,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_130@0",
            "content": "UNKNOWN, None, 2021, The volctrans glat system: Nonautoregressive translation meets wmt21, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_130",
            "start": 0,
            "end": 91,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_131@0",
            "content": "UNKNOWN, None, 2018, Towards a better understanding of vector quantized autoencoders. arXiv, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_131",
            "start": 0,
            "end": 93,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_132@0",
            "content": "Rico Sennrich, Barry Haddow, Alexandra Birch, Neural machine translation of rare words with subword units, 2016, Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, Long Papers.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_132",
            "start": 0,
            "end": 213,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_133@0",
            "content": "UNKNOWN, None, 2019, Latent-variable nonautoregressive neural machine translation with deterministic inference using a delta posterior, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_133",
            "start": 0,
            "end": 136,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_134@0",
            "content": "Zhiqing Sun, Zhuohan Li, Haoqing Wang, Di He, Zi Lin, Zhi-Hong Deng, Fast structured decoding for sequence models, 2019-12-08, Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_134",
            "start": 0,
            "end": 241,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_135@0",
            "content": "Zhiqing Sun, Yiming Yang, An em approach to non-autoregressive conditional sequence generation, 2020, International Conference on Machine Learning, PMLR.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_135",
            "start": 0,
            "end": 152,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_136@0",
            "content": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan Gomez, Lukasz Kaiser, Illia Polosukhin, Attention is all you need, 2017-12-04, Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_136",
            "start": 0,
            "end": 272,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_137@0",
            "content": "Bingzhen Wei, Mingxuan Wang, Hao Zhou, Junyang Lin, Xu Sun, Imitation learning for nonautoregressive neural machine translation, 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, Association for Computational Linguistics.",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_137",
            "start": 0,
            "end": 265,
            "label": {}
        },
        {
            "ix": "24-ARR_v2_138@0",
            "content": "Chunting Zhou, Jiatao Gu, Graham Neubig, Understanding knowledge distillation in nonautoregressive machine translation, 2020-04-26, 8th International Conference on Learning Representations, .",
            "ntype": "s",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            },
            "src_ix": "24-ARR_v2_138",
            "start": 0,
            "end": 190,
            "label": {}
        }
    ],
    "edges": [
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_1",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_1",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_1",
            "tgt_ix": "24-ARR_v2_2",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_1",
            "tgt_ix": "24-ARR_v2_2",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_3",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_2",
            "tgt_ix": "24-ARR_v2_3",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_4",
            "tgt_ix": "24-ARR_v2_5",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_5",
            "tgt_ix": "24-ARR_v2_6",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_6",
            "tgt_ix": "24-ARR_v2_7",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_7",
            "tgt_ix": "24-ARR_v2_8",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_8",
            "tgt_ix": "24-ARR_v2_9",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_4",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_5",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_6",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_7",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_8",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_9",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_4",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_10",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_9",
            "tgt_ix": "24-ARR_v2_10",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_11",
            "tgt_ix": "24-ARR_v2_12",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_12",
            "tgt_ix": "24-ARR_v2_13",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_13",
            "tgt_ix": "24-ARR_v2_14",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_14",
            "tgt_ix": "24-ARR_v2_15",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_15",
            "tgt_ix": "24-ARR_v2_16",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_16",
            "tgt_ix": "24-ARR_v2_17",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_17",
            "tgt_ix": "24-ARR_v2_18",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_18",
            "tgt_ix": "24-ARR_v2_19",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_19",
            "tgt_ix": "24-ARR_v2_20",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_20",
            "tgt_ix": "24-ARR_v2_21",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_21",
            "tgt_ix": "24-ARR_v2_22",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_22",
            "tgt_ix": "24-ARR_v2_23",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_23",
            "tgt_ix": "24-ARR_v2_24",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_24",
            "tgt_ix": "24-ARR_v2_25",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_25",
            "tgt_ix": "24-ARR_v2_26",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_26",
            "tgt_ix": "24-ARR_v2_27",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_27",
            "tgt_ix": "24-ARR_v2_28",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_28",
            "tgt_ix": "24-ARR_v2_29",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_11",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_12",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_13",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_14",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_15",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_16",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_17",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_18",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_19",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_20",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_21",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_22",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_23",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_24",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_25",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_26",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_27",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_28",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_29",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_11",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_30",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_29",
            "tgt_ix": "24-ARR_v2_30",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_31",
            "tgt_ix": "24-ARR_v2_32",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_32",
            "tgt_ix": "24-ARR_v2_33",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_33",
            "tgt_ix": "24-ARR_v2_34",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_34",
            "tgt_ix": "24-ARR_v2_35",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_35",
            "tgt_ix": "24-ARR_v2_36",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_36",
            "tgt_ix": "24-ARR_v2_37",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_37",
            "tgt_ix": "24-ARR_v2_38",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_38",
            "tgt_ix": "24-ARR_v2_39",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_39",
            "tgt_ix": "24-ARR_v2_40",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_40",
            "tgt_ix": "24-ARR_v2_41",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_41",
            "tgt_ix": "24-ARR_v2_42",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_42",
            "tgt_ix": "24-ARR_v2_43",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_43",
            "tgt_ix": "24-ARR_v2_44",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_44",
            "tgt_ix": "24-ARR_v2_45",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_45",
            "tgt_ix": "24-ARR_v2_46",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_46",
            "tgt_ix": "24-ARR_v2_47",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_31",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_32",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_33",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_34",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_35",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_36",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_37",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_38",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_39",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_40",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_41",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_42",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_43",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_44",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_45",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_46",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_47",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_31",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_48",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_47",
            "tgt_ix": "24-ARR_v2_48",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_49",
            "tgt_ix": "24-ARR_v2_50",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_50",
            "tgt_ix": "24-ARR_v2_51",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_51",
            "tgt_ix": "24-ARR_v2_52",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_52",
            "tgt_ix": "24-ARR_v2_53",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_53",
            "tgt_ix": "24-ARR_v2_54",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_54",
            "tgt_ix": "24-ARR_v2_55",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_55",
            "tgt_ix": "24-ARR_v2_56",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_56",
            "tgt_ix": "24-ARR_v2_57",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_57",
            "tgt_ix": "24-ARR_v2_58",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_58",
            "tgt_ix": "24-ARR_v2_59",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_59",
            "tgt_ix": "24-ARR_v2_60",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_49",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_50",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_51",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_52",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_53",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_54",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_55",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_56",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_57",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_58",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_59",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_60",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_49",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_61",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_60",
            "tgt_ix": "24-ARR_v2_61",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_62",
            "tgt_ix": "24-ARR_v2_63",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_63",
            "tgt_ix": "24-ARR_v2_64",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_64",
            "tgt_ix": "24-ARR_v2_65",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_65",
            "tgt_ix": "24-ARR_v2_66",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_66",
            "tgt_ix": "24-ARR_v2_67",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_67",
            "tgt_ix": "24-ARR_v2_68",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_68",
            "tgt_ix": "24-ARR_v2_69",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_62",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_63",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_64",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_65",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_66",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_67",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_68",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_69",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_62",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_70",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_69",
            "tgt_ix": "24-ARR_v2_70",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_70",
            "tgt_ix": "24-ARR_v2_71",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_70",
            "tgt_ix": "24-ARR_v2_71",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_70",
            "tgt_ix": "24-ARR_v2_72",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_71",
            "tgt_ix": "24-ARR_v2_72",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_73",
            "tgt_ix": "24-ARR_v2_74",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_76",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_76",
            "tgt_ix": "24-ARR_v2_77",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_77",
            "tgt_ix": "24-ARR_v2_78",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_78",
            "tgt_ix": "24-ARR_v2_79",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_73",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_74",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_75",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_76",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_77",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_78",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_79",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_73",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_70",
            "tgt_ix": "24-ARR_v2_80",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_79",
            "tgt_ix": "24-ARR_v2_80",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_81",
            "tgt_ix": "24-ARR_v2_82",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_82",
            "tgt_ix": "24-ARR_v2_83",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_84",
            "tgt_ix": "24-ARR_v2_85",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_85",
            "tgt_ix": "24-ARR_v2_86",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_81",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_82",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_83",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_84",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_85",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_86",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_81",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_70",
            "tgt_ix": "24-ARR_v2_87",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_86",
            "tgt_ix": "24-ARR_v2_87",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_88",
            "tgt_ix": "24-ARR_v2_89",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_89",
            "tgt_ix": "24-ARR_v2_90",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_90",
            "tgt_ix": "24-ARR_v2_91",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_91",
            "tgt_ix": "24-ARR_v2_92",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_92",
            "tgt_ix": "24-ARR_v2_93",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_93",
            "tgt_ix": "24-ARR_v2_94",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_94",
            "tgt_ix": "24-ARR_v2_95",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_95",
            "tgt_ix": "24-ARR_v2_96",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_96",
            "tgt_ix": "24-ARR_v2_97",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_88",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_89",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_90",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_91",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_92",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_93",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_94",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_95",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_96",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_97",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_88",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_98",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_97",
            "tgt_ix": "24-ARR_v2_98",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_98",
            "tgt_ix": "24-ARR_v2_99",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_98",
            "tgt_ix": "24-ARR_v2_99",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_100",
            "tgt_ix": "24-ARR_v2_101",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_101",
            "tgt_ix": "24-ARR_v2_102",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_98",
            "tgt_ix": "24-ARR_v2_100",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_98",
            "tgt_ix": "24-ARR_v2_101",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_98",
            "tgt_ix": "24-ARR_v2_102",
            "etype": "parent",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_99",
            "tgt_ix": "24-ARR_v2_100",
            "etype": "next",
            "meta": null
        },
        {
            "src_ix": "24-ARR_v2_0",
            "tgt_ix": "24-ARR_v2_0@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_1",
            "tgt_ix": "24-ARR_v2_1@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_2",
            "tgt_ix": "24-ARR_v2_2@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_2",
            "tgt_ix": "24-ARR_v2_2@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_2",
            "tgt_ix": "24-ARR_v2_2@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_2",
            "tgt_ix": "24-ARR_v2_2@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_2",
            "tgt_ix": "24-ARR_v2_2@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_3",
            "tgt_ix": "24-ARR_v2_3@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_4",
            "tgt_ix": "24-ARR_v2_4@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_4",
            "tgt_ix": "24-ARR_v2_4@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_4",
            "tgt_ix": "24-ARR_v2_4@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_5",
            "tgt_ix": "24-ARR_v2_5@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_5",
            "tgt_ix": "24-ARR_v2_5@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_5",
            "tgt_ix": "24-ARR_v2_5@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_5",
            "tgt_ix": "24-ARR_v2_5@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_6",
            "tgt_ix": "24-ARR_v2_6@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_6",
            "tgt_ix": "24-ARR_v2_6@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_6",
            "tgt_ix": "24-ARR_v2_6@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_7",
            "tgt_ix": "24-ARR_v2_7@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_7",
            "tgt_ix": "24-ARR_v2_7@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_7",
            "tgt_ix": "24-ARR_v2_7@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_7",
            "tgt_ix": "24-ARR_v2_7@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_8",
            "tgt_ix": "24-ARR_v2_8@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_8",
            "tgt_ix": "24-ARR_v2_8@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_8",
            "tgt_ix": "24-ARR_v2_8@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_8",
            "tgt_ix": "24-ARR_v2_8@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_8",
            "tgt_ix": "24-ARR_v2_8@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_9",
            "tgt_ix": "24-ARR_v2_9@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_9",
            "tgt_ix": "24-ARR_v2_9@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_9",
            "tgt_ix": "24-ARR_v2_9@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_10",
            "tgt_ix": "24-ARR_v2_10@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_11",
            "tgt_ix": "24-ARR_v2_11@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_12",
            "tgt_ix": "24-ARR_v2_12@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_13",
            "tgt_ix": "24-ARR_v2_13@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_14",
            "tgt_ix": "24-ARR_v2_14@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_15",
            "tgt_ix": "24-ARR_v2_15@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_16",
            "tgt_ix": "24-ARR_v2_16@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_16",
            "tgt_ix": "24-ARR_v2_16@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_17",
            "tgt_ix": "24-ARR_v2_17@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_18",
            "tgt_ix": "24-ARR_v2_18@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_19",
            "tgt_ix": "24-ARR_v2_19@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_19",
            "tgt_ix": "24-ARR_v2_19@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_19",
            "tgt_ix": "24-ARR_v2_19@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_19",
            "tgt_ix": "24-ARR_v2_19@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_20",
            "tgt_ix": "24-ARR_v2_20@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_20",
            "tgt_ix": "24-ARR_v2_20@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_21",
            "tgt_ix": "24-ARR_v2_21@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_22",
            "tgt_ix": "24-ARR_v2_22@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_22",
            "tgt_ix": "24-ARR_v2_22@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_22",
            "tgt_ix": "24-ARR_v2_22@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_22",
            "tgt_ix": "24-ARR_v2_22@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_23",
            "tgt_ix": "24-ARR_v2_23@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_23",
            "tgt_ix": "24-ARR_v2_23@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_24",
            "tgt_ix": "24-ARR_v2_24@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_25",
            "tgt_ix": "24-ARR_v2_25@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_25",
            "tgt_ix": "24-ARR_v2_25@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_26",
            "tgt_ix": "24-ARR_v2_26@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_26",
            "tgt_ix": "24-ARR_v2_26@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_27",
            "tgt_ix": "24-ARR_v2_27@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_28",
            "tgt_ix": "24-ARR_v2_28@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_28",
            "tgt_ix": "24-ARR_v2_28@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_28",
            "tgt_ix": "24-ARR_v2_28@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_29",
            "tgt_ix": "24-ARR_v2_29@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_29",
            "tgt_ix": "24-ARR_v2_29@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_29",
            "tgt_ix": "24-ARR_v2_29@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_29",
            "tgt_ix": "24-ARR_v2_29@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_30",
            "tgt_ix": "24-ARR_v2_30@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_31",
            "tgt_ix": "24-ARR_v2_31@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_32",
            "tgt_ix": "24-ARR_v2_32@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_33",
            "tgt_ix": "24-ARR_v2_33@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_34",
            "tgt_ix": "24-ARR_v2_34@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_34",
            "tgt_ix": "24-ARR_v2_34@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_34",
            "tgt_ix": "24-ARR_v2_34@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_35",
            "tgt_ix": "24-ARR_v2_35@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_36",
            "tgt_ix": "24-ARR_v2_36@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_37",
            "tgt_ix": "24-ARR_v2_37@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_37",
            "tgt_ix": "24-ARR_v2_37@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_38",
            "tgt_ix": "24-ARR_v2_38@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_39",
            "tgt_ix": "24-ARR_v2_39@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_40",
            "tgt_ix": "24-ARR_v2_40@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_40",
            "tgt_ix": "24-ARR_v2_40@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_41",
            "tgt_ix": "24-ARR_v2_41@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_42",
            "tgt_ix": "24-ARR_v2_42@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_43",
            "tgt_ix": "24-ARR_v2_43@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_43",
            "tgt_ix": "24-ARR_v2_43@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_43",
            "tgt_ix": "24-ARR_v2_43@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_43",
            "tgt_ix": "24-ARR_v2_43@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_44",
            "tgt_ix": "24-ARR_v2_44@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_45",
            "tgt_ix": "24-ARR_v2_45@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_46",
            "tgt_ix": "24-ARR_v2_46@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_47",
            "tgt_ix": "24-ARR_v2_47@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_48",
            "tgt_ix": "24-ARR_v2_48@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_49",
            "tgt_ix": "24-ARR_v2_49@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_50",
            "tgt_ix": "24-ARR_v2_50@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_50",
            "tgt_ix": "24-ARR_v2_50@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_51",
            "tgt_ix": "24-ARR_v2_51@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_52",
            "tgt_ix": "24-ARR_v2_52@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_52",
            "tgt_ix": "24-ARR_v2_52@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_53",
            "tgt_ix": "24-ARR_v2_53@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_54",
            "tgt_ix": "24-ARR_v2_54@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_55",
            "tgt_ix": "24-ARR_v2_55@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_56",
            "tgt_ix": "24-ARR_v2_56@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_57",
            "tgt_ix": "24-ARR_v2_57@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_58",
            "tgt_ix": "24-ARR_v2_58@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_58",
            "tgt_ix": "24-ARR_v2_58@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_59",
            "tgt_ix": "24-ARR_v2_59@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_60",
            "tgt_ix": "24-ARR_v2_60@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_61",
            "tgt_ix": "24-ARR_v2_61@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_62",
            "tgt_ix": "24-ARR_v2_62@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_63",
            "tgt_ix": "24-ARR_v2_63@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_63",
            "tgt_ix": "24-ARR_v2_63@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_64",
            "tgt_ix": "24-ARR_v2_64@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_65",
            "tgt_ix": "24-ARR_v2_65@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_66",
            "tgt_ix": "24-ARR_v2_66@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_67",
            "tgt_ix": "24-ARR_v2_67@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_68",
            "tgt_ix": "24-ARR_v2_68@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_69",
            "tgt_ix": "24-ARR_v2_69@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_70",
            "tgt_ix": "24-ARR_v2_70@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_71",
            "tgt_ix": "24-ARR_v2_71@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_72",
            "tgt_ix": "24-ARR_v2_72@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_73",
            "tgt_ix": "24-ARR_v2_73@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_73",
            "tgt_ix": "24-ARR_v2_73@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_74",
            "tgt_ix": "24-ARR_v2_74@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_75@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_75@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_75@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_75@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_75@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_75@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_75",
            "tgt_ix": "24-ARR_v2_75@6",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_76",
            "tgt_ix": "24-ARR_v2_76@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_76",
            "tgt_ix": "24-ARR_v2_76@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_76",
            "tgt_ix": "24-ARR_v2_76@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_77",
            "tgt_ix": "24-ARR_v2_77@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_77",
            "tgt_ix": "24-ARR_v2_77@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_77",
            "tgt_ix": "24-ARR_v2_77@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_77",
            "tgt_ix": "24-ARR_v2_77@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_77",
            "tgt_ix": "24-ARR_v2_77@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_77",
            "tgt_ix": "24-ARR_v2_77@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_78",
            "tgt_ix": "24-ARR_v2_78@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_79",
            "tgt_ix": "24-ARR_v2_79@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_79",
            "tgt_ix": "24-ARR_v2_79@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_79",
            "tgt_ix": "24-ARR_v2_79@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_79",
            "tgt_ix": "24-ARR_v2_79@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_79",
            "tgt_ix": "24-ARR_v2_79@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_79",
            "tgt_ix": "24-ARR_v2_79@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_80",
            "tgt_ix": "24-ARR_v2_80@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_81",
            "tgt_ix": "24-ARR_v2_81@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_81",
            "tgt_ix": "24-ARR_v2_81@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_81",
            "tgt_ix": "24-ARR_v2_81@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_81",
            "tgt_ix": "24-ARR_v2_81@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_82",
            "tgt_ix": "24-ARR_v2_82@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_82",
            "tgt_ix": "24-ARR_v2_82@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_83",
            "tgt_ix": "24-ARR_v2_83@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_84",
            "tgt_ix": "24-ARR_v2_84@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_84",
            "tgt_ix": "24-ARR_v2_84@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_84",
            "tgt_ix": "24-ARR_v2_84@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_84",
            "tgt_ix": "24-ARR_v2_84@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_85",
            "tgt_ix": "24-ARR_v2_85@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_85",
            "tgt_ix": "24-ARR_v2_85@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_85",
            "tgt_ix": "24-ARR_v2_85@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_86",
            "tgt_ix": "24-ARR_v2_86@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_86",
            "tgt_ix": "24-ARR_v2_86@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_87",
            "tgt_ix": "24-ARR_v2_87@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_88",
            "tgt_ix": "24-ARR_v2_88@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_88",
            "tgt_ix": "24-ARR_v2_88@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_88",
            "tgt_ix": "24-ARR_v2_88@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_88",
            "tgt_ix": "24-ARR_v2_88@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_89",
            "tgt_ix": "24-ARR_v2_89@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_89",
            "tgt_ix": "24-ARR_v2_89@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_89",
            "tgt_ix": "24-ARR_v2_89@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_89",
            "tgt_ix": "24-ARR_v2_89@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_90",
            "tgt_ix": "24-ARR_v2_90@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_90",
            "tgt_ix": "24-ARR_v2_90@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_90",
            "tgt_ix": "24-ARR_v2_90@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_90",
            "tgt_ix": "24-ARR_v2_90@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_90",
            "tgt_ix": "24-ARR_v2_90@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_91",
            "tgt_ix": "24-ARR_v2_91@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_91",
            "tgt_ix": "24-ARR_v2_91@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_91",
            "tgt_ix": "24-ARR_v2_91@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_91",
            "tgt_ix": "24-ARR_v2_91@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_92",
            "tgt_ix": "24-ARR_v2_92@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_92",
            "tgt_ix": "24-ARR_v2_92@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_92",
            "tgt_ix": "24-ARR_v2_92@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_92",
            "tgt_ix": "24-ARR_v2_92@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_92",
            "tgt_ix": "24-ARR_v2_92@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_92",
            "tgt_ix": "24-ARR_v2_92@5",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_93",
            "tgt_ix": "24-ARR_v2_93@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_93",
            "tgt_ix": "24-ARR_v2_93@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_93",
            "tgt_ix": "24-ARR_v2_93@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_93",
            "tgt_ix": "24-ARR_v2_93@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_94",
            "tgt_ix": "24-ARR_v2_94@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_94",
            "tgt_ix": "24-ARR_v2_94@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_94",
            "tgt_ix": "24-ARR_v2_94@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_95",
            "tgt_ix": "24-ARR_v2_95@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_95",
            "tgt_ix": "24-ARR_v2_95@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_95",
            "tgt_ix": "24-ARR_v2_95@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_96",
            "tgt_ix": "24-ARR_v2_96@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_96",
            "tgt_ix": "24-ARR_v2_96@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_96",
            "tgt_ix": "24-ARR_v2_96@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_96",
            "tgt_ix": "24-ARR_v2_96@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_96",
            "tgt_ix": "24-ARR_v2_96@4",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_97",
            "tgt_ix": "24-ARR_v2_97@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_97",
            "tgt_ix": "24-ARR_v2_97@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_98",
            "tgt_ix": "24-ARR_v2_98@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_99",
            "tgt_ix": "24-ARR_v2_99@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_99",
            "tgt_ix": "24-ARR_v2_99@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_99",
            "tgt_ix": "24-ARR_v2_99@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_99",
            "tgt_ix": "24-ARR_v2_99@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_100",
            "tgt_ix": "24-ARR_v2_100@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_100",
            "tgt_ix": "24-ARR_v2_100@1",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_100",
            "tgt_ix": "24-ARR_v2_100@2",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_100",
            "tgt_ix": "24-ARR_v2_100@3",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_101",
            "tgt_ix": "24-ARR_v2_101@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_102",
            "tgt_ix": "24-ARR_v2_102@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_103",
            "tgt_ix": "24-ARR_v2_103@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_104",
            "tgt_ix": "24-ARR_v2_104@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_105",
            "tgt_ix": "24-ARR_v2_105@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_106",
            "tgt_ix": "24-ARR_v2_106@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_107",
            "tgt_ix": "24-ARR_v2_107@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_108",
            "tgt_ix": "24-ARR_v2_108@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_109",
            "tgt_ix": "24-ARR_v2_109@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_110",
            "tgt_ix": "24-ARR_v2_110@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_111",
            "tgt_ix": "24-ARR_v2_111@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_112",
            "tgt_ix": "24-ARR_v2_112@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_113",
            "tgt_ix": "24-ARR_v2_113@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_114",
            "tgt_ix": "24-ARR_v2_114@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_115",
            "tgt_ix": "24-ARR_v2_115@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_116",
            "tgt_ix": "24-ARR_v2_116@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_117",
            "tgt_ix": "24-ARR_v2_117@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_118",
            "tgt_ix": "24-ARR_v2_118@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_119",
            "tgt_ix": "24-ARR_v2_119@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_120",
            "tgt_ix": "24-ARR_v2_120@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_121",
            "tgt_ix": "24-ARR_v2_121@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_122",
            "tgt_ix": "24-ARR_v2_122@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_123",
            "tgt_ix": "24-ARR_v2_123@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_124",
            "tgt_ix": "24-ARR_v2_124@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_125",
            "tgt_ix": "24-ARR_v2_125@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_126",
            "tgt_ix": "24-ARR_v2_126@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_127",
            "tgt_ix": "24-ARR_v2_127@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_128",
            "tgt_ix": "24-ARR_v2_128@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_129",
            "tgt_ix": "24-ARR_v2_129@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_130",
            "tgt_ix": "24-ARR_v2_130@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_131",
            "tgt_ix": "24-ARR_v2_131@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_132",
            "tgt_ix": "24-ARR_v2_132@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_133",
            "tgt_ix": "24-ARR_v2_133@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_134",
            "tgt_ix": "24-ARR_v2_134@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_135",
            "tgt_ix": "24-ARR_v2_135@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_136",
            "tgt_ix": "24-ARR_v2_136@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_137",
            "tgt_ix": "24-ARR_v2_137@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        },
        {
            "src_ix": "24-ARR_v2_138",
            "tgt_ix": "24-ARR_v2_138@0",
            "etype": "link",
            "meta": {
                "created_by": "IntertextSentenceSplitter_all"
            }
        }
    ],
    "prefix": "paper.tei",
    "meta": {
        "ix_counter": 880,
        "sentence_split_type": "HybridSplitterLessAndLong",
        "sentence_split_model": "HybridSplitterLessAndLong_SciSpacy+Spacy",
        "doc_id": "24-ARR",
        "version": 2
    }
}